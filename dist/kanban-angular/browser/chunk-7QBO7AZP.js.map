{
  "version": 3,
  "sources": ["src/app/services/smtp.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError, from } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SubdomainService } from './subdomain.service';\nimport { CompanyService } from './company.service';\nimport { AuthService } from './auth.service';\nimport { Company } from '../models/company.model';\nimport { Functions, httpsCallable } from '@angular/fire/functions';\n\nexport interface EmailData {\n  to: string;\n  subject: string;\n  html?: string;\n  text?: string;\n  cc?: string[];\n  bcc?: string[];\n  attachments?: Array<{\n    filename: string;\n    content: string; // base64 encoded\n    contentType: string;\n  }>;\n  templateId?: string;\n  templateData?: { [key: string]: any };\n}\n\nexport interface EmailResponse {\n  success: boolean;\n  messageId?: string;\n  error?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmtpService {\n  private http = inject(HttpClient);\n  private subdomainService = inject(SubdomainService);\n  private functions = inject(Functions);\n  private companyService = inject(CompanyService);\n  private authService = inject(AuthService);\n\n  private async resolveCompanyWithSmtp(): Promise<Company | null> {\n    // 1) Empresa atual no contexto\n    let company = this.subdomainService.getCurrentCompany();\n    if (company?.smtpConfig && this.validateSmtpConfig(company)) return company;\n\n    // 2) Buscar por subdomínio\n    try {\n      const sub = this.companyService.getCompanySubdomain();\n      if (sub) {\n        const bySub = await this.companyService.getCompanyBySubdomain(sub);\n        if (bySub?.id) {\n          this.subdomainService.setCurrentCompany(bySub);\n          company = bySub;\n          if (company?.smtpConfig && this.validateSmtpConfig(company)) return company;\n        }\n      }\n    } catch {}\n\n    // 3) Buscar por email do usuário autenticado\n    try {\n      const currentUser = this.authService.getCurrentUser();\n      if (currentUser?.email) {\n        const byEmail = await this.companyService.getCompanyByUserEmail(currentUser.email);\n        if (byEmail?.id) {\n          this.subdomainService.setCurrentCompany(byEmail);\n          company = byEmail;\n          if (company?.smtpConfig && this.validateSmtpConfig(company)) return company;\n        }\n      }\n    } catch {}\n\n    return company || null;\n  }\n\n  // Enviar email usando HTTP Firebase Function (melhor controle de CORS)\n  sendEmail(emailData: EmailData): Observable<EmailResponse> {\n    return from(this.resolveCompanyWithSmtp()).pipe(\n      switchMap((company) => {\n        if (!company) {\n          console.error('❌ Contexto da empresa não inicializado');\n          return throwError(() => new Error('Contexto da empresa não inicializado'));\n        }\n\n\n        // Usar HTTP Function para melhor controle de CORS\n        const httpFunctionUrl = 'https://us-central1-kanban-gobuyer.cloudfunctions.net/sendEmailHttp';\n        \n        const payload = {\n          emailData: {\n            to: emailData.to,\n            subject: emailData.subject,\n            html: emailData.html,\n            text: emailData.text,\n            cc: emailData.cc,\n            bcc: emailData.bcc\n          },\n          companyId: (company as any).id, // Cloud Function pode resolver via companyId\n          // Enviar smtpConfig também, para compatibilidade retro\n          smtpConfig: {\n            host: (company as any).smtpConfig?.host,\n            port: (company as any).smtpConfig?.port,\n            secure: (company as any).smtpConfig?.secure,\n            user: (company as any).smtpConfig?.user,\n            password: (company as any).smtpConfig?.password,\n            fromName: (company as any).smtpConfig?.fromName,\n            fromEmail: (company as any).smtpConfig?.fromEmail\n          }\n        };\n\n\n        return this.http.post<EmailResponse>(httpFunctionUrl, payload);\n      }),\n      map((result: any) => {\n        return {\n          success: result.success || true,\n          messageId: result.messageId || 'sent',\n          message: result.message\n        };\n      }),\n      catchError(error => {\n        console.error('❌ Erro detalhado ao enviar email via HTTP Function:', error);\n        \n        let errorMessage = 'Erro desconhecido ao enviar email';\n        \n        if (error.status === 400) {\n          errorMessage = error.error?.error || 'Dados inválidos para envio de email';\n        } else if (error.status === 404) {\n          errorMessage = 'Empresa não encontrada';\n        } else if (error.status === 500) {\n          errorMessage = error.error?.error || 'Erro interno do servidor';\n        } else if (error.error?.error) {\n          errorMessage = error.error.error;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n        \n        return throwError(() => ({\n          success: false,\n          error: errorMessage,\n          details: error\n        }));\n      })\n    );\n  }\n\n  // Enviar email de template\n  sendTemplateEmail(templateId: string, to: string, templateData: { [key: string]: any }, subject?: string): Observable<EmailResponse> {\n    return this.sendEmail({\n      to,\n      subject: subject || 'Email automático',\n      templateId,\n      templateData\n    });\n  }\n\n  // Enviar email de notificação simples\n  sendNotificationEmail(to: string, subject: string, message: string, isHtml: boolean = false): Observable<EmailResponse> {\n    const emailData: EmailData = {\n      to,\n      subject,\n      [isHtml ? 'html' : 'text']: message\n    };\n\n    return this.sendEmail(emailData);\n  }\n\n  // Enviar email de novo lead\n  sendNewLeadNotification(lead: any, boardName: string, columnName: string): Observable<EmailResponse> {\n    const company = this.subdomainService.getCurrentCompany();\n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n\n    const subject = `Novo Registro: ${lead.fields.contactName || lead.fields.companyName || 'Registro sem nome'}`;\n    \n    const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <div style=\"background-color: ${company.primaryColor || '#007bff'}; color: white; padding: 20px; text-align: center;\">\n          <h1>${company.name}</h1>\n          <h2>Novo Registro Recebido</h2>\n        </div>\n        \n        <div style=\"padding: 20px; background-color: #f8f9fa;\">\n          <h3>Detalhes do Registro:</h3>\n          <table style=\"width: 100%; border-collapse: collapse;\">\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Quadro:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${boardName}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Fase:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${columnName}</td>\n            </tr>\n            ${lead.fields.companyName ? `\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Empresa:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${lead.fields.companyName}</td>\n            </tr>\n            ` : ''}\n            ${lead.fields.contactName ? `\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Contato:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${lead.fields.contactName}</td>\n            </tr>\n            ` : ''}\n            ${lead.fields.contactEmail ? `\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Email:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${lead.fields.contactEmail}</td>\n            </tr>\n            ` : ''}\n            ${lead.fields.contactPhone ? `\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Telefone:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${lead.fields.contactPhone}</td>\n            </tr>\n            ` : ''}\n          </table>\n        </div>\n        \n        <div style=\"padding: 20px; text-align: center; color: #666;\">\n          <p>\n            <a href=\"${this.subdomainService.getCompanyUrl(company.subdomain)}\" \n               style=\"background-color: ${company.primaryColor || '#007bff'}; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;\">\n              Ver no Sistema\n            </a>\n          </p>\n        </div>\n      </div>\n    `;\n\n    return this.sendEmail({\n      to: company.ownerEmail,\n      subject,\n      html\n    });\n  }\n\n  // Testar configuração SMTP via Firebase Functions\n  testSmtpConfiguration(): Observable<EmailResponse> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n\n    if (!this.validateSmtpConfig(company)) {\n      const missingFields = this.getSmtpValidationErrors(company);\n      return throwError(() => new Error(`Configuração SMTP incompleta. Campos faltantes: ${missingFields.join(', ')}`));\n    }\n\n\n    // Usar Firebase Callable Function para teste de configuração\n    const testSmtpCallable = httpsCallable(this.functions, 'testSmtpConfig');\n    \n    const payload = {\n      smtpConfig: {\n        host: (company as any).smtpConfig.host,\n        port: (company as any).smtpConfig.port,\n        secure: (company as any).smtpConfig.secure,\n        user: (company as any).smtpConfig.user,\n        password: (company as any).smtpConfig.password,\n        fromName: (company as any).smtpConfig.fromName,\n        fromEmail: (company as any).smtpConfig.fromEmail\n      },\n      testEmail: company.ownerEmail\n    };\n\n    return from(testSmtpCallable(payload)).pipe(\n      map((result: any) => {\n        return {\n          success: result.data.success || true,\n          messageId: result.data.messageId || 'test-sent',\n          message: result.data.message || 'Teste realizado com sucesso'\n        };\n      }),\n      catchError(error => {\n        console.error('❌ Erro ao testar configuração SMTP:', error);\n        \n        let errorMessage = 'Erro ao testar configuração SMTP';\n        \n        if (error.message) {\n          errorMessage = error.message;\n        }\n        \n        return throwError(() => ({\n          success: false,\n          error: errorMessage,\n          details: error\n        }));\n      })\n    );\n  }\n\n  // Validar configuração SMTP da empresa\n  private validateSmtpConfig(company: Company): boolean {\n    const config = (company as any).smtpConfig;\n    \n    return !!(\n      config &&\n      config.host &&\n      config.port &&\n      config.user &&\n      config.password &&\n      config.fromName &&\n      config.fromEmail\n    );\n  }\n\n  // Validar configuração SMTP e retornar campos faltantes\n  private getSmtpValidationErrors(company: Company): string[] {\n    const config = (company as any).smtpConfig;\n    const errors: string[] = [];\n    \n    if (!config) {\n      errors.push('Configuração SMTP não encontrada');\n      return errors;\n    }\n    \n    if (!config.host) errors.push('Servidor SMTP (host)');\n    if (!config.port) errors.push('Porta SMTP');\n    if (!config.user) errors.push('Usuário SMTP');\n    if (!config.password) errors.push('Senha SMTP');\n    if (!config.fromName) errors.push('Nome do remetente');\n    if (!config.fromEmail) errors.push('Email do remetente');\n    \n    return errors;\n  }\n\n  // Método removido - agora usa Firebase Functions diretamente\n\n  // Obter configurações de email da empresa atual\n  getCurrentEmailConfig(): any {\n    const company = this.subdomainService.getCurrentCompany();\n    if (!company) {\n      return null;\n    }\n\n    return {\n      fromName: (company as any).smtpConfig.fromName,\n      fromEmail: (company as any).smtpConfig.fromEmail,\n      isConfigured: this.validateSmtpConfig(company),\n      host: (company as any).smtpConfig.host,\n      port: (company as any).smtpConfig.port,\n      secure: (company as any).smtpConfig.secure\n    };\n  }\n\n  // Atualizar configuração SMTP da empresa\n  updateSmtpConfig(smtpConfig: Company['smtpConfig']): Observable<any> {\n    const company = this.subdomainService.getCurrentCompany();\n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n\n    const apiUrl = `${this.subdomainService.getApiUrl()}/smtp-config`;\n    \n    return this.http.put(apiUrl, smtpConfig).pipe(\n      map(response => {\n        // Atualizar a configuração localmente\n        if (company) {\n          (company as any).smtpConfig = { ...smtpConfig };\n          this.subdomainService.setCurrentCompany(company);\n        }\n        return response;\n      }),\n      catchError(error => {\n        console.error('Erro ao atualizar configuração SMTP:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n}"],
  "mappings": "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",
  "names": []
}
