{
  "version": 3,
  "sources": ["src/app/services/api.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SubdomainService } from './subdomain.service';\n\nexport interface LeadIntakeRequest {\n  companyName?: string;\n  cnpj?: string;\n  contactName?: string;\n  contactEmail?: string;\n  contactPhone?: string;\n  boardId?: string; // ID do quadro onde o lead será criado\n  customFields?: { [key: string]: any };\n  source?: string;\n  utm_source?: string;\n  utm_medium?: string;\n  utm_campaign?: string;\n}\n\nexport interface LeadIntakeResponse {\n  success: boolean;\n  leadId?: string;\n  message?: string;\n  error?: string;\n}\n\nexport interface WebhookPayload {\n  event: string;\n  data: any;\n  timestamp: string;\n  companyId: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private http = inject(HttpClient);\n  private subdomainService = inject(SubdomainService);\n\n  // Lead Intake API - via Firebase HTTP Function\n  submitLead(leadData: LeadIntakeRequest, captchaToken?: string): Observable<LeadIntakeResponse> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n    if (!company.id) {\n      return throwError(() => new Error('ID da empresa não encontrado'));\n    }\n\n    const boardId = leadData.boardId;\n    const companyId: string = company.id as string;\n    const apiUrl = this.getLeadIntakeUrl(companyId, boardId);\n    let headers = this.getApiHeaders(company.apiConfig.token);\n\n    if (captchaToken) {\n      headers = headers.set('X-Captcha-Token', captchaToken);\n    }\n\n    // Normalizar dados do lead dentro de leadData.fields\n    const { boardId: _ignored, ...rest } = leadData;\n    const normalized = (rest as any).fields ? (rest as any) : { fields: rest };\n\n    const payload = {\n      leadData: normalized\n    };\n\n    return this.http.post<LeadIntakeResponse>(apiUrl, payload, { headers }).pipe(\n      map(response => ({\n        ...response,\n        success: true\n      })),\n      catchError(error => {\n        console.error('Erro ao submeter lead:', error);\n        return throwError(() => ({\n          success: false,\n          error: error.error?.error || error.error?.message || 'Erro ao submeter lead'\n        }));\n      })\n    );\n  }\n\n  // Webhook para notificações de automação\n  sendWebhook(webhookUrl: string, payload: WebhookPayload): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'User-Agent': 'TaskBoard-Webhooks/1.0'\n    });\n\n    return this.http.post(webhookUrl, payload, { headers }).pipe(\n      catchError(error => {\n        console.error('Erro ao enviar webhook:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Obter informações da empresa via API pública\n  getCompanyInfo(subdomain: string): Observable<any> {\n    const url = `${this.getBaseApiUrl()}/companies/${subdomain}/info`;\n    \n    return this.http.get(url).pipe(\n      catchError(error => {\n        console.error('Erro ao obter informações da empresa:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Obter configuração do formulário público\n  getPublicFormConfig(): Observable<any> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n\n    const url = `${this.getCompanyApiUrl()}/form-config`;\n    const headers = this.getApiHeaders(company.apiConfig.token);\n\n    return this.http.get(url, { headers }).pipe(\n      catchError(error => {\n        console.error('Erro ao obter configuração do formulário:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Validar token da API\n  validateApiToken(token: string): Observable<boolean> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n\n    const url = `${this.getCompanyApiUrl()}/validate-token`;\n    const headers = this.getApiHeaders(token);\n\n    return this.http.post<{ valid: boolean }>(url, {}, { headers }).pipe(\n      map(response => response.valid),\n      catchError(error => {\n        console.error('Erro ao validar token:', error);\n        return throwError(() => false);\n      })\n    );\n  }\n\n  // Regenerar token da API\n  regenerateApiToken(): Observable<{ token: string }> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n\n    const url = `${this.getCompanyApiUrl()}/regenerate-token`;\n    const headers = this.getApiHeaders(company.apiConfig.token);\n\n    return this.http.post<{ token: string }>(url, {}, { headers }).pipe(\n      map(response => {\n        // Atualizar token localmente\n        if (company) {\n          company.apiConfig.token = response.token;\n          this.subdomainService.setCurrentCompany(company);\n        }\n        return response;\n      }),\n      catchError(error => {\n        console.error('Erro ao regenerar token:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Obter estatísticas da API\n  getApiStats(period: '24h' | '7d' | '30d' = '24h'): Observable<any> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n\n    const url = `${this.getCompanyApiUrl()}/stats?period=${period}`;\n    const headers = this.getApiHeaders(company.apiConfig.token);\n\n    return this.http.get(url, { headers }).pipe(\n      catchError(error => {\n        console.error('Erro ao obter estatísticas da API:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Obter logs da API\n  getApiLogs(limit: number = 100, offset: number = 0): Observable<any> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n\n    const url = `${this.getCompanyApiUrl()}/logs?limit=${limit}&offset=${offset}`;\n    const headers = this.getApiHeaders(company.apiConfig.token);\n\n    return this.http.get(url, { headers }).pipe(\n      catchError(error => {\n        console.error('Erro ao obter logs da API:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Testar endpoint da API\n  testApiEndpoint(boardId?: string): Observable<any> {\n    const testPayload: LeadIntakeRequest = {\n      boardId: boardId || undefined, // Será usado o quadro padrão se não fornecido\n      companyName: 'Empresa Teste',\n      contactName: 'Teste API',\n      contactEmail: 'teste@api.com',\n      contactPhone: '(11) 99999-9999',\n      source: 'api-test',\n      customFields: {\n        testField: 'Valor de teste',\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    return this.submitLead(testPayload).pipe(\n      map(response => ({\n        ...response,\n        testMode: true,\n        timestamp: new Date().toISOString()\n      }))\n    );\n  }\n\n  // URLs e configurações\n  getLeadIntakeUrl(companyId: string, boardId?: string): string {\n    const path = boardId\n      ? `/companies/${encodeURIComponent(companyId)}/boards/${encodeURIComponent(boardId)}`\n      : `/companies/${encodeURIComponent(companyId)}`;\n    if (this.subdomainService.isDevelopment()) {\n      const port = this.getLocalFunctionsPort();\n      return `http://localhost:${port}/kanban-gobuyer/us-central1/leadIntakeHttp${path}`;\n    }\n    return `https://us-central1-kanban-gobuyer.cloudfunctions.net/leadIntakeHttp${path}`;\n  }\n\n  getCompanyApiUrl(): string {\n    const baseUrl = this.subdomainService.getApiUrl();\n    return `${baseUrl}/api`;\n  }\n\n  getBaseApiUrl(): string {\n    if (this.subdomainService.isDevelopment()) {\n      // Detectar porta dinamicamente para Firebase Functions\n      const functionsPort = this.getLocalFunctionsPort();\n      return `http://localhost:${functionsPort}/api/v1`;\n    }\n    \n    return 'https://api.taskboard.com.br/v1';\n  }\n\n  private getLocalFunctionsPort(): number {\n    // 1. Verificar localStorage (configuração salva pelo usuário)\n    const storedPort = localStorage.getItem('firebase-functions-port');\n    if (storedPort) {\n      return parseInt(storedPort, 10);\n    }\n    \n    // 2. Tentar detectar pela configuração do Firebase (se disponível)\n    try {\n      // Verificar se existe alguma configuração global do Firebase\n      const firebaseConfig = (window as any).__FIREBASE_DEFAULTS__;\n      if (firebaseConfig?.emulatorHosts?.functions) {\n        const functionsHost = firebaseConfig.emulatorHosts.functions;\n        const portMatch = functionsHost.match(/:(\\d+)$/);\n        if (portMatch) {\n          return parseInt(portMatch[1], 10);\n        }\n      }\n    } catch (error) {\n      // Ignorar erro se não conseguir detectar\n    }\n    \n    // 3. Usar porta padrão do emulador do Firebase Functions\n    return 5001;\n  }\n\n  // Método para permitir ao usuário definir porta customizada\n  setCustomFunctionsPort(port: number): void {\n    localStorage.setItem('firebase-functions-port', port.toString());\n  }\n\n  // Gerar exemplo de código para integração\n  getIntegrationExamples(boardId?: string, formFields?: any[]): { [key: string]: string } {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return {};\n    }\n\n    // A URL agora inclui companyId e opcionalmente boardId no path\n    const apiUrl = this.getLeadIntakeUrl(company.id || '{COMPANY_ID}', boardId);\n    const token = company.apiConfig.token;\n    \n    // Gerar campos dinâmicos baseados no formulário configurado\n    const dynamicFields = this.generateDynamicFieldsExample(formFields);\n    const fieldsComment = formFields && formFields.length > 0 \n      ? '    // Campos configurados no formulário:\\n' + formFields\n          .filter(field => field.includeInApi !== false)\n          .map(f => `    // \"${f.name}\": \"${f.type}\"`)\n          .join(',\\n') + '\\n'\n      : '    // Configure campos personalizados no Visual Form Builder\\n';\n\n    const urlComment = boardId \n      ? `// URL inclui o ID do quadro: ${boardId}\\n` \n      : `// Substitua {BOARD_ID} pelo ID do quadro desejado na URL\\n`;\n\n    return {\n      curl: `${urlComment}${fieldsComment}curl -X POST \"${apiUrl}\" \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -H \"Authorization: Bearer ${token}\" \\\\\n  -H \"X-Company-Subdomain: ${company.subdomain}\" \\\\\n  -d '{\n    \"companyName\": \"Nome da Empresa Exemplo\",\n    \"cnpj\": \"00.000.000/0001-00\",\n    \"contactName\": \"Nome do Contato\",\n    \"contactEmail\": \"email@exemplo.com\",\n    \"contactPhone\": \"(11) 99999-9999\"${dynamicFields ? ',\\n' + dynamicFields : ''}\n  }'`,\n\n      javascript: `${urlComment}${fieldsComment}fetch('${apiUrl}', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ${token}',\n    'X-Company-Subdomain': '${company.subdomain}'\n  },\n  body: JSON.stringify({\n    companyName: 'Nome da Empresa Exemplo',\n    cnpj: '00.000.000/0001-00',\n    contactName: 'Nome do Contato',\n    contactEmail: 'email@exemplo.com',\n    contactPhone: '(11) 99999-9999'${dynamicFields ? ',\\n    ' + dynamicFields.replace(/    /g, '    ') : ''}\n  })\n})\n.then(response => response.json())\n.then(data => console.log(data));`,\n\n      php: `<?php\n${urlComment.replace(/\\/\\//g, '//')}// ${fieldsComment.replace(/\\/\\//g, '//')}\n$url = '${apiUrl}';\n$data = [\n    'companyName' => 'Nome da Empresa Exemplo',\n    'cnpj' => '00.000.000/0001-00',\n    'contactName' => 'Nome do Contato',\n    'contactEmail' => 'email@exemplo.com',\n    'contactPhone' => '(11) 99999-9999'${this.generateDynamicFieldsPhp(formFields)}\n];\n\n$options = [\n    'http' => [\n        'header' => [\n            'Content-type: application/json',\n            'Authorization: Bearer ${token}',\n            'X-Company-Subdomain: ${company.subdomain}'\n        ],\n        'method' => 'POST',\n        'content' => json_encode($data)\n    ]\n];\n\n$context = stream_context_create($options);\n$result = file_get_contents($url, false, $context);\necho $result;\n?>`,\n\n      python: `import requests\nimport json\n\n${urlComment.replace(/\\/\\//g, '#')}# ${fieldsComment.replace(/\\/\\//g, '#')}\nurl = '${apiUrl}'\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ${token}',\n    'X-Company-Subdomain': '${company.subdomain}'\n}\ndata = {\n    'companyName': 'Nome da Empresa Exemplo',\n    'cnpj': '00.000.000/0001-00',\n    'contactName': 'Nome do Contato',\n    'contactEmail': 'email@exemplo.com',\n    'contactPhone': '(11) 99999-9999'${this.generateDynamicFieldsPython(formFields)}\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())`\n    };\n  }\n\n  // Gerar campos dinâmicos para JSON\n  private generateDynamicFieldsExample(formFields?: any[]): string {\n    if (!formFields || formFields.length === 0) {\n      return '';\n    }\n\n    return formFields\n      .filter(field => field.includeInApi !== false)\n      .map(field => {\n        const fieldName = field.apiFieldName || field.name;\n        const exampleValue = this.getExampleValue(field.type);\n        return `    \"${fieldName}\": \"${exampleValue}\"`;\n      })\n      .join(',\\n');\n  }\n\n  // Gerar campos dinâmicos para PHP\n  private generateDynamicFieldsPhp(formFields?: any[]): string {\n    if (!formFields || formFields.length === 0) {\n      return '';\n    }\n\n    return ',\\n' + formFields\n      .filter(field => field.includeInApi !== false)\n      .map(field => {\n        const fieldName = field.apiFieldName || field.name;\n        const exampleValue = this.getExampleValue(field.type);\n        return `    '${fieldName}' => '${exampleValue}'`;\n      })\n      .join(',\\n');\n  }\n\n  // Gerar campos dinâmicos para Python\n  private generateDynamicFieldsPython(formFields?: any[]): string {\n    if (!formFields || formFields.length === 0) {\n      return '';\n    }\n\n    return ',\\n' + formFields\n      .filter(field => field.includeInApi !== false)\n      .map(field => {\n        const fieldName = field.apiFieldName || field.name;\n        const exampleValue = this.getExampleValue(field.type);\n        return `    '${fieldName}': '${exampleValue}'`;\n      })\n      .join(',\\n');\n  }\n\n  // Obter valor de exemplo baseado no tipo do campo\n  private getExampleValue(fieldType: string): string {\n    switch (fieldType) {\n      case 'email':\n        return 'exemplo@email.com';\n      case 'tel':\n        return '(11) 99999-9999';\n      case 'number':\n        return '123';\n      case 'cnpj':\n        return '00.000.000/0001-00';\n      case 'cpf':\n        return '000.000.000-00';\n      case 'date':\n        return '2024-01-01';\n      case 'time':\n        return '14:30';\n      case 'temperatura':\n        return 'Quente';\n      case 'textarea':\n        return 'Texto de exemplo';\n      case 'select':\n      case 'radio':\n        return 'Opção 1';\n      case 'checkbox':\n        return 'true';\n      default:\n        return 'Valor exemplo';\n    }\n  }\n\n  // Headers padrão para autenticação\n  private getApiHeaders(token: string): HttpHeaders {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n\n    if (company) {\n      headers = headers.set('X-Company-Subdomain', company.subdomain);\n    }\n\n    return headers;\n  }\n}"],
  "mappings": "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",
  "names": []
}
