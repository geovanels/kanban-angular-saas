{
  "version": 3,
  "sources": ["src/app/services/branding.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SubdomainService } from './subdomain.service';\nimport { CompanyService } from './company.service';\nimport { Company } from '../models/company.model';\n\nexport interface BrandingConfig {\n  logoUrl?: string;\n  faviconUrl?: string;\n  primaryColor?: string;\n  secondaryColor?: string;\n  accentColor?: string;\n  fontFamily?: string;\n  customCss?: string;\n}\n\nexport interface LogoUploadResponse {\n  success: boolean;\n  logoUrl?: string;\n  error?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrandingService {\n  private http = inject(HttpClient);\n  private subdomainService = inject(SubdomainService);\n  private companyService = inject(CompanyService);\n\n  // Observable para mudanças de branding\n  private brandingSubject = new BehaviorSubject<BrandingConfig>({});\n  public branding$ = this.brandingSubject.asObservable();\n\n  constructor() {\n    // Inicializar com branding da empresa atual\n    this.initializeBranding();\n    \n    // Aplicar branding após inicialização\n    setTimeout(() => {\n      this.applyStoredBranding();\n    }, 100);\n  }\n\n  // Inicializar branding da empresa\n  private initializeBranding() {\n    const company = this.subdomainService.getCurrentCompany();\n    if (company) {\n      this.updateBranding({\n        logoUrl: company.logoUrl,\n        primaryColor: company.brandingConfig?.primaryColor || company.primaryColor,\n        secondaryColor: company.brandingConfig?.secondaryColor || company.secondaryColor\n      });\n    }\n  }\n\n  // Aplicar branding armazenado\n  private applyStoredBranding() {\n    const company = this.subdomainService.getCurrentCompany();\n    if (company && company.brandingConfig) {\n      // Aplicar cores se existirem\n      if (company.brandingConfig.primaryColor) {\n        this.applyColors({\n          primaryColor: company.brandingConfig.primaryColor,\n          secondaryColor: company.brandingConfig.secondaryColor\n        });\n      }\n    }\n  }\n\n  // Upload de logo\n  uploadLogo(file: File): Observable<LogoUploadResponse> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n\n    // Validar arquivo\n    const validationError = this.validateImageFile(file);\n    if (validationError) {\n      return throwError(() => new Error(validationError));\n    }\n\n    const formData = new FormData();\n    formData.append('logo', file);\n    formData.append('companyId', company.id!);\n\n    const uploadUrl = `${this.subdomainService.getApiUrl()}/upload/logo`;\n\n    return this.http.post<LogoUploadResponse>(uploadUrl, formData).pipe(\n      map(response => {\n        if (response.success && response.logoUrl) {\n          // Atualizar empresa com nova URL do logo\n          this.updateCompanyLogo(response.logoUrl);\n        }\n        return response;\n      }),\n      catchError(error => {\n        console.error('Erro ao fazer upload do logo:', error);\n        return throwError(() => ({\n          success: false,\n          error: error.error?.message || 'Erro ao fazer upload do logo'\n        }));\n      })\n    );\n  }\n\n  // Upload de favicon\n  uploadFavicon(file: File): Observable<LogoUploadResponse> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return throwError(() => new Error('Empresa não encontrada'));\n    }\n\n    // Validar favicon (deve ser ICO ou PNG pequeno)\n    const validationError = this.validateFaviconFile(file);\n    if (validationError) {\n      return throwError(() => new Error(validationError));\n    }\n\n    const formData = new FormData();\n    formData.append('favicon', file);\n    formData.append('companyId', company.id!);\n\n    const uploadUrl = `${this.subdomainService.getApiUrl()}/upload/favicon`;\n\n    return this.http.post<LogoUploadResponse>(uploadUrl, formData).pipe(\n      map(response => {\n        if (response.success && response.logoUrl) {\n          // Aplicar favicon dinamicamente\n          this.applyFavicon(response.logoUrl);\n        }\n        return response;\n      }),\n      catchError(error => {\n        console.error('Erro ao fazer upload do favicon:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  // Atualizar cores da empresa\n  async updateColors(colors: { primaryColor?: string; secondaryColor?: string; accentColor?: string }): Promise<void> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      throw new Error('Empresa não encontrada');\n    }\n\n    try {\n      // Atualizar no banco de dados\n      await this.companyService.updateCompany(company.id!, colors);\n\n      // Atualizar localmente\n      Object.assign(company, colors);\n      this.subdomainService.setCurrentCompany(company);\n\n      // Aplicar cores na interface\n      this.applyColors(colors);\n\n      // Notificar observadores\n      this.updateBranding(colors);\n    } catch (error) {\n      console.error('Erro ao atualizar cores:', error);\n      throw error;\n    }\n  }\n\n  // Aplicar CSS customizado\n  applyCustomCss(css: string): void {\n    this.removeCustomCss();\n    \n    if (css.trim()) {\n      const style = document.createElement('style');\n      style.id = 'company-custom-css';\n      style.textContent = css;\n      document.head.appendChild(style);\n    }\n  }\n\n  // Remover CSS customizado\n  removeCustomCss(): void {\n    const existingStyle = document.getElementById('company-custom-css');\n    if (existingStyle) {\n      existingStyle.remove();\n    }\n  }\n\n  // Aplicar branding completo da empresa\n  applyCompanyBranding(company: Company): void {\n    console.log('🎨 Aplicando branding para empresa:', company.name);\n    console.log('🎨 Cores da empresa:', {\n      primaryColor: company.primaryColor,\n      secondaryColor: company.secondaryColor,\n      brandingConfig: company.brandingConfig\n    });\n\n    const primaryColor = company.brandingConfig?.primaryColor || company.primaryColor;\n    const secondaryColor = company.brandingConfig?.secondaryColor || company.secondaryColor;\n\n    const branding: BrandingConfig = {\n      logoUrl: company.logoUrl,\n      primaryColor: primaryColor,\n      secondaryColor: secondaryColor\n    };\n\n    this.updateBranding(branding);\n\n    // Aplicar cores\n    if (primaryColor || secondaryColor) {\n      console.log('🎨 Aplicando cores:', { primaryColor, secondaryColor });\n      this.applyColors({\n        primaryColor: primaryColor,\n        secondaryColor: secondaryColor\n      });\n    } else {\n      console.log('⚠️ Nenhuma cor encontrada para aplicar');\n    }\n\n    // Atualizar título da página\n    this.updatePageTitle(company.name);\n  }\n\n  // Gerar palette de cores baseada na cor primária\n  generateColorPalette(primaryColor: string): { [key: string]: string } {\n    // Converter hex para RGB\n    const hex = primaryColor.replace('#', '');\n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n\n    // Gerar variações\n    return {\n      primary: primaryColor,\n      primaryLight: this.lightenColor(primaryColor, 20),\n      primaryDark: this.darkenColor(primaryColor, 20),\n      secondary: this.adjustHue(primaryColor, 30),\n      accent: this.adjustHue(primaryColor, -30),\n      success: '#28a745',\n      warning: '#ffc107',\n      danger: '#dc3545',\n      info: '#17a2b8'\n    };\n  }\n\n  // Validar arquivo de imagem\n  private validateImageFile(file: File): string | null {\n    // Tamanho máximo: 5MB\n    const maxSize = 5 * 1024 * 1024;\n    if (file.size > maxSize) {\n      return 'Arquivo muito grande. Tamanho máximo: 5MB';\n    }\n\n    // Tipos aceitos\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/svg+xml'];\n    if (!allowedTypes.includes(file.type)) {\n      return 'Tipo de arquivo não suportado. Use JPEG, PNG ou SVG';\n    }\n\n    return null;\n  }\n\n  // Validar arquivo de favicon\n  private validateFaviconFile(file: File): string | null {\n    // Tamanho máximo: 1MB\n    const maxSize = 1 * 1024 * 1024;\n    if (file.size > maxSize) {\n      return 'Arquivo muito grande. Tamanho máximo: 1MB';\n    }\n\n    // Tipos aceitos para favicon\n    const allowedTypes = ['image/x-icon', 'image/vnd.microsoft.icon', 'image/png'];\n    if (!allowedTypes.includes(file.type)) {\n      return 'Tipo de arquivo não suportado. Use ICO ou PNG';\n    }\n\n    return null;\n  }\n\n  // Atualizar logo da empresa\n  private async updateCompanyLogo(logoUrl: string): Promise<void> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (company) {\n      company.logoUrl = logoUrl;\n      this.subdomainService.setCurrentCompany(company);\n      \n      // Salvar no banco de dados\n      await this.companyService.updateCompany(company.id!, { logoUrl });\n      \n      // Notificar observadores\n      this.updateBranding({ logoUrl });\n    }\n  }\n\n  // Aplicar cores na interface\n  private applyColors(colors: { primaryColor?: string; secondaryColor?: string; accentColor?: string }): void {\n    const root = document.documentElement;\n\n    if (colors.primaryColor) {\n      const palette = this.generateColorPalette(colors.primaryColor);\n      \n      // Aplicar variáveis CSS\n      Object.entries(palette).forEach(([key, value]) => {\n        root.style.setProperty(`--color-${key}`, value);\n      });\n\n      // Bootstrap override\n      root.style.setProperty('--bs-primary', colors.primaryColor);\n      \n      // Tailwind overrides\n      root.style.setProperty('--primary-color', colors.primaryColor);\n    }\n\n    if (colors.secondaryColor) {\n      root.style.setProperty('--color-secondary', colors.secondaryColor);\n      root.style.setProperty('--bs-secondary', colors.secondaryColor);\n      root.style.setProperty('--secondary-color', colors.secondaryColor);\n    }\n\n    if (colors.accentColor) {\n      root.style.setProperty('--color-accent', colors.accentColor);\n    }\n\n    // Apply dynamic styles for all button variations\n    this.applyDynamicStyles(colors);\n  }\n\n  // Apply dynamic styles that override hardcoded colors\n  private applyDynamicStyles(colors: { primaryColor?: string; secondaryColor?: string; accentColor?: string }): void {\n    console.log('🎨 Aplicando estilos dinâmicos:', colors);\n    \n    if (!colors.primaryColor) {\n      console.log('⚠️ Nenhuma cor primária fornecida');\n      return;\n    }\n\n    // Remove existing dynamic styles\n    const existingStyle = document.getElementById('dynamic-branding-styles');\n    if (existingStyle) {\n      existingStyle.remove();\n      console.log('🗑️ Removeu estilos dinâmicos anteriores');\n    }\n\n    // Create new dynamic styles\n    const style = document.createElement('style');\n    style.id = 'dynamic-branding-styles';\n    style.textContent = `\n      /* Primary buttons - Override all blue/green variations with very specific selectors */\n      .bg-blue-500, .bg-green-500,\n      button.bg-blue-500, button.bg-green-500,\n      .bg-blue-500.hover\\\\:bg-blue-600, .bg-green-500.hover\\\\:bg-green-600,\n      [class*=\"bg-blue-500\"], [class*=\"bg-green-500\"],\n      button[class*=\"bg-blue-500\"], button[class*=\"bg-green-500\"],\n      .text-white.px-4.py-2.rounded-lg,\n      .text-white.px-6.py-2.rounded-lg,\n      .text-white.px-4.py-2.rounded-md {\n        background-color: ${colors.primaryColor} !important;\n      }\n      \n      .hover\\\\:bg-blue-600:hover, .hover\\\\:bg-green-600:hover,\n      button.bg-blue-500:hover, button.bg-green-500:hover,\n      button.hover\\\\:bg-blue-600:hover, button.hover\\\\:bg-green-600:hover,\n      [class*=\"hover:bg-blue-600\"]:hover, [class*=\"hover:bg-green-600\"]:hover,\n      button[class*=\"bg-blue-500\"]:hover, button[class*=\"bg-green-500\"]:hover,\n      .text-white.px-4.py-2.rounded-lg:hover,\n      .text-white.px-6.py-2.rounded-lg:hover,\n      .text-white.px-4.py-2.rounded-md:hover {\n        background-color: ${this.darkenColor(colors.primaryColor, 10)} !important;\n      }\n      \n      /* Very specific selectors for common button patterns */\n      .px-4.py-2.bg-blue-500,\n      .px-6.py-2.bg-blue-500,\n      .px-6.py-3.bg-blue-500,\n      .px-4.py-2.bg-green-500,\n      button.px-4.py-2.bg-blue-500,\n      button.px-6.py-2.bg-blue-500,\n      button.px-6.py-3.bg-blue-500 {\n        background-color: ${colors.primaryColor} !important;\n      }\n      \n      .px-4.py-2.bg-blue-500:hover,\n      .px-6.py-2.bg-blue-500:hover,\n      .px-6.py-3.bg-blue-500:hover,\n      button.px-4.py-2.bg-blue-500:hover,\n      button.px-6.py-2.bg-blue-500:hover,\n      button.px-6.py-3.bg-blue-500:hover {\n        background-color: ${this.darkenColor(colors.primaryColor, 10)} !important;\n      }\n      \n      /* All buttons with white text and blue/green backgrounds */\n      button[style*=\"background-color\"],\n      .bg-blue-500,\n      .bg-green-500 {\n        background-color: ${colors.primaryColor} !important;\n      }\n      \n      /* Focus states */\n      .focus\\\\:ring-blue-500:focus {\n        --tw-ring-color: ${colors.primaryColor}66 !important;\n      }\n      \n      .focus\\\\:border-blue-500:focus {\n        border-color: ${colors.primaryColor} !important;\n      }\n      \n      /* Text colors */\n      .text-blue-500 {\n        color: ${colors.primaryColor} !important;\n      }\n      \n      .hover\\\\:text-blue-600:hover, .hover\\\\:text-blue-800:hover {\n        color: ${this.darkenColor(colors.primaryColor, 15)} !important;\n      }\n      \n      .text-blue-600 {\n        color: ${this.darkenColor(colors.primaryColor, 5)} !important;\n      }\n      \n      .text-blue-800 {\n        color: ${this.darkenColor(colors.primaryColor, 20)} !important;\n      }\n      \n      /* Borders */\n      .border-blue-500 {\n        border-color: ${colors.primaryColor} !important;\n      }\n      \n      .border-blue-200 {\n        border-color: ${colors.primaryColor}33 !important;\n      }\n      \n      /* Backgrounds with opacity */\n      .bg-blue-100 {\n        background-color: ${colors.primaryColor}1A !important;\n      }\n      \n      .bg-blue-50 {\n        background-color: ${colors.primaryColor}0D !important;\n      }\n      \n      /* Toggle switches */\n      .peer-checked\\\\:bg-blue-600 {\n        background-color: ${colors.primaryColor} !important;\n      }\n      \n      /* Company header logo background */\n      .config-header-logo-bg, .h-8.w-8.bg-blue-500,\n      .h-10.w-10.bg-blue-500 {\n        background-color: ${colors.primaryColor} !important;\n      }\n      \n      /* User avatar backgrounds */\n      .h-10.w-10.rounded-full.bg-blue-500 {\n        background-color: ${colors.primaryColor} !important;\n      }\n      \n      /* Specific button classes */\n      .btn-primary {\n        background-color: ${colors.primaryColor} !important;\n        border-color: ${colors.primaryColor} !important;\n      }\n      \n      .btn-primary:hover {\n        background-color: ${this.darkenColor(colors.primaryColor, 10)} !important;\n        border-color: ${this.darkenColor(colors.primaryColor, 10)} !important;\n      }\n      \n      /* Canvas style override - for buttons with inline styles */\n      button[style*=\"background-color: rgb(59, 130, 246)\"],\n      button[style*=\"background-color: rgb(34, 197, 94)\"],\n      [style*=\"background-color: #3B82F6\"],\n      [style*=\"background-color: #22C55E\"] {\n        background-color: ${colors.primaryColor} !important;\n      }\n    `;\n\n    if (colors.secondaryColor) {\n      style.textContent += `\n        /* Secondary color applications */\n        .text-gray-500 {\n          color: ${colors.secondaryColor} !important;\n        }\n        \n        .bg-gray-500 {\n          background-color: ${colors.secondaryColor} !important;\n        }\n        \n        .hover\\\\:bg-gray-600:hover {\n          background-color: ${this.darkenColor(colors.secondaryColor, 10)} !important;\n        }\n        \n        .text-gray-600 {\n          color: ${this.darkenColor(colors.secondaryColor, 5)} !important;\n        }\n        \n        .text-gray-700 {\n          color: ${this.darkenColor(colors.secondaryColor, 10)} !important;\n        }\n      `;\n    }\n    \n    document.head.appendChild(style);\n    console.log('✅ Estilos dinâmicos aplicados com sucesso!');\n    console.log('🎨 Cor primária aplicada:', colors.primaryColor);\n  }\n\n  // Aplicar favicon\n  private applyFavicon(faviconUrl: string): void {\n    // Remover favicon existente\n    const existingFavicon = document.querySelector('link[rel*=\"icon\"]');\n    if (existingFavicon) {\n      existingFavicon.remove();\n    }\n\n    // Adicionar novo favicon\n    const favicon = document.createElement('link');\n    favicon.rel = 'icon';\n    favicon.href = faviconUrl;\n    document.head.appendChild(favicon);\n  }\n\n  // Atualizar título da página\n  private updatePageTitle(companyName: string): void {\n    document.title = `${companyName} - Sistema Kanban`;\n  }\n\n  // Notificar observadores sobre mudanças de branding\n  private updateBranding(branding: Partial<BrandingConfig>): void {\n    const currentBranding = this.brandingSubject.value;\n    const newBranding = { ...currentBranding, ...branding };\n    this.brandingSubject.next(newBranding);\n  }\n\n  // Utilitários de cores\n  private lightenColor(color: string, percent: number): string {\n    const num = parseInt(color.replace('#', ''), 16);\n    const amt = Math.round(2.55 * percent);\n    const R = (num >> 16) + amt;\n    const G = (num >> 8 & 0x00FF) + amt;\n    const B = (num & 0x0000FF) + amt;\n    return '#' + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +\n      (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +\n      (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);\n  }\n\n  private darkenColor(color: string, percent: number): string {\n    const num = parseInt(color.replace('#', ''), 16);\n    const amt = Math.round(2.55 * percent);\n    const R = (num >> 16) - amt;\n    const G = (num >> 8 & 0x00FF) - amt;\n    const B = (num & 0x0000FF) - amt;\n    return '#' + (0x1000000 + (R > 255 ? 255 : R < 0 ? 0 : R) * 0x10000 +\n      (G > 255 ? 255 : G < 0 ? 0 : G) * 0x100 +\n      (B > 255 ? 255 : B < 0 ? 0 : B)).toString(16).slice(1);\n  }\n\n  private adjustHue(color: string, degrees: number): string {\n    // Implementação simplificada de ajuste de matiz\n    return color; // Por simplicidade, retornando a mesma cor\n  }\n\n  // Obter branding atual\n  getCurrentBranding(): BrandingConfig {\n    return this.brandingSubject.value;\n  }\n\n  // Reset para branding padrão\n  resetToDefault(): void {\n    this.removeCustomCss();\n    \n    const root = document.documentElement;\n    \n    // Remover variáveis CSS customizadas\n    root.style.removeProperty('--color-primary');\n    root.style.removeProperty('--color-secondary');\n    root.style.removeProperty('--bs-primary');\n    root.style.removeProperty('--bs-secondary');\n    \n    this.updateBranding({\n      logoUrl: undefined,\n      primaryColor: undefined,\n      secondaryColor: undefined,\n      customCss: undefined\n    });\n  }\n}"],
  "mappings": "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",
  "names": []
}
