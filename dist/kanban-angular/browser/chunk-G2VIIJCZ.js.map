{
  "version": 3,
  "sources": ["src/app/components/login/login.component.ts", "src/app/components/login/login.component.html"],
  "sourcesContent": ["import { Component, inject, signal, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { CompanyService } from '../../services/company.service';\nimport { SubdomainService } from '../../services/subdomain.service';\nimport { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\nexport interface CompanyRegistration {\n  ownerName: string;\n  ownerEmail: string;\n  ownerPhone: string;\n  companyName: string;\n  subdomain: string;\n}\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  private authService = inject(AuthService);\n  private companyService = inject(CompanyService);\n  private subdomainService = inject(SubdomainService);\n  private router = inject(Router);\n  private fb = inject(FormBuilder);\n\n  // Forms\n  loginForm!: FormGroup;\n  registerForm!: FormGroup;\n  \n  // UI State\n  currentView = signal<'login' | 'register' | 'company-setup'>('login');\n  isLoading = signal(false);\n  errorMessage = signal('');\n  successMessage = signal('');\n  \n  // Registration state\n  userCreated = signal(false);\n  currentUser = signal<any>(null);\n  \n  // Alias validation\n  isCheckingAlias = signal(false);\n  aliasAvailable = signal<boolean | null>(null);\n  aliasError = signal('');\n\n  ngOnInit() {\n    this.initializeForms();\n    this.setupAliasValidation();\n  }\n\n  private initializeForms() {\n    // Login Form\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n\n    // Register Form\n    this.registerForm = this.fb.group({\n      ownerName: ['', [Validators.required, Validators.minLength(2)]],\n      ownerEmail: ['', [Validators.required, Validators.email]],\n      ownerPhone: ['', [Validators.required, this.phoneValidator]],\n      companyName: ['', [Validators.required, Validators.minLength(2)]],\n      subdomain: ['', [Validators.required, Validators.minLength(3), this.aliasValidator.bind(this)]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n      agreeTerms: [false, Validators.requiredTrue]\n    }, { validators: this.passwordMatchValidator });\n  }\n\n  private setupAliasValidation() {\n    // Validação em tempo real do alias/subdomínio\n    this.registerForm.get('subdomain')?.valueChanges.pipe(\n      debounceTime(500),\n      distinctUntilChanged(),\n      switchMap(alias => {\n        if (!alias || alias.length < 3) {\n          this.aliasAvailable.set(null);\n          this.aliasError.set('');\n          return of(null);\n        }\n        \n        // Validar formato do alias\n        const aliasRegex = /^[a-z0-9][a-z0-9-]*[a-z0-9]$/;\n        if (!aliasRegex.test(alias)) {\n          this.aliasAvailable.set(false);\n          this.aliasError.set('Use apenas letras minúsculas, números e hífens. Não pode começar ou terminar com hífen.');\n          return of(false);\n        }\n\n        // Verificar palavras reservadas\n        const reserved = ['www', 'api', 'admin', 'app', 'apps', 'mail', 'ftp', 'blog', 'shop', 'store', 'support', 'help'];\n        if (reserved.includes(alias)) {\n          this.aliasAvailable.set(false);\n          this.aliasError.set('Este alias é reservado. Escolha outro.');\n          return of(false);\n        }\n\n        this.isCheckingAlias.set(true);\n        this.aliasError.set('');\n        \n        return this.companyService.isSubdomainAvailable(alias);\n      })\n    ).subscribe({\n      next: (available) => {\n        this.isCheckingAlias.set(false);\n        if (available !== null) {\n          this.aliasAvailable.set(available);\n          if (!available) {\n            this.aliasError.set('Este alias já está em uso. Escolha outro.');\n          } else {\n            this.aliasError.set('');\n          }\n        }\n      },\n      error: () => {\n        this.isCheckingAlias.set(false);\n        this.aliasError.set('Erro ao verificar disponibilidade.');\n      }\n    });\n  }\n\n  async signInWithEmail() {\n    if (this.loginForm.invalid) {\n      this.markFormGroupTouched(this.loginForm);\n      return;\n    }\n\n    this.isLoading.set(true);\n    this.clearMessages();\n\n    const { email, password } = this.loginForm.value;\n    const result = await this.authService.signInWithEmail(email, password);\n    \n    if (result.success) {\n      await this.handleSuccessfulLogin();\n    } else {\n      this.errorMessage.set(this.getErrorMessage(result.error));\n    }\n    \n    this.isLoading.set(false);\n  }\n\n  async signInWithGoogle() {\n    this.isLoading.set(true);\n    this.clearMessages();\n\n    try {\n      const result = await this.authService.signInWithGoogle();\n      await this.handleSuccessfulLogin();\n    } catch (error) {\n      this.errorMessage.set(this.getErrorMessage(error as any));\n    }\n    \n    this.isLoading.set(false);\n  }\n\n  async registerUser() {\n    if (this.registerForm.invalid) {\n      this.markFormGroupTouched(this.registerForm);\n      return;\n    }\n\n    if (this.aliasAvailable() !== true) {\n      this.errorMessage.set('Aguarde a verificação do alias ou escolha outro.');\n      return;\n    }\n\n    this.isLoading.set(true);\n    this.clearMessages();\n\n    try {\n      const formData = this.registerForm.value;\n      \n      // 1. Criar usuário no Firebase Auth\n      const authResult = await this.authService.createUserWithEmail(formData.ownerEmail, formData.password);\n      \n      if (!authResult.success) {\n        throw new Error(authResult.error || 'Erro ao criar usuário');\n      }\n\n      // 2. Atualizar perfil do usuário\n      await this.authService.updateUserProfile({\n        displayName: formData.ownerName,\n        phoneNumber: formData.ownerPhone\n      });\n\n      // 3. Criar empresa\n      const companyData = {\n        subdomain: formData.subdomain,\n        name: formData.companyName,\n        contactEmail: formData.ownerEmail,\n        ownerId: authResult.user?.uid || '',\n        ownerEmail: formData.ownerEmail,\n        plan: 'free' as const,\n        smtpConfig: {\n          host: 'smtp.gmail.com',\n          port: 587,\n          secure: false,\n          user: '',\n          password: '',\n          fromName: formData.companyName,\n          fromEmail: formData.ownerEmail\n        },\n        apiConfig: {\n          enabled: true,\n          token: this.generateApiToken(),\n          endpoint: `https://${formData.subdomain}.taskboard.com.br/api/v1/lead-intake`,\n          webhookUrl: ''\n        },\n        features: {\n          maxBoards: 1,\n          maxUsers: 2,\n          maxLeadsPerMonth: 100,\n          maxEmailsPerMonth: 50,\n          customBranding: false,\n          apiAccess: false,\n          webhooks: false,\n          advancedReports: false,\n          whiteLabel: false\n        },\n        status: 'active' as const\n      };\n\n      const companyId = await this.companyService.createCompany(companyData);\n      \n      // 4. Definir contexto da empresa\n      const newCompany = await this.companyService.getCompany(companyId);\n      if (newCompany) {\n        this.subdomainService.setCurrentCompany(newCompany);\n      }\n\n      // 5. Criar board padrão\n      await this.createDefaultBoard(authResult.user?.uid || '', companyId);\n\n      this.successMessage.set(`Empresa criada com sucesso! Seu subdomínio: ${formData.subdomain}.taskboard.com.br`);\n      \n      // Redirecionar após 2 segundos\n      setTimeout(() => {\n        // Se estamos em desenvolvimento, redirecionar com parâmetro\n        if (this.subdomainService.isDevelopment()) {\n          window.location.href = `http://localhost:${window.location.port}?subdomain=${formData.subdomain}`;\n        } else {\n          window.location.href = `https://${formData.subdomain}.taskboard.com.br`;\n        }\n      }, 2000);\n\n    } catch (error: any) {\n      const errorMessage = error?.code \n        ? this.getFirebaseErrorMessage(error.code)\n        : error?.message || 'Erro ao criar empresa. Tente novamente.';\n      this.errorMessage.set(errorMessage);\n    } finally {\n      this.isLoading.set(false);\n    }\n  }\n\n  private async createDefaultBoard(userId: string, companyId: string) {\n    try {\n      // Criar board padrão usando o FirestoreService\n      // Como o contexto da empresa já foi definido, o FirestoreService usará automaticamente\n      const { FirestoreService } = await import('../../services/firestore.service');\n      const firestoreService = new FirestoreService();\n      \n      const defaultBoard = {\n        name: 'Quadro Principal',\n        description: 'Seu primeiro quadro Kanban',\n        companyId: companyId,\n        createdAt: null // Será preenchido pelo serverTimestamp\n      };\n      \n      await firestoreService.createBoard(userId, defaultBoard);\n    } catch (error) {\n      // Handle error silently\n    }\n  }\n\n  private async handleSuccessfulLogin() {\n    try {\n      const currentUser = this.authService.getCurrentUser();\n      \n      if (!currentUser?.email) {\n        this.errorMessage.set('Erro ao obter dados do usuário');\n        return;\n      }\n\n      // Buscar empresa do usuário logado\n      try {\n        const userCompany = await this.companyService.getCompanyByUserEmail(currentUser.email);\n        \n        if (userCompany) {\n          // Definir contexto da empresa\n          this.subdomainService.setCurrentCompany(userCompany);\n          \n          // Em desenvolvimento, apenas navegar localmente\n          if (this.subdomainService.isDevelopment()) {\n            // Definir subdomínio no localStorage\n            localStorage.setItem('dev-subdomain', userCompany.subdomain);\n            this.router.navigate(['/dashboard']);\n          } else {\n            // Em produção, redirecionar para o subdomínio correto da empresa\n            const companyUrl = this.subdomainService.getCompanyUrl(userCompany.subdomain);\n            window.location.href = companyUrl + '/dashboard';\n          }\n        } else {\n          // Usuário não tem empresa\n          this.errorMessage.set('Usuário não pertence a nenhuma empresa. Entre em contato com o suporte.');\n        }\n      } catch (searchError) {\n        // Em caso de erro de busca, redirecionar para dashboard mesmo assim\n        this.router.navigate(['/dashboard']);\n      }\n      \n    } catch (error) {\n      this.errorMessage.set('Erro ao processar login. Tente novamente.');\n    }\n  }\n\n  generateSuggestions() {\n    const companyName = this.registerForm.get('companyName')?.value;\n    if (!companyName) return;\n\n    const suggestions = this.generateAliasSuggestions(companyName);\n    const firstAvailable = suggestions[0];\n    \n    if (firstAvailable) {\n      this.registerForm.patchValue({ subdomain: firstAvailable });\n    }\n  }\n\n  private generateAliasSuggestions(companyName: string): string[] {\n    const base = companyName\n      .toLowerCase()\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '') // Remove acentos\n      .replace(/[^a-z0-9\\s]/g, '') // Remove caracteres especiais\n      .replace(/\\s+/g, '-') // Substitui espaços por hífens\n      .replace(/-+/g, '-') // Remove hífens duplos\n      .replace(/^-|-$/g, ''); // Remove hífens no início e fim\n\n    return [\n      base,\n      `${base}-digital`,\n      `${base}-corp`,\n      `${base}-br`,\n      `${base}${Math.floor(Math.random() * 100)}`,\n      `${base}-${new Date().getFullYear()}`\n    ].filter(alias => alias.length >= 3 && alias.length <= 30);\n  }\n\n  switchView(view: 'login' | 'register') {\n    this.currentView.set(view);\n    this.clearMessages();\n    this.resetForms();\n  }\n\n  private resetForms() {\n    this.loginForm.reset();\n    this.registerForm.reset();\n    this.aliasAvailable.set(null);\n    this.aliasError.set('');\n  }\n\n  private clearMessages() {\n    this.errorMessage.set('');\n    this.successMessage.set('');\n  }\n\n  private markFormGroupTouched(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      control?.markAsTouched({ onlySelf: true });\n    });\n  }\n\n  // Firebase Error Handler\n  private getFirebaseErrorMessage(errorCode: string): string {\n    const errorMessages: { [key: string]: string } = {\n      'auth/email-already-in-use': 'Este email já está sendo utilizado. Tente fazer login ou use outro email.',\n      'auth/weak-password': 'A senha deve ter pelo menos 6 caracteres.',\n      'auth/invalid-email': 'Por favor, insira um email válido.',\n      'auth/user-not-found': 'Usuário não encontrado. Verifique o email ou crie uma conta.',\n      'auth/wrong-password': 'Senha incorreta. Tente novamente.',\n      'auth/user-disabled': 'Esta conta foi desabilitada. Entre em contato com o suporte.',\n      'auth/too-many-requests': 'Muitas tentativas de login. Aguarde alguns minutos e tente novamente.',\n      'auth/network-request-failed': 'Erro de conexão. Verifique sua internet e tente novamente.',\n      'auth/invalid-credential': 'Email ou senha incorretos.',\n      'auth/account-exists-with-different-credential': 'Já existe uma conta com este email usando um método diferente.',\n      'auth/popup-closed-by-user': 'Login cancelado pelo usuário.',\n      'auth/popup-blocked': 'Pop-up bloqueado pelo navegador. Habilite pop-ups e tente novamente.',\n      'auth/credential-already-in-use': 'Esta credencial já está sendo usada por outra conta.',\n      'auth/requires-recent-login': 'Esta operação requer login recente. Faça login novamente.',\n      'auth/quota-exceeded': 'Cota excedida. Tente novamente mais tarde.',\n      'auth/internal-error': 'Erro interno do servidor. Tente novamente.',\n      'auth/operation-not-allowed': 'Operação não permitida. Entre em contato com o suporte.'\n    };\n\n    return errorMessages[errorCode] || 'Ocorreu um erro inesperado. Tente novamente.';\n  }\n\n  // Validators\n  private phoneValidator(control: AbstractControl) {\n    if (!control.value) return null;\n    const phoneRegex = /^\\(?\\d{2}\\)?[\\s-]?\\d{4,5}[\\s-]?\\d{4}$/;\n    return phoneRegex.test(control.value) ? null : { invalidPhone: true };\n  }\n\n  private urlValidator(control: AbstractControl) {\n    if (!control.value) return null;\n    const urlRegex = /^https?:\\/\\/.+\\..+/;\n    return urlRegex.test(control.value) ? null : { invalidUrl: true };\n  }\n\n  private aliasValidator(control: AbstractControl) {\n    if (!control.value) return null;\n    const aliasRegex = /^[a-z0-9][a-z0-9-]*[a-z0-9]$/;\n    if (control.value.length < 3) return { minLength: true };\n    if (control.value.length > 30) return { maxLength: true };\n    return aliasRegex.test(control.value) ? null : { invalidAlias: true };\n  }\n\n  private passwordMatchValidator(group: AbstractControl) {\n    const password = group.get('password')?.value;\n    const confirmPassword = group.get('confirmPassword')?.value;\n    return password === confirmPassword ? null : { passwordMismatch: true };\n  }\n\n  // Getters para template\n  get loginFormValid() { return this.loginForm.valid; }\n  get registerFormValid() { return this.registerForm.valid && this.aliasAvailable() === true; }\n  get subdomainControl() { return this.registerForm.get('subdomain'); }\n  \n  getFieldError(formName: 'login' | 'register', fieldName: string): string {\n    const form = formName === 'login' ? this.loginForm : this.registerForm;\n    const control = form.get(fieldName);\n    \n    if (!control?.errors || !control.touched) return '';\n    \n    const errors = control.errors;\n    \n    if (errors['required']) return 'Este campo é obrigatório';\n    if (errors['email']) return 'E-mail inválido';\n    if (errors['minlength']) return `Mínimo de ${errors['minlength'].requiredLength} caracteres`;\n    if (errors['invalidPhone']) return 'Telefone inválido. Use formato: (11) 99999-9999';\n    if (errors['invalidUrl']) return 'URL inválida. Use formato: https://exemplo.com';\n    if (errors['invalidAlias']) return 'Use apenas letras minúsculas, números e hífens';\n    if (errors['passwordMismatch']) return 'Senhas não coincidem';\n    \n    return 'Campo inválido';\n  }\n\n  getAliasPreview(): string {\n    const alias = this.registerForm.get('subdomain')?.value;\n    return alias ? `${alias}.taskboard.com.br` : 'seudominio.taskboard.com.br';\n  }\n\n  private generateApiToken(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*';\n    let result = '';\n    for (let i = 0; i < 32; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  private getErrorMessage(error: any): string {\n    // Se for um objeto error com código Firebase, usar o método específico\n    if (error?.code) {\n      return this.getFirebaseErrorMessage(error.code);\n    }\n    \n    // Se for uma string, tratar como antes\n    if (typeof error === 'string') {\n      if (error.includes('user-not-found')) {\n        return 'Usuário não encontrado. Verifique o email ou crie uma conta.';\n      }\n      if (error.includes('wrong-password')) {\n        return 'Senha incorreta. Tente novamente.';\n      }\n      if (error.includes('invalid-email')) {\n        return 'Por favor, insira um email válido.';\n      }\n      if (error.includes('email-already-in-use')) {\n        return 'Este email já está sendo utilizado. Tente fazer login ou use outro email.';\n      }\n      if (error.includes('weak-password')) {\n        return 'A senha deve ter pelo menos 6 caracteres.';\n      }\n      if (error.includes('too-many-requests')) {\n        return 'Muitas tentativas de login. Aguarde alguns minutos e tente novamente.';\n      }\n    }\n    \n    return error?.message || 'Ocorreu um erro inesperado. Tente novamente.';\n  }\n}", "<div class=\"auth-container\">\n  <div class=\"auth-card\">\n    <!-- Header -->\n    <div class=\"auth-header\">\n      <div class=\"logo-container\">\n        <i class=\"fas fa-tasks logo-icon\"></i>\n      </div>\n      <h1 class=\"auth-title\">TaskBoard</h1>\n      <p class=\"auth-subtitle\">Sistema Kanban Multi-Empresas</p>\n    </div>\n\n    <!-- Tab Navigation -->\n    <div class=\"auth-tabs\">\n      <button \n        class=\"auth-tab\"\n        [class.active]=\"currentView() === 'login'\"\n        (click)=\"switchView('login')\">\n        <i class=\"fas fa-sign-in-alt\"></i>\n        Entrar\n      </button>\n      <button \n        class=\"auth-tab\"\n        [class.active]=\"currentView() === 'register'\"\n        (click)=\"switchView('register')\">\n        <i class=\"fas fa-building\"></i>\n        Criar Empresa\n      </button>\n    </div>\n\n    <!-- Messages -->\n    <div class=\"alert alert-success\" *ngIf=\"successMessage()\">\n      <i class=\"fas fa-check-circle\"></i>\n      {{ successMessage() }}\n    </div>\n    \n    <div class=\"alert alert-danger\" *ngIf=\"errorMessage()\">\n      <i class=\"fas fa-exclamation-circle\"></i>\n      {{ errorMessage() }}\n    </div>\n\n    <!-- Login Form -->\n    <div class=\"auth-content\" *ngIf=\"currentView() === 'login'\">\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"signInWithEmail()\" class=\"auth-form\">\n        <div class=\"form-group\">\n          <label for=\"email\" class=\"form-label\">\n            <i class=\"fas fa-envelope\"></i>\n            Email\n          </label>\n          <input \n            type=\"email\" \n            id=\"email\"\n            class=\"form-control\"\n            formControlName=\"email\"\n            placeholder=\"seu@email.com\"\n            [class.is-invalid]=\"loginForm.get('email')?.touched && loginForm.get('email')?.invalid\">\n          <div class=\"invalid-feedback\" *ngIf=\"loginForm.get('email')?.touched && loginForm.get('email')?.invalid\">\n            {{ getFieldError('login', 'email') }}\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"password\" class=\"form-label\">\n            <i class=\"fas fa-lock\"></i>\n            Senha\n          </label>\n          <input \n            type=\"password\" \n            id=\"password\"\n            class=\"form-control\"\n            formControlName=\"password\"\n            placeholder=\"Sua senha\"\n            [class.is-invalid]=\"loginForm.get('password')?.touched && loginForm.get('password')?.invalid\">\n          <div class=\"invalid-feedback\" *ngIf=\"loginForm.get('password')?.touched && loginForm.get('password')?.invalid\">\n            {{ getFieldError('login', 'password') }}\n          </div>\n        </div>\n\n        <button \n          type=\"submit\" \n          class=\"btn btn-primary btn-block\"\n          [disabled]=\"isLoading() || !loginFormValid\">\n          <i class=\"fas fa-spinner fa-spin\" *ngIf=\"isLoading()\"></i>\n          <i class=\"fas fa-sign-in-alt\" *ngIf=\"!isLoading()\"></i>\n          {{ isLoading() ? 'Entrando...' : 'Entrar' }}\n        </button>\n      </form>\n\n      <div class=\"auth-divider\">\n        <span>ou</span>\n      </div>\n\n      <button \n        class=\"btn btn-google btn-block\"\n        (click)=\"signInWithGoogle()\"\n        [disabled]=\"isLoading()\">\n        <svg class=\"google-icon\" viewBox=\"0 0 24 24\">\n          <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n          <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n          <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n          <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n        </svg>\n        Entrar com Google\n      </button>\n    </div>\n\n    <!-- Register Form -->\n    <div class=\"auth-content\" *ngIf=\"currentView() === 'register'\">\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"registerUser()\" class=\"auth-form\">\n        <!-- Informações do Responsável -->\n        <div class=\"form-section\">\n          <h4 class=\"section-title\">\n            <i class=\"fas fa-user\"></i>\n            Informações do Responsável\n          </h4>\n          \n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">Nome Completo *</label>\n                <input \n                  type=\"text\" \n                  class=\"form-control\"\n                  formControlName=\"ownerName\"\n                  placeholder=\"João Silva\"\n                  [class.is-invalid]=\"registerForm.get('ownerName')?.touched && registerForm.get('ownerName')?.invalid\">\n                <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('ownerName')?.touched && registerForm.get('ownerName')?.invalid\">\n                  {{ getFieldError('register', 'ownerName') }}\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">Telefone *</label>\n                <input \n                  type=\"tel\" \n                  class=\"form-control\"\n                  formControlName=\"ownerPhone\"\n                  placeholder=\"(11) 99999-9999\"\n                  [class.is-invalid]=\"registerForm.get('ownerPhone')?.touched && registerForm.get('ownerPhone')?.invalid\">\n                <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('ownerPhone')?.touched && registerForm.get('ownerPhone')?.invalid\">\n                  {{ getFieldError('register', 'ownerPhone') }}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"form-label\">Email *</label>\n            <input \n              type=\"email\" \n              class=\"form-control\"\n              formControlName=\"ownerEmail\"\n              placeholder=\"joao@empresa.com\"\n              [class.is-invalid]=\"registerForm.get('ownerEmail')?.touched && registerForm.get('ownerEmail')?.invalid\">\n            <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('ownerEmail')?.touched && registerForm.get('ownerEmail')?.invalid\">\n              {{ getFieldError('register', 'ownerEmail') }}\n            </div>\n          </div>\n        </div>\n\n        <!-- Informações da Empresa -->\n        <div class=\"form-section\">\n          <h4 class=\"section-title\">\n            <i class=\"fas fa-building\"></i>\n            Informações da Empresa\n          </h4>\n          \n          <div class=\"form-group\">\n            <label class=\"form-label\">Nome da Empresa *</label>\n            <input \n              type=\"text\" \n              class=\"form-control\"\n              formControlName=\"companyName\"\n              placeholder=\"Minha Empresa Ltda\"\n              [class.is-invalid]=\"registerForm.get('companyName')?.touched && registerForm.get('companyName')?.invalid\">\n            <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('companyName')?.touched && registerForm.get('companyName')?.invalid\">\n              {{ getFieldError('register', 'companyName') }}\n            </div>\n          </div>\n\n        </div>\n\n        <!-- Configuração do Subdomínio -->\n        <div class=\"form-section\">\n          <h4 class=\"section-title\">\n            <i class=\"fas fa-link\"></i>\n            Configuração do Subdomínio\n          </h4>\n          \n          <div class=\"form-group\">\n            <label class=\"form-label\">Alias/Subdomínio *</label>\n            <div class=\"input-group\">\n              <input \n                type=\"text\" \n                class=\"form-control\"\n                formControlName=\"subdomain\"\n                placeholder=\"minhaempresa\"\n                [class.is-invalid]=\"(subdomainControl?.touched && subdomainControl?.invalid) || aliasError()\"\n                [class.is-valid]=\"aliasAvailable() === true\">\n              <div class=\"input-group-text\">.taskboard.com.br</div>\n            </div>\n            \n            <!-- Status da verificação -->\n            <div class=\"mt-2\">\n              <div class=\"text-info\" *ngIf=\"isCheckingAlias()\">\n                <i class=\"fas fa-spinner fa-spin\"></i>\n                Verificando disponibilidade...\n              </div>\n              <div class=\"text-success\" *ngIf=\"aliasAvailable() === true\">\n                <i class=\"fas fa-check-circle\"></i>\n                Alias disponível!\n              </div>\n              <div class=\"text-danger\" *ngIf=\"aliasError()\">\n                <i class=\"fas fa-times-circle\"></i>\n                {{ aliasError() }}\n              </div>\n            </div>\n\n            <!-- Preview do domínio -->\n            <div class=\"domain-preview mt-2\" *ngIf=\"subdomainControl?.value\">\n              <strong>Seu domínio será:</strong>\n              <code class=\"domain-url\">{{ getAliasPreview() }}</code>\n            </div>\n\n            <div class=\"invalid-feedback\" *ngIf=\"subdomainControl?.touched && subdomainControl?.invalid\">\n              {{ getFieldError('register', 'subdomain') }}\n            </div>\n\n            <button \n              type=\"button\" \n              class=\"btn btn-outline-secondary btn-sm mt-2\"\n              (click)=\"generateSuggestions()\">\n              <i class=\"fas fa-magic\"></i>\n              Gerar Sugestões\n            </button>\n          </div>\n        </div>\n\n        <!-- Senha -->\n        <div class=\"form-section\">\n          <h4 class=\"section-title\">\n            <i class=\"fas fa-key\"></i>\n            Configuração de Acesso\n          </h4>\n          \n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">Senha *</label>\n                <input \n                  type=\"password\" \n                  class=\"form-control\"\n                  formControlName=\"password\"\n                  placeholder=\"Mínimo 6 caracteres\"\n                  [class.is-invalid]=\"registerForm.get('password')?.touched && registerForm.get('password')?.invalid\">\n                <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('password')?.touched && registerForm.get('password')?.invalid\">\n                  {{ getFieldError('register', 'password') }}\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">Confirmar Senha *</label>\n                <input \n                  type=\"password\" \n                  class=\"form-control\"\n                  formControlName=\"confirmPassword\"\n                  placeholder=\"Digite a senha novamente\"\n                  [class.is-invalid]=\"registerForm.get('confirmPassword')?.touched && registerForm.errors?.['passwordMismatch']\">\n                <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('confirmPassword')?.touched && registerForm.errors?.['passwordMismatch']\">\n                  {{ getFieldError('register', 'confirmPassword') }}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Termos -->\n        <div class=\"form-group\">\n          <div class=\"form-check\">\n            <input \n              class=\"form-check-input\" \n              type=\"checkbox\" \n              formControlName=\"agreeTerms\"\n              id=\"agreeTerms\"\n              [class.is-invalid]=\"registerForm.get('agreeTerms')?.touched && registerForm.get('agreeTerms')?.invalid\">\n            <label class=\"form-check-label\" for=\"agreeTerms\">\n              Aceito os <a href=\"/termos\" target=\"_blank\">termos de uso</a> e <a href=\"/privacidade\" target=\"_blank\">política de privacidade</a> *\n            </label>\n            <div class=\"invalid-feedback\" *ngIf=\"registerForm.get('agreeTerms')?.touched && registerForm.get('agreeTerms')?.invalid\">\n              Você deve aceitar os termos para continuar\n            </div>\n          </div>\n        </div>\n\n        <button \n          type=\"submit\" \n          class=\"btn btn-success btn-block btn-lg\"\n          [disabled]=\"isLoading() || !registerFormValid\">\n          <i class=\"fas fa-spinner fa-spin\" *ngIf=\"isLoading()\"></i>\n          <i class=\"fas fa-rocket\" *ngIf=\"!isLoading()\"></i>\n          {{ isLoading() ? 'Criando empresa...' : 'Criar Empresa' }}\n        </button>\n      </form>\n    </div>\n\n    <!-- Footer Info -->\n    <div class=\"auth-footer\">\n      <div class=\"footer-features\">\n        <div class=\"feature-item\">\n          <i class=\"fas fa-cloud\"></i>\n          <span>100% Nuvem</span>\n        </div>\n        <div class=\"feature-item\">\n          <i class=\"fas fa-shield-alt\"></i>\n          <span>Seguro</span>\n        </div>\n        <div class=\"feature-item\">\n          <i class=\"fas fa-mobile-alt\"></i>\n          <span>Responsivo</span>\n        </div>\n      </div>\n      \n      <p class=\"copyright\">\n        © 2024 TaskBoard - Sistema Kanban Multi-Empresas\n      </p>\n    </div>\n  </div>\n</div>"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8BI,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,eAAA,GAAA,GAAA;;;;;AAGF,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,aAAA,GAAA,GAAA;;;;;AAkBI,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,SAAA,OAAA,GAAA,GAAA;;;;;AAgBF,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,SAAA,UAAA,GAAA,GAAA;;;;;AAQF,IAAA,oBAAA,GAAA,KAAA,EAAA;;;;;AACA,IAAA,oBAAA,GAAA,KAAA,CAAA;;;;;;AAzCN,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA4D,GAAA,QAAA,EAAA;AAC5B,IAAA,qBAAA,YAAA,SAAA,0DAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAY,OAAA,gBAAA,CAAiB;IAAA,CAAA;AACzD,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAwB,GAAA,SAAA,EAAA;AAEpB,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,GAAA,SAAA;AACF,IAAA,uBAAA;AACA,IAAA,oBAAA,GAAA,SAAA,EAAA;AAOA,IAAA,qBAAA,GAAA,sCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAEA,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAwB,GAAA,SAAA,EAAA;AAEpB,IAAA,oBAAA,IAAA,KAAA,EAAA;AACA,IAAA,iBAAA,IAAA,SAAA;AACF,IAAA,uBAAA;AACA,IAAA,oBAAA,IAAA,SAAA,EAAA;AAOA,IAAA,qBAAA,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,UAAA,EAAA;AAIE,IAAA,qBAAA,IAAA,qCAAA,GAAA,GAAA,KAAA,EAAA,EAAsD,IAAA,qCAAA,GAAA,GAAA,KAAA,EAAA;AAEtD,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAS;AAGX,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA0B,IAAA,MAAA;AAClB,IAAA,iBAAA,IAAA,IAAA;AAAE,IAAA,uBAAA,EAAO;AAGjB,IAAA,yBAAA,IAAA,UAAA,EAAA;AAEE,IAAA,qBAAA,SAAA,SAAA,0DAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,iBAAA,CAAkB;IAAA,CAAA;;AAE3B,IAAA,yBAAA,IAAA,OAAA,EAAA;AACE,IAAA,oBAAA,IAAA,QAAA,EAAA,EAAkJ,IAAA,QAAA,EAAA,EACc,IAAA,QAAA,EAAA,EACR,IAAA,QAAA,EAAA;AAE1J,IAAA,uBAAA;AACA,IAAA,iBAAA,IAAA,qBAAA;AACF,IAAA,uBAAA,EAAS;;;;;;;;AA5DH,IAAA,oBAAA;AAAA,IAAA,qBAAA,aAAA,OAAA,SAAA;AAYA,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,gBAAA,UAAA,OAAA,UAAA,IAAA,OAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,UAAA,IAAA,OAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAC6B,IAAA,oBAAA;AAAA,IAAA,qBAAA,UAAA,UAAA,OAAA,UAAA,IAAA,OAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,UAAA,IAAA,OAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAgB7B,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,gBAAA,UAAA,OAAA,UAAA,IAAA,UAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,UAAA,IAAA,UAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAC6B,IAAA,oBAAA;AAAA,IAAA,qBAAA,UAAA,UAAA,OAAA,UAAA,IAAA,UAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,UAAA,IAAA,UAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAQ/B,IAAA,oBAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,UAAA,KAAA,CAAA,OAAA,cAAA;AACmC,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,UAAA,CAAA;AACJ,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,CAAA,OAAA,UAAA,CAAA;AAC/B,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,IAAA,gBAAA,UAAA,GAAA;AAWF,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,UAAA,CAAA;;;;;AA+BQ,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,YAAA,WAAA,GAAA,GAAA;;;;;AAaF,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,YAAA,YAAA,GAAA,GAAA;;;;;AAcN,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,YAAA,YAAA,GAAA,GAAA;;;;;AAoBF,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,YAAA,aAAA,GAAA,GAAA;;;;;AA4BA,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,GAAA,kCAAA;AACF,IAAA,uBAAA;;;;;AACA,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,GAAA,wBAAA;AACF,IAAA,uBAAA;;;;;AACA,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,WAAA,GAAA,GAAA;;;;;AAKJ,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAiE,GAAA,QAAA;AACvD,IAAA,iBAAA,GAAA,yBAAA;AAAiB,IAAA,uBAAA;AACzB,IAAA,yBAAA,GAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,CAAA;AAAuB,IAAA,uBAAA,EAAO;;;;AAA9B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,gBAAA,CAAA;;;;;AAG3B,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,YAAA,WAAA,GAAA,GAAA;;;;;AA8BE,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,YAAA,UAAA,GAAA,GAAA;;;;;AAaF,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,YAAA,iBAAA,GAAA,GAAA;;;;;AAmBN,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,GAAA,iDAAA;AACF,IAAA,uBAAA;;;;;AAQF,IAAA,oBAAA,GAAA,KAAA,EAAA;;;;;AACA,IAAA,oBAAA,GAAA,KAAA,EAAA;;;;;;AAlMN,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA+D,GAAA,QAAA,EAAA;AAC5B,IAAA,qBAAA,YAAA,SAAA,0DAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAY,OAAA,aAAA,CAAc;IAAA,CAAA;AAEzD,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA0B,GAAA,MAAA,EAAA;AAEtB,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,GAAA,uCAAA;AACF,IAAA,uBAAA;AAEA,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAiB,GAAA,OAAA,EAAA,EACO,GAAA,OAAA,EAAA,EACI,GAAA,SAAA,EAAA;AACI,IAAA,iBAAA,IAAA,iBAAA;AAAe,IAAA,uBAAA;AACzC,IAAA,oBAAA,IAAA,SAAA,EAAA;AAMA,IAAA,qBAAA,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA,EAAM;AAER,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,OAAA,EAAA,EACI,IAAA,SAAA,EAAA;AACI,IAAA,iBAAA,IAAA,YAAA;AAAU,IAAA,uBAAA;AACpC,IAAA,oBAAA,IAAA,SAAA,EAAA;AAMA,IAAA,qBAAA,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA,EAAM,EACF;AAGR,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACI,IAAA,iBAAA,IAAA,SAAA;AAAO,IAAA,uBAAA;AACjC,IAAA,oBAAA,IAAA,SAAA,EAAA;AAMA,IAAA,qBAAA,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA,EAAM;AAIR,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA0B,IAAA,MAAA,EAAA;AAEtB,IAAA,oBAAA,IAAA,KAAA,EAAA;AACA,IAAA,iBAAA,IAAA,gCAAA;AACF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACI,IAAA,iBAAA,IAAA,mBAAA;AAAiB,IAAA,uBAAA;AAC3C,IAAA,oBAAA,IAAA,SAAA,EAAA;AAMA,IAAA,qBAAA,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA,EAAM;AAKR,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA0B,IAAA,MAAA,EAAA;AAEtB,IAAA,oBAAA,IAAA,KAAA,EAAA;AACA,IAAA,iBAAA,IAAA,uCAAA;AACF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACI,IAAA,iBAAA,IAAA,uBAAA;AAAkB,IAAA,uBAAA;AAC5C,IAAA,yBAAA,IAAA,OAAA,EAAA;AACE,IAAA,oBAAA,IAAA,SAAA,EAAA;AAOA,IAAA,yBAAA,IAAA,OAAA,EAAA;AAA8B,IAAA,iBAAA,IAAA,mBAAA;AAAiB,IAAA,uBAAA,EAAM;AAIvD,IAAA,yBAAA,IAAA,OAAA,EAAA;AACE,IAAA,qBAAA,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA,EAAiD,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA,EAIW,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA;AAQ9D,IAAA,uBAAA;AAGA,IAAA,qBAAA,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA,EAAiE,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA;AASjE,IAAA,yBAAA,IAAA,UAAA,EAAA;AAGE,IAAA,qBAAA,SAAA,SAAA,0DAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,oBAAA,CAAqB;IAAA,CAAA;AAC9B,IAAA,oBAAA,IAAA,KAAA,EAAA;AACA,IAAA,iBAAA,IAAA,sBAAA;AACF,IAAA,uBAAA,EAAS,EACL;AAIR,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA0B,IAAA,MAAA,EAAA;AAEtB,IAAA,oBAAA,IAAA,KAAA,EAAA;AACA,IAAA,iBAAA,IAAA,gCAAA;AACF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAiB,IAAA,OAAA,EAAA,EACO,IAAA,OAAA,EAAA,EACI,IAAA,SAAA,EAAA;AACI,IAAA,iBAAA,IAAA,SAAA;AAAO,IAAA,uBAAA;AACjC,IAAA,oBAAA,IAAA,SAAA,EAAA;AAMA,IAAA,qBAAA,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA,EAAM;AAER,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,OAAA,EAAA,EACI,IAAA,SAAA,EAAA;AACI,IAAA,iBAAA,IAAA,mBAAA;AAAiB,IAAA,uBAAA;AAC3C,IAAA,oBAAA,IAAA,SAAA,EAAA;AAMA,IAAA,qBAAA,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA,EAAM,EACF,EACF;AAIR,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,OAAA,EAAA;AAEpB,IAAA,oBAAA,IAAA,SAAA,EAAA;AAMA,IAAA,yBAAA,IAAA,SAAA,EAAA;AACE,IAAA,iBAAA,IAAA,aAAA;AAAU,IAAA,yBAAA,IAAA,KAAA,EAAA;AAAkC,IAAA,iBAAA,IAAA,eAAA;AAAa,IAAA,uBAAA;AAAK,IAAA,iBAAA,IAAA,KAAA;AAAE,IAAA,yBAAA,IAAA,KAAA,EAAA;AAAuC,IAAA,iBAAA,IAAA,4BAAA;AAAuB,IAAA,uBAAA;AAAK,IAAA,iBAAA,IAAA,KAAA;AACrI,IAAA,uBAAA;AACA,IAAA,qBAAA,IAAA,uCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA,EAAM;AAGR,IAAA,yBAAA,IAAA,UAAA,EAAA;AAIE,IAAA,qBAAA,IAAA,qCAAA,GAAA,GAAA,KAAA,EAAA,EAAsD,IAAA,qCAAA,GAAA,GAAA,KAAA,EAAA;AAEtD,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAS,EACJ;;;;;;;;;;;;;;;;;;AApMD,IAAA,oBAAA;AAAA,IAAA,qBAAA,aAAA,OAAA,YAAA;AAiBM,IAAA,oBAAA,EAAA;AAAA,IAAA,sBAAA,gBAAA,UAAA,OAAA,aAAA,IAAA,WAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,aAAA,IAAA,WAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAC6B,IAAA,oBAAA;AAAA,IAAA,qBAAA,UAAA,UAAA,OAAA,aAAA,IAAA,WAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,aAAA,IAAA,WAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAa7B,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,gBAAA,UAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAC6B,IAAA,oBAAA;AAAA,IAAA,qBAAA,UAAA,UAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAcjC,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,gBAAA,UAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAC6B,IAAA,oBAAA;AAAA,IAAA,qBAAA,UAAA,UAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAoB7B,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,gBAAA,UAAA,OAAA,aAAA,IAAA,aAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,aAAA,IAAA,aAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAC6B,IAAA,oBAAA;AAAA,IAAA,qBAAA,UAAA,UAAA,OAAA,aAAA,IAAA,aAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,aAAA,IAAA,aAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAsB3B,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,eAAA,OAAA,oBAAA,OAAA,OAAA,OAAA,iBAAA,aAAA,OAAA,oBAAA,OAAA,OAAA,OAAA,iBAAA,YAAA,OAAA,WAAA,CAAA,EAA6F,YAAA,OAAA,eAAA,MAAA,IAAA;AAOvE,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,gBAAA,CAAA;AAIG,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,eAAA,MAAA,IAAA;AAID,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,WAAA,CAAA;AAOM,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,oBAAA,OAAA,OAAA,OAAA,iBAAA,KAAA;AAKH,IAAA,oBAAA;AAAA,IAAA,qBAAA,SAAA,OAAA,oBAAA,OAAA,OAAA,OAAA,iBAAA,aAAA,OAAA,oBAAA,OAAA,OAAA,OAAA,iBAAA,QAAA;AA8BzB,IAAA,oBAAA,EAAA;AAAA,IAAA,sBAAA,gBAAA,WAAA,OAAA,aAAA,IAAA,UAAA,MAAA,OAAA,OAAA,SAAA,cAAA,WAAA,OAAA,aAAA,IAAA,UAAA,MAAA,OAAA,OAAA,SAAA,QAAA;AAC6B,IAAA,oBAAA;AAAA,IAAA,qBAAA,UAAA,WAAA,OAAA,aAAA,IAAA,UAAA,MAAA,OAAA,OAAA,SAAA,cAAA,WAAA,OAAA,aAAA,IAAA,UAAA,MAAA,OAAA,OAAA,SAAA,QAAA;AAa7B,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,gBAAA,WAAA,OAAA,aAAA,IAAA,iBAAA,MAAA,OAAA,OAAA,SAAA,aAAA,OAAA,aAAA,UAAA,OAAA,OAAA,OAAA,aAAA,OAAA,kBAAA,EAAA;AAC6B,IAAA,oBAAA;AAAA,IAAA,qBAAA,UAAA,WAAA,OAAA,aAAA,IAAA,iBAAA,MAAA,OAAA,OAAA,SAAA,aAAA,OAAA,aAAA,UAAA,OAAA,OAAA,OAAA,aAAA,OAAA,kBAAA,EAAA;AAgBjC,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,gBAAA,WAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,SAAA,cAAA,WAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,SAAA,QAAA;AAI6B,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,UAAA,WAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,SAAA,cAAA,WAAA,OAAA,aAAA,IAAA,YAAA,MAAA,OAAA,OAAA,SAAA,QAAA;AASjC,IAAA,oBAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,UAAA,KAAA,CAAA,OAAA,iBAAA;AACmC,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,UAAA,CAAA;AACT,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,CAAA,OAAA,UAAA,CAAA;AAC1B,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,IAAA,uBAAA,iBAAA,GAAA;;;ADpRJ,IAAO,iBAAP,MAAO,gBAAc;EACjB,cAAc,OAAO,WAAW;EAChC,iBAAiB,OAAO,cAAc;EACtC,mBAAmB,OAAO,gBAAgB;EAC1C,SAAS,OAAO,MAAM;EACtB,KAAK,OAAO,WAAW;;EAG/B;EACA;;EAGA,cAAc,OAA+C,SAAO,GAAA,YAAA,CAAA,EAAA,WAAA,cAAA,CAAA,IAAA,CAAA,CAAA;EACpE,YAAY,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,YAAA,CAAA,IAAA,CAAA,CAAA;EACxB,eAAe,OAAO,IAAE,GAAA,YAAA,CAAA,EAAA,WAAA,eAAA,CAAA,IAAA,CAAA,CAAA;EACxB,iBAAiB,OAAO,IAAE,GAAA,YAAA,CAAA,EAAA,WAAA,iBAAA,CAAA,IAAA,CAAA,CAAA;;EAG1B,cAAc,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,cAAA,CAAA,IAAA,CAAA,CAAA;EAC1B,cAAc,OAAY,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,cAAA,CAAA,IAAA,CAAA,CAAA;;EAG9B,kBAAkB,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,kBAAA,CAAA,IAAA,CAAA,CAAA;EAC9B,iBAAiB,OAAuB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,iBAAA,CAAA,IAAA,CAAA,CAAA;EAC5C,aAAa,OAAO,IAAE,GAAA,YAAA,CAAA,EAAA,WAAA,aAAA,CAAA,IAAA,CAAA,CAAA;EAEtB,WAAQ;AACN,SAAK,gBAAe;AACpB,SAAK,qBAAoB;EAC3B;EAEQ,kBAAe;AAErB,SAAK,YAAY,KAAK,GAAG,MAAM;MAC7B,OAAO,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,KAAK,CAAC;MACnD,UAAU,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,CAAC,CAAC;KAC9D;AAGD,SAAK,eAAe,KAAK,GAAG,MAAM;MAChC,WAAW,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,CAAC,CAAC;MAC9D,YAAY,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,KAAK,CAAC;MACxD,YAAY,CAAC,IAAI,CAAC,WAAW,UAAU,KAAK,cAAc,CAAC;MAC3D,aAAa,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,CAAC,CAAC;MAChE,WAAW,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,GAAG,KAAK,eAAe,KAAK,IAAI,CAAC,CAAC;MAC9F,UAAU,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,CAAC,CAAC;MAC7D,iBAAiB,CAAC,IAAI,WAAW,QAAQ;MACzC,YAAY,CAAC,OAAO,WAAW,YAAY;OAC1C,EAAE,YAAY,KAAK,uBAAsB,CAAE;EAChD;EAEQ,uBAAoB;AAE1B,SAAK,aAAa,IAAI,WAAW,GAAG,aAAa,KAC/C,aAAa,GAAG,GAChB,qBAAoB,GACpB,UAAU,WAAQ;AAChB,UAAI,CAAC,SAAS,MAAM,SAAS,GAAG;AAC9B,aAAK,eAAe,IAAI,IAAI;AAC5B,aAAK,WAAW,IAAI,EAAE;AACtB,eAAO,GAAG,IAAI;MAChB;AAGA,YAAM,aAAa;AACnB,UAAI,CAAC,WAAW,KAAK,KAAK,GAAG;AAC3B,aAAK,eAAe,IAAI,KAAK;AAC7B,aAAK,WAAW,IAAI,2GAAyF;AAC7G,eAAO,GAAG,KAAK;MACjB;AAGA,YAAM,WAAW,CAAC,OAAO,OAAO,SAAS,OAAO,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,SAAS,WAAW,MAAM;AACjH,UAAI,SAAS,SAAS,KAAK,GAAG;AAC5B,aAAK,eAAe,IAAI,KAAK;AAC7B,aAAK,WAAW,IAAI,2CAAwC;AAC5D,eAAO,GAAG,KAAK;MACjB;AAEA,WAAK,gBAAgB,IAAI,IAAI;AAC7B,WAAK,WAAW,IAAI,EAAE;AAEtB,aAAO,KAAK,eAAe,qBAAqB,KAAK;IACvD,CAAC,CAAC,EACF,UAAU;MACV,MAAM,CAAC,cAAa;AAClB,aAAK,gBAAgB,IAAI,KAAK;AAC9B,YAAI,cAAc,MAAM;AACtB,eAAK,eAAe,IAAI,SAAS;AACjC,cAAI,CAAC,WAAW;AACd,iBAAK,WAAW,IAAI,iDAA2C;UACjE,OAAO;AACL,iBAAK,WAAW,IAAI,EAAE;UACxB;QACF;MACF;MACA,OAAO,MAAK;AACV,aAAK,gBAAgB,IAAI,KAAK;AAC9B,aAAK,WAAW,IAAI,oCAAoC;MAC1D;KACD;EACH;EAEM,kBAAe;;AACnB,UAAI,KAAK,UAAU,SAAS;AAC1B,aAAK,qBAAqB,KAAK,SAAS;AACxC;MACF;AAEA,WAAK,UAAU,IAAI,IAAI;AACvB,WAAK,cAAa;AAElB,YAAM,EAAE,OAAO,SAAQ,IAAK,KAAK,UAAU;AAC3C,YAAM,SAAS,MAAM,KAAK,YAAY,gBAAgB,OAAO,QAAQ;AAErE,UAAI,OAAO,SAAS;AAClB,cAAM,KAAK,sBAAqB;MAClC,OAAO;AACL,aAAK,aAAa,IAAI,KAAK,gBAAgB,OAAO,KAAK,CAAC;MAC1D;AAEA,WAAK,UAAU,IAAI,KAAK;IAC1B;;EAEM,mBAAgB;;AACpB,WAAK,UAAU,IAAI,IAAI;AACvB,WAAK,cAAa;AAElB,UAAI;AACF,cAAM,SAAS,MAAM,KAAK,YAAY,iBAAgB;AACtD,cAAM,KAAK,sBAAqB;MAClC,SAAS,OAAO;AACd,aAAK,aAAa,IAAI,KAAK,gBAAgB,KAAY,CAAC;MAC1D;AAEA,WAAK,UAAU,IAAI,KAAK;IAC1B;;EAEM,eAAY;;AAChB,UAAI,KAAK,aAAa,SAAS;AAC7B,aAAK,qBAAqB,KAAK,YAAY;AAC3C;MACF;AAEA,UAAI,KAAK,eAAc,MAAO,MAAM;AAClC,aAAK,aAAa,IAAI,wDAAkD;AACxE;MACF;AAEA,WAAK,UAAU,IAAI,IAAI;AACvB,WAAK,cAAa;AAElB,UAAI;AACF,cAAM,WAAW,KAAK,aAAa;AAGnC,cAAM,aAAa,MAAM,KAAK,YAAY,oBAAoB,SAAS,YAAY,SAAS,QAAQ;AAEpG,YAAI,CAAC,WAAW,SAAS;AACvB,gBAAM,IAAI,MAAM,WAAW,SAAS,0BAAuB;QAC7D;AAGA,cAAM,KAAK,YAAY,kBAAkB;UACvC,aAAa,SAAS;UACtB,aAAa,SAAS;SACvB;AAGD,cAAM,cAAc;UAClB,WAAW,SAAS;UACpB,MAAM,SAAS;UACf,cAAc,SAAS;UACvB,SAAS,WAAW,MAAM,OAAO;UACjC,YAAY,SAAS;UACrB,MAAM;UACN,YAAY;YACV,MAAM;YACN,MAAM;YACN,QAAQ;YACR,MAAM;YACN,UAAU;YACV,UAAU,SAAS;YACnB,WAAW,SAAS;;UAEtB,WAAW;YACT,SAAS;YACT,OAAO,KAAK,iBAAgB;YAC5B,UAAU,WAAW,SAAS,SAAS;YACvC,YAAY;;UAEd,UAAU;YACR,WAAW;YACX,UAAU;YACV,kBAAkB;YAClB,mBAAmB;YACnB,gBAAgB;YAChB,WAAW;YACX,UAAU;YACV,iBAAiB;YACjB,YAAY;;UAEd,QAAQ;;AAGV,cAAM,YAAY,MAAM,KAAK,eAAe,cAAc,WAAW;AAGrE,cAAM,aAAa,MAAM,KAAK,eAAe,WAAW,SAAS;AACjE,YAAI,YAAY;AACd,eAAK,iBAAiB,kBAAkB,UAAU;QACpD;AAGA,cAAM,KAAK,mBAAmB,WAAW,MAAM,OAAO,IAAI,SAAS;AAEnE,aAAK,eAAe,IAAI,kDAA+C,SAAS,SAAS,mBAAmB;AAG5G,mBAAW,MAAK;AAEd,cAAI,KAAK,iBAAiB,cAAa,GAAI;AACzC,mBAAO,SAAS,OAAO,oBAAoB,OAAO,SAAS,IAAI,cAAc,SAAS,SAAS;UACjG,OAAO;AACL,mBAAO,SAAS,OAAO,WAAW,SAAS,SAAS;UACtD;QACF,GAAG,GAAI;MAET,SAAS,OAAY;AACnB,cAAM,eAAe,OAAO,OACxB,KAAK,wBAAwB,MAAM,IAAI,IACvC,OAAO,WAAW;AACtB,aAAK,aAAa,IAAI,YAAY;MACpC;AACE,aAAK,UAAU,IAAI,KAAK;MAC1B;IACF;;EAEc,mBAAmB,QAAgB,WAAiB;;AAChE,UAAI;AAGF,cAAM,EAAE,iBAAgB,IAAK,MAAM,OAAO,qBAAkC;AAC5E,cAAM,mBAAmB,IAAI,iBAAgB;AAE7C,cAAM,eAAe;UACnB,MAAM;UACN,aAAa;UACb;UACA,WAAW;;;AAGb,cAAM,iBAAiB,YAAY,QAAQ,YAAY;MACzD,SAAS,OAAO;MAEhB;IACF;;EAEc,wBAAqB;;AACjC,UAAI;AACF,cAAM,cAAc,KAAK,YAAY,eAAc;AAEnD,YAAI,CAAC,aAAa,OAAO;AACvB,eAAK,aAAa,IAAI,mCAAgC;AACtD;QACF;AAGA,YAAI;AACF,gBAAM,cAAc,MAAM,KAAK,eAAe,sBAAsB,YAAY,KAAK;AAErF,cAAI,aAAa;AAEf,iBAAK,iBAAiB,kBAAkB,WAAW;AAGnD,gBAAI,KAAK,iBAAiB,cAAa,GAAI;AAEzC,2BAAa,QAAQ,iBAAiB,YAAY,SAAS;AAC3D,mBAAK,OAAO,SAAS,CAAC,YAAY,CAAC;YACrC,OAAO;AAEL,oBAAM,aAAa,KAAK,iBAAiB,cAAc,YAAY,SAAS;AAC5E,qBAAO,SAAS,OAAO,aAAa;YACtC;UACF,OAAO;AAEL,iBAAK,aAAa,IAAI,+EAAyE;UACjG;QACF,SAAS,aAAa;AAEpB,eAAK,OAAO,SAAS,CAAC,YAAY,CAAC;QACrC;MAEF,SAAS,OAAO;AACd,aAAK,aAAa,IAAI,2CAA2C;MACnE;IACF;;EAEA,sBAAmB;AACjB,UAAM,cAAc,KAAK,aAAa,IAAI,aAAa,GAAG;AAC1D,QAAI,CAAC;AAAa;AAElB,UAAM,cAAc,KAAK,yBAAyB,WAAW;AAC7D,UAAM,iBAAiB,YAAY,CAAC;AAEpC,QAAI,gBAAgB;AAClB,WAAK,aAAa,WAAW,EAAE,WAAW,eAAc,CAAE;IAC5D;EACF;EAEQ,yBAAyB,aAAmB;AAClD,UAAM,OAAO,YACV,YAAW,EACX,UAAU,KAAK,EACf,QAAQ,oBAAoB,EAAE,EAC9B,QAAQ,gBAAgB,EAAE,EAC1B,QAAQ,QAAQ,GAAG,EACnB,QAAQ,OAAO,GAAG,EAClB,QAAQ,UAAU,EAAE;AAEvB,WAAO;MACL;MACA,GAAG,IAAI;MACP,GAAG,IAAI;MACP,GAAG,IAAI;MACP,GAAG,IAAI,GAAG,KAAK,MAAM,KAAK,OAAM,IAAK,GAAG,CAAC;MACzC,GAAG,IAAI,KAAI,oBAAI,KAAI,GAAG,YAAW,CAAE;MACnC,OAAO,WAAS,MAAM,UAAU,KAAK,MAAM,UAAU,EAAE;EAC3D;EAEA,WAAW,MAA0B;AACnC,SAAK,YAAY,IAAI,IAAI;AACzB,SAAK,cAAa;AAClB,SAAK,WAAU;EACjB;EAEQ,aAAU;AAChB,SAAK,UAAU,MAAK;AACpB,SAAK,aAAa,MAAK;AACvB,SAAK,eAAe,IAAI,IAAI;AAC5B,SAAK,WAAW,IAAI,EAAE;EACxB;EAEQ,gBAAa;AACnB,SAAK,aAAa,IAAI,EAAE;AACxB,SAAK,eAAe,IAAI,EAAE;EAC5B;EAEQ,qBAAqB,WAAoB;AAC/C,WAAO,KAAK,UAAU,QAAQ,EAAE,QAAQ,WAAQ;AAC9C,YAAM,UAAU,UAAU,IAAI,KAAK;AACnC,eAAS,cAAc,EAAE,UAAU,KAAI,CAAE;IAC3C,CAAC;EACH;;EAGQ,wBAAwB,WAAiB;AAC/C,UAAM,gBAA2C;MAC/C,6BAA6B;MAC7B,sBAAsB;MACtB,sBAAsB;MACtB,uBAAuB;MACvB,uBAAuB;MACvB,sBAAsB;MACtB,0BAA0B;MAC1B,+BAA+B;MAC/B,2BAA2B;MAC3B,iDAAiD;MACjD,6BAA6B;MAC7B,sBAAsB;MACtB,kCAAkC;MAClC,8BAA8B;MAC9B,uBAAuB;MACvB,uBAAuB;MACvB,8BAA8B;;AAGhC,WAAO,cAAc,SAAS,KAAK;EACrC;;EAGQ,eAAe,SAAwB;AAC7C,QAAI,CAAC,QAAQ;AAAO,aAAO;AAC3B,UAAM,aAAa;AACnB,WAAO,WAAW,KAAK,QAAQ,KAAK,IAAI,OAAO,EAAE,cAAc,KAAI;EACrE;EAEQ,aAAa,SAAwB;AAC3C,QAAI,CAAC,QAAQ;AAAO,aAAO;AAC3B,UAAM,WAAW;AACjB,WAAO,SAAS,KAAK,QAAQ,KAAK,IAAI,OAAO,EAAE,YAAY,KAAI;EACjE;EAEQ,eAAe,SAAwB;AAC7C,QAAI,CAAC,QAAQ;AAAO,aAAO;AAC3B,UAAM,aAAa;AACnB,QAAI,QAAQ,MAAM,SAAS;AAAG,aAAO,EAAE,WAAW,KAAI;AACtD,QAAI,QAAQ,MAAM,SAAS;AAAI,aAAO,EAAE,WAAW,KAAI;AACvD,WAAO,WAAW,KAAK,QAAQ,KAAK,IAAI,OAAO,EAAE,cAAc,KAAI;EACrE;EAEQ,uBAAuB,OAAsB;AACnD,UAAM,WAAW,MAAM,IAAI,UAAU,GAAG;AACxC,UAAM,kBAAkB,MAAM,IAAI,iBAAiB,GAAG;AACtD,WAAO,aAAa,kBAAkB,OAAO,EAAE,kBAAkB,KAAI;EACvE;;EAGA,IAAI,iBAAc;AAAK,WAAO,KAAK,UAAU;EAAO;EACpD,IAAI,oBAAiB;AAAK,WAAO,KAAK,aAAa,SAAS,KAAK,eAAc,MAAO;EAAM;EAC5F,IAAI,mBAAgB;AAAK,WAAO,KAAK,aAAa,IAAI,WAAW;EAAG;EAEpE,cAAc,UAAgC,WAAiB;AAC7D,UAAM,OAAO,aAAa,UAAU,KAAK,YAAY,KAAK;AAC1D,UAAM,UAAU,KAAK,IAAI,SAAS;AAElC,QAAI,CAAC,SAAS,UAAU,CAAC,QAAQ;AAAS,aAAO;AAEjD,UAAM,SAAS,QAAQ;AAEvB,QAAI,OAAO,UAAU;AAAG,aAAO;AAC/B,QAAI,OAAO,OAAO;AAAG,aAAO;AAC5B,QAAI,OAAO,WAAW;AAAG,aAAO,gBAAa,OAAO,WAAW,EAAE,cAAc;AAC/E,QAAI,OAAO,cAAc;AAAG,aAAO;AACnC,QAAI,OAAO,YAAY;AAAG,aAAO;AACjC,QAAI,OAAO,cAAc;AAAG,aAAO;AACnC,QAAI,OAAO,kBAAkB;AAAG,aAAO;AAEvC,WAAO;EACT;EAEA,kBAAe;AACb,UAAM,QAAQ,KAAK,aAAa,IAAI,WAAW,GAAG;AAClD,WAAO,QAAQ,GAAG,KAAK,sBAAsB;EAC/C;EAEQ,mBAAgB;AACtB,UAAM,QAAQ;AACd,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,gBAAU,MAAM,OAAO,KAAK,MAAM,KAAK,OAAM,IAAK,MAAM,MAAM,CAAC;IACjE;AACA,WAAO;EACT;EAEQ,gBAAgB,OAAU;AAEhC,QAAI,OAAO,MAAM;AACf,aAAO,KAAK,wBAAwB,MAAM,IAAI;IAChD;AAGA,QAAI,OAAO,UAAU,UAAU;AAC7B,UAAI,MAAM,SAAS,gBAAgB,GAAG;AACpC,eAAO;MACT;AACA,UAAI,MAAM,SAAS,gBAAgB,GAAG;AACpC,eAAO;MACT;AACA,UAAI,MAAM,SAAS,eAAe,GAAG;AACnC,eAAO;MACT;AACA,UAAI,MAAM,SAAS,sBAAsB,GAAG;AAC1C,eAAO;MACT;AACA,UAAI,MAAM,SAAS,eAAe,GAAG;AACnC,eAAO;MACT;AACA,UAAI,MAAM,SAAS,mBAAmB,GAAG;AACvC,eAAO;MACT;IACF;AAEA,WAAO,OAAO,WAAW;EAC3B;;qCA3dW,iBAAc;EAAA;yEAAd,iBAAc,WAAA,CAAA,CAAA,WAAA,CAAA,GAAA,OAAA,IAAA,MAAA,GAAA,QAAA,CAAA,CAAA,GAAA,gBAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,GAAA,gBAAA,GAAA,CAAA,GAAA,OAAA,YAAA,WAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,YAAA,GAAA,OAAA,GAAA,CAAA,GAAA,OAAA,gBAAA,GAAA,CAAA,GAAA,OAAA,aAAA,GAAA,CAAA,SAAA,uBAAA,GAAA,MAAA,GAAA,CAAA,SAAA,sBAAA,GAAA,MAAA,GAAA,CAAA,SAAA,gBAAA,GAAA,MAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,OAAA,UAAA,GAAA,CAAA,GAAA,OAAA,eAAA,GAAA,CAAA,GAAA,OAAA,eAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,SAAA,eAAA,GAAA,CAAA,GAAA,OAAA,iBAAA,GAAA,CAAA,GAAA,SAAA,cAAA,GAAA,CAAA,GAAA,OAAA,uBAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,aAAA,GAAA,YAAA,WAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,OAAA,SAAA,GAAA,YAAA,GAAA,CAAA,GAAA,OAAA,aAAA,GAAA,CAAA,QAAA,SAAA,MAAA,SAAA,mBAAA,SAAA,eAAA,iBAAA,GAAA,cAAA,GAAA,CAAA,SAAA,oBAAA,GAAA,MAAA,GAAA,CAAA,OAAA,YAAA,GAAA,YAAA,GAAA,CAAA,GAAA,OAAA,SAAA,GAAA,CAAA,QAAA,YAAA,MAAA,YAAA,mBAAA,YAAA,eAAA,aAAA,GAAA,cAAA,GAAA,CAAA,QAAA,UAAA,GAAA,OAAA,eAAA,aAAA,GAAA,UAAA,GAAA,CAAA,SAAA,0BAAA,GAAA,MAAA,GAAA,CAAA,SAAA,sBAAA,GAAA,MAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,OAAA,cAAA,aAAA,GAAA,SAAA,UAAA,GAAA,CAAA,WAAA,aAAA,GAAA,aAAA,GAAA,CAAA,QAAA,WAAA,KAAA,yHAAA,GAAA,CAAA,QAAA,WAAA,KAAA,uIAAA,GAAA,CAAA,QAAA,WAAA,KAAA,+HAAA,GAAA,CAAA,QAAA,WAAA,KAAA,qIAAA,GAAA,CAAA,GAAA,kBAAA,GAAA,CAAA,GAAA,OAAA,cAAA,SAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,OAAA,SAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,UAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,QAAA,QAAA,mBAAA,aAAA,eAAA,iBAAA,GAAA,cAAA,GAAA,CAAA,QAAA,OAAA,mBAAA,cAAA,eAAA,mBAAA,GAAA,cAAA,GAAA,CAAA,QAAA,SAAA,mBAAA,cAAA,eAAA,oBAAA,GAAA,cAAA,GAAA,CAAA,QAAA,QAAA,mBAAA,eAAA,eAAA,sBAAA,GAAA,cAAA,GAAA,CAAA,GAAA,OAAA,SAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,QAAA,QAAA,mBAAA,aAAA,eAAA,gBAAA,GAAA,cAAA,GAAA,CAAA,GAAA,kBAAA,GAAA,CAAA,GAAA,MAAA,GAAA,CAAA,SAAA,aAAA,GAAA,MAAA,GAAA,CAAA,SAAA,gBAAA,GAAA,MAAA,GAAA,CAAA,SAAA,eAAA,GAAA,MAAA,GAAA,CAAA,SAAA,uBAAA,GAAA,MAAA,GAAA,CAAA,QAAA,UAAA,GAAA,OAAA,yBAAA,UAAA,QAAA,GAAA,OAAA,GAAA,CAAA,GAAA,OAAA,UAAA,GAAA,CAAA,GAAA,OAAA,QAAA,GAAA,CAAA,QAAA,YAAA,mBAAA,YAAA,eAAA,0BAAA,GAAA,cAAA,GAAA,CAAA,QAAA,YAAA,mBAAA,mBAAA,eAAA,4BAAA,GAAA,cAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,QAAA,YAAA,mBAAA,cAAA,MAAA,cAAA,GAAA,kBAAA,GAAA,CAAA,OAAA,cAAA,GAAA,kBAAA,GAAA,CAAA,QAAA,WAAA,UAAA,QAAA,GAAA,CAAA,QAAA,gBAAA,UAAA,QAAA,GAAA,CAAA,QAAA,UAAA,GAAA,OAAA,eAAA,aAAA,UAAA,GAAA,UAAA,GAAA,CAAA,SAAA,iBAAA,GAAA,MAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,GAAA,OAAA,iBAAA,GAAA,CAAA,GAAA,kBAAA,MAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,OAAA,WAAA,CAAA,GAAA,UAAA,SAAA,wBAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;ACzB3B,MAAA,yBAAA,GAAA,OAAA,CAAA,EAA4B,GAAA,OAAA,CAAA,EACH,GAAA,OAAA,CAAA,EAEI,GAAA,OAAA,CAAA;AAErB,MAAA,oBAAA,GAAA,KAAA,CAAA;AACF,MAAA,uBAAA;AACA,MAAA,yBAAA,GAAA,MAAA,CAAA;AAAuB,MAAA,iBAAA,GAAA,WAAA;AAAS,MAAA,uBAAA;AAChC,MAAA,yBAAA,GAAA,KAAA,CAAA;AAAyB,MAAA,iBAAA,GAAA,+BAAA;AAA6B,MAAA,uBAAA,EAAI;AAI5D,MAAA,yBAAA,GAAA,OAAA,CAAA,EAAuB,IAAA,UAAA,CAAA;AAInB,MAAA,qBAAA,SAAA,SAAA,mDAAA;AAAA,eAAS,IAAA,WAAW,OAAO;MAAC,CAAA;AAC5B,MAAA,oBAAA,IAAA,KAAA,CAAA;AACA,MAAA,iBAAA,IAAA,UAAA;AACF,MAAA,uBAAA;AACA,MAAA,yBAAA,IAAA,UAAA,CAAA;AAGE,MAAA,qBAAA,SAAA,SAAA,mDAAA;AAAA,eAAS,IAAA,WAAW,UAAU;MAAC,CAAA;AAC/B,MAAA,oBAAA,IAAA,KAAA,EAAA;AACA,MAAA,iBAAA,IAAA,iBAAA;AACF,MAAA,uBAAA,EAAS;AAIX,MAAA,qBAAA,IAAA,gCAAA,GAAA,GAAA,OAAA,EAAA,EAA0D,IAAA,gCAAA,GAAA,GAAA,OAAA,EAAA,EAKH,IAAA,gCAAA,IAAA,IAAA,OAAA,EAAA,EAMK,IAAA,gCAAA,IAAA,IAAA,OAAA,EAAA;AA0Q5D,MAAA,yBAAA,IAAA,OAAA,EAAA,EAAyB,IAAA,OAAA,EAAA,EACM,IAAA,OAAA,EAAA;AAEzB,MAAA,oBAAA,IAAA,KAAA,EAAA;AACA,MAAA,yBAAA,IAAA,MAAA;AAAM,MAAA,iBAAA,IAAA,YAAA;AAAU,MAAA,uBAAA,EAAO;AAEzB,MAAA,yBAAA,IAAA,OAAA,EAAA;AACE,MAAA,oBAAA,IAAA,KAAA,EAAA;AACA,MAAA,yBAAA,IAAA,MAAA;AAAM,MAAA,iBAAA,IAAA,QAAA;AAAM,MAAA,uBAAA,EAAO;AAErB,MAAA,yBAAA,IAAA,OAAA,EAAA;AACE,MAAA,oBAAA,IAAA,KAAA,EAAA;AACA,MAAA,yBAAA,IAAA,MAAA;AAAM,MAAA,iBAAA,IAAA,YAAA;AAAU,MAAA,uBAAA,EAAO,EACnB;AAGR,MAAA,yBAAA,IAAA,KAAA,EAAA;AACE,MAAA,iBAAA,IAAA,uDAAA;AACF,MAAA,uBAAA,EAAI,EACA,EACF;;;AAxTA,MAAA,oBAAA,EAAA;AAAA,MAAA,sBAAA,UAAA,IAAA,YAAA,MAAA,OAAA;AAOA,MAAA,oBAAA,CAAA;AAAA,MAAA,sBAAA,UAAA,IAAA,YAAA,MAAA,UAAA;AAQ8B,MAAA,oBAAA,CAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,eAAA,CAAA;AAKD,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,aAAA,CAAA;AAMN,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,YAAA,MAAA,OAAA;AAiEA,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,YAAA,MAAA,UAAA;;oBDrFnB,cAAY,MAAE,qBAAmB,oBAAA,sBAAA,8BAAA,iBAAA,sBAAA,oBAAA,egDAAA,EAAA,CAAA;;;sEAIhC,gBAAc,CAAA;UAP1B;uBACW,aAAW,YACT,MAAI,SACP,CAAC,cAAc,mBAAmjC,gBAAc,EAAA,WAAA,kBAAA,UAAA,+CAAA,YAAA,GAAA,CAAA;AAAA,GAAA;",
  "names": []
}
