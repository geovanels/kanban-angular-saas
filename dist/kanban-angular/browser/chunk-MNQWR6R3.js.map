{
  "version": 3,
  "sources": ["src/app/components/public-form/public-form.component.ts"],
  "sourcesContent": ["import { Component, OnInit, inject, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { FirestoreService, Lead } from '../../services/firestore.service';\nimport { CompanyService } from '../../services/company.service';\nimport { SubdomainService } from '../../services/subdomain.service';\nimport { ToastService } from '../toast/toast.service';\n\n@Component({\n  selector: 'app-public-form',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  template: `\n    <div class=\"min-h-screen bg-gray-50 py-10 px-4\">\n      <div class=\"max-w-2xl mx-auto\">\n        <!-- Company Logo on top -->\n        <div *ngIf=\"companyLogo\" class=\"mb-6 text-center\">\n          <img [src]=\"companyLogo\" alt=\"Logo da empresa\" class=\"h-10 inline-block\" />\n        </div>\n        <div class=\"bg-white border border-gray-200 rounded-xl shadow-sm\">\n          <div class=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n            <h1 class=\"text-lg font-semibold text-gray-900\">Formulário</h1>\n            <span class=\"text-xs text-gray-500\" *ngIf=\"companyName()\">{{ companyName() }}</span>\n          </div>\n\n          <div class=\"p-6\">\n            <div *ngIf=\"loading()\" class=\"text-sm text-gray-500\">Carregando...</div>\n            <div *ngIf=\"!loading() && !fieldsLoaded()\" class=\"text-sm text-gray-500\">Nenhum campo configurado para esta fase.</div>\n\n            <form *ngIf=\"fieldsLoaded()\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"space-y-4\">\n              <div *ngFor=\"let f of currentFields\" class=\"space-y-1\">\n                <label class=\"block text-sm font-medium text-gray-700\">{{ f.label }}</label>\n                <ng-container [ngSwitch]=\"f.type\">\n                  <input *ngSwitchCase=\"'text'\" type=\"text\" [formControlName]=\"f.name\" class=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n                  <input *ngSwitchCase=\"'email'\" type=\"email\" [formControlName]=\"f.name\" class=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n                  <input *ngSwitchCase=\"'tel'\" type=\"tel\" [formControlName]=\"f.name\" class=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n                  <input *ngSwitchCase=\"'number'\" type=\"number\" [formControlName]=\"f.name\" class=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n                  <textarea *ngSwitchCase=\"'textarea'\" rows=\"3\" [formControlName]=\"f.name\" class=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"></textarea>\n                  <select *ngSwitchCase=\"'select'\" [formControlName]=\"f.name\" class=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n                    <option value=\"\">Selecione...</option>\n                    <ng-container *ngIf=\"f.options && f.options.length && typeof f.options[0] === 'object'; else simpleOpts\">\n                      <option *ngFor=\"let opt of f.options\" [value]=\"opt.value\">{{ opt.label }}</option>\n                    </ng-container>\n                    <ng-template #simpleOpts>\n                      <option *ngFor=\"let opt of (f.options || [])\" [value]=\"opt\">{{ opt }}</option>\n                    </ng-template>\n                  </select>\n                  <!-- Campo Radio -->\n                  <div *ngSwitchCase=\"'radio'\" class=\"flex flex-col gap-2\">\n                    <label *ngFor=\"let opt of (f.options || [])\" class=\"inline-flex items-center gap-2 text-sm text-gray-700\">\n                      <input type=\"radio\" [attr.name]=\"f.name\" [value]=\"opt?.value ?? opt\" [formControlName]=\"f.name\" class=\"text-blue-600 focus:ring-blue-500\">\n                      <span>{{ opt?.label ?? opt }}</span>\n                    </label>\n                  </div>\n                  <select *ngSwitchCase=\"'temperatura'\" [formControlName]=\"f.name\" class=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n                    <option value=\"\">Selecione...</option>\n                    <option *ngFor=\"let opt of (f.options && f.options.length ? f.options : ['Quente','Morno','Frio'])\" [value]=\"opt\">{{ opt }}</option>\n                  </select>\n                  <input *ngSwitchDefault type=\"text\" [formControlName]=\"f.name\" class=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n                </ng-container>\n              </div>\n\n              <div class=\"pt-2\">\n                <button type=\"submit\" [disabled]=\"saving()\" class=\"px-4 py-2 text-white rounded-lg\" [style.background-color]=\"primaryColor()\">\n                  {{ saving() ? 'Salvando...' : 'Salvar' }}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n        <!-- Powered by footer -->\n        <div class=\"mt-6 text-center text-xs text-gray-400\">\n          Powered by <strong>Task Board</strong>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class PublicFormComponent implements OnInit {\n  private route = inject(ActivatedRoute);\n  private fs = inject(FirestoreService);\n  private subdomain = inject(SubdomainService);\n  private toast = inject(ToastService);\n  private fb = inject(FormBuilder);\n  private companyService = inject(CompanyService);\n\n  form: FormGroup = this.fb.group({});\n  loading = signal(true);\n  saving = signal(false);\n  fieldsLoaded = signal(false);\n  companyName = signal<string | null>(null);\n  primaryColor = signal<string>(this.subdomain.getCurrentCompany()?.brandingConfig?.primaryColor || '#3B82F6');\n  companyLogo: string | null = null;\n\n  userId = '';\n  boardId = '';\n  columnId = '';\n  leadId = '';\n  currentFields: any[] = [];\n  lead: Lead | null = null;\n  private companyUsers: Array<{ uid?: string; email?: string; displayName?: string }> = [];\n\n  async ngOnInit() {\n    const qp = this.route.snapshot.queryParamMap;\n    const sub = qp.get('subdomain') || undefined;\n    const companyIdParam = qp.get('companyId') || '';\n    this.userId = qp.get('userId') || '';\n    this.boardId = qp.get('boardId') || '';\n    this.leadId = qp.get('leadId') || '';\n    this.columnId = qp.get('columnId') || '';\n\n    try {\n      let company: any = null;\n      // 1) Preferir companyId do link\n      if (companyIdParam) {\n        company = await this.companyService.getCompany(companyIdParam);\n      }\n      // 2) Tentar por subdomain explícito\n      if (!company && sub) {\n        company = await this.companyService.getCompanyBySubdomain(sub);\n      }\n      // 3) Fallback: detectar pelo host\n      if (!company) {\n        company = await this.subdomain.initializeFromSubdomain();\n      }\n      if (company) {\n        this.subdomain.setCurrentCompany(company);\n        this.companyName.set(company.name || sub || null);\n        this.primaryColor.set(company.brandingConfig?.primaryColor || '#3B82F6');\n        const sd = company.subdomain;\n        // Logo: usar logo da empresa; fallback opcional para gobuyer\n        this.companyLogo = (company.brandingConfig?.logo && company.brandingConfig.logo.trim() !== '' ? company.brandingConfig.logo : null)\n          || (sd === 'gobuyer' ? 'https://apps.gobuyer.com.br/sso/assets/images/logos/logo-gobuyer.png' : null);\n      } else if (sub) {\n        // fallback simples apenas com o nome\n        this.companyName.set(sub);\n      }\n    } catch { this.companyName.set(sub || null); }\n\n    try {\n      if (this.leadId) {\n        this.lead = await this.fs.getLead(this.userId, this.boardId, this.leadId);\n      }\n    } catch {}\n\n    try {\n      // Preferir formulário da fase\n      const phaseCfg = await this.fs.getPhaseFormConfig(this.userId, this.boardId, this.columnId);\n      const fields = (phaseCfg as any)?.fields || [];\n      this.currentFields = fields.sort((a: any, b: any) => (a.order || 0) - (b.order || 0));\n      // Se houver campo 'responsavel', carregar usuários da empresa\n      const hasResp = this.currentFields.some((f: any) => f.type === 'responsavel');\n      if (hasResp) {\n        const company = this.subdomain.getCurrentCompany();\n        if (company?.id) {\n          try {\n            const users = await this.companyService.getAllCompanyUsers(company.id);\n            this.companyUsers = users || [];\n            // Transformar o campo responsavel em select\n            this.currentFields = this.currentFields.map((f: any) => {\n              if (f.type === 'responsavel') {\n                return {\n                  ...f,\n                  type: 'select',\n                  originalType: 'responsavel',\n                  options: users.map(u => ({ value: u.uid || u.email, label: u.displayName || u.email }))\n                };\n              }\n              return f;\n            });\n          } catch {}\n        }\n      }\n      const formGroup: any = {};\n      this.currentFields.forEach((f: any) => {\n        const key = f.apiFieldName || f.name;\n        const val = (this.lead as any)?.fields?.[key] ?? '';\n        formGroup[f.name] = [val];\n        // Normalizar radios para array/objetos\n        if (f.type === 'radio' && Array.isArray(f.options)) {\n          f.options = f.options.map((o: any) => typeof o === 'object' ? o : { value: o, label: o });\n        }\n      });\n      this.form = this.fb.group(formGroup);\n      this.fieldsLoaded.set(this.currentFields.length > 0);\n    } catch {\n      this.currentFields = [];\n      this.fieldsLoaded.set(false);\n    }\n\n    this.loading.set(false);\n  }\n\n  private mapFormToLeadFields(): any {\n    const values = this.form.value;\n    const mapped: any = {};\n    this.currentFields.forEach((f: any) => {\n      const apiKey = f.apiFieldName || f.name;\n      mapped[apiKey] = values[f.name];\n    });\n    return mapped;\n  }\n\n  async onSubmit() {\n    if (!this.lead || !this.leadId) return;\n    this.saving.set(true);\n    try {\n      const mapped = this.mapFormToLeadFields();\n      const updates: any = {\n        fields: { ...(this.lead.fields || {}), ...mapped }\n      };\n\n      // Se houver campo de responsável, atualizar campos raiz do lead\n      try {\n        const respField = this.currentFields.find((f: any) => f.originalType === 'responsavel' || f.type === 'responsavel' || (f.name || '').toLowerCase() === 'responsavel');\n        if (respField) {\n          const fieldName = respField.name;\n          const selectedId = this.form.get(fieldName)?.value;\n          if (selectedId) {\n            const match = this.companyUsers.find(u => (u.uid && u.uid === selectedId) || (u.email && u.email === selectedId));\n            updates.responsibleUserId = match?.uid || selectedId;\n            updates.responsibleUserName = match?.displayName || '';\n            updates.responsibleUserEmail = match?.email || '';\n          }\n        }\n      } catch {}\n\n      await this.fs.updateLead(this.userId, this.boardId, this.leadId, updates);\n      try { this.toast.success('Formulário salvo.'); } catch {}\n    } catch (e) {\n      console.error(e);\n      try { this.toast.error('Erro ao salvar formulário.'); } catch {}\n    } finally {\n      this.saving.set(false);\n    }\n  }\n}\n\n\n"],
  "mappings": "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",
  "names": []
}
