{
  "version": 3,
  "sources": ["src/app/components/advanced-filters/advanced-filters.component.ts", "src/app/components/advanced-filters/advanced-filters.component.html", "src/app/components/reports/reports.component.ts", "src/app/components/reports/reports.component.html"],
  "sourcesContent": ["import { Component, Input, Output, EventEmitter, OnInit, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { FirestoreService } from '../../services/firestore.service';\n\n@Component({\n  selector: 'app-advanced-filters',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './advanced-filters.component.html',\n  styleUrls: ['./advanced-filters.component.scss']\n})\nexport class AdvancedFiltersComponent implements OnInit {\n  private firestoreService = inject(FirestoreService);\n\n  @Input() boardId: string = '';\n  @Input() ownerId: string = '';\n  @Input() columns: any[] = [];\n  @Input() currentUser: any = null;\n  \n  // Filter states\n  @Input() filterQuery: string = '';\n  @Input() filterOnlyMine: boolean = false;\n  @Input() dynamicFilters: { [key: string]: any } = {};\n  @Input() showAdvancedFilters: boolean = false;\n  \n  // Filter fields\n  availableFilterFields: any[] = [];\n  initialFormFields: any[] = [];\n  phaseFormConfigs: {[key: string]: any} = {};\n\n  // Events\n  @Output() filterQueryChange = new EventEmitter<string>();\n  @Output() filterOnlyMineChange = new EventEmitter<boolean>();\n  @Output() dynamicFiltersChange = new EventEmitter<{[key: string]: any}>();\n  @Output() showAdvancedFiltersChange = new EventEmitter<boolean>();\n  @Output() filtersApplied = new EventEmitter<void>();\n\n  async ngOnInit() {\n    if (this.boardId && this.ownerId) {\n      await this.loadInitialFormFields();\n      await this.loadAllPhaseFormConfigs();\n      this.loadAvailableFilterFields();\n    }\n  }\n\n  private async loadInitialFormFields() {\n    if (!this.boardId) return;\n    \n    try {\n      const formConfig = await this.firestoreService.getInitialFormConfig(this.boardId);\n      if (formConfig && formConfig.fields) {\n        this.initialFormFields = formConfig.fields || [];\n        console.log('üìã [AdvancedFilters] Campos do formul√°rio carregados:', this.initialFormFields);\n      } else {\n        this.initialFormFields = [];\n      }\n    } catch (error) {\n      console.log('‚ÑπÔ∏è [AdvancedFilters] Nenhuma configura√ß√£o de formul√°rio encontrada');\n      this.initialFormFields = [];\n    }\n  }\n\n  async loadAllPhaseFormConfigs() {\n    for (const column of this.columns) {\n      try {\n        const config = await this.firestoreService.getPhaseFormConfig(this.ownerId, this.boardId, column.id!);\n        if (config?.fields) {\n          this.phaseFormConfigs[column.id!] = config;\n        }\n      } catch (e) {\n        // Ignorar erro se n√£o houver configura√ß√£o para esta fase\n      }\n    }\n    \n    // Recarregar campos dispon√≠veis para filtro ap√≥s carregar configura√ß√µes de fases\n    this.loadAvailableFilterFields();\n  }\n\n  // Migrar campos existentes para incluir showInFilters\n  private migrateFieldsToIncludeShowInFilters() {\n    console.log('üîß [AdvancedFilters] Migrando campos para incluir showInFilters...');\n    \n    // Migrar campos do formul√°rio inicial\n    if (this.initialFormFields) {\n      let needsMigration = false;\n      this.initialFormFields.forEach(field => {\n        if (!('showInFilters' in field)) {\n          field.showInFilters = false;\n          needsMigration = true;\n          console.log(`üîß [AdvancedFilters] Adicionado showInFilters: false ao campo ${field.name} (campo antigo)`);\n        } else {\n          console.log(`‚úÖ [AdvancedFilters] Campo ${field.name} j√° tem showInFilters: ${field.showInFilters}`);\n        }\n      });\n      \n      if (needsMigration) {\n        console.log('üîß [AdvancedFilters] Alguns campos do formul√°rio inicial foram migrados em mem√≥ria');\n      } else {\n        console.log('‚úÖ [AdvancedFilters] Todos os campos do formul√°rio inicial j√° t√™m showInFilters');\n      }\n    }\n    \n    // Migrar campos das fases\n    Object.entries(this.phaseFormConfigs || {}).forEach(([phaseId, config]: [string, any]) => {\n      if (config?.fields) {\n        let needsMigration = false;\n        config.fields.forEach((field: any) => {\n          if (!('showInFilters' in field)) {\n            field.showInFilters = false;\n            needsMigration = true;\n            console.log(`üîß [AdvancedFilters] Adicionado showInFilters: false ao campo ${field.name} da fase ${phaseId} (campo antigo)`);\n          } else {\n            console.log(`‚úÖ [AdvancedFilters] Campo ${field.name} da fase ${phaseId} j√° tem showInFilters: ${field.showInFilters}`);\n          }\n        });\n        \n        if (needsMigration) {\n          console.log(`üîß [AdvancedFilters] Alguns campos da fase ${phaseId} foram migrados em mem√≥ria`);\n        } else {\n          console.log(`‚úÖ [AdvancedFilters] Todos os campos da fase ${phaseId} j√° t√™m showInFilters`);\n        }\n      }\n    });\n  }\n\n  private loadAvailableFilterFields() {\n    console.log('üîç [AdvancedFilters] loadAvailableFilterFields INICIADO');\n    console.log('üîç [AdvancedFilters] initialFormFields:', this.initialFormFields);\n    console.log('üîç [AdvancedFilters] phaseFormConfigs:', this.phaseFormConfigs);\n    \n    // Executar migra√ß√£o primeiro\n    this.migrateFieldsToIncludeShowInFilters();\n    \n    const allFields: any[] = [];\n    \n    // Adicionar campos do formul√°rio inicial que t√™m showInFilters = true\n    if (this.initialFormFields) {\n      console.log('üîç [AdvancedFilters] Processando campos do formul√°rio inicial...');\n      this.initialFormFields.forEach((field, index) => {\n        console.log(`üîç [AdvancedFilters] Campo inicial ${index + 1}:`, field);\n        console.log(`üîç [AdvancedFilters] Campo inicial ${index + 1} - Detalhes:`, {\n          name: field.name,\n          type: field.type,\n          showInFilters: field.showInFilters,\n          hasShowInFilters: 'showInFilters' in field,\n          keys: Object.keys(field)\n        });\n        \n        if (field.name && field.type && field.showInFilters) {\n          const filterField = {\n            name: field.name,\n            label: field.label || field.name,\n            type: field.type,\n            source: 'initial'\n          };\n          allFields.push(filterField);\n          console.log('‚úÖ [AdvancedFilters] Campo adicionado aos filtros:', filterField);\n        } else {\n          console.log('‚ùå [AdvancedFilters] Campo N√ÉO adicionado aos filtros (falta name, type ou showInFilters = false)');\n        }\n      });\n    } else {\n      console.log('‚ö†Ô∏è [AdvancedFilters] Nenhum initialFormFields encontrado');\n    }\n    \n    // Adicionar campos de fases que t√™m showInFilters = true\n    console.log('üîç [AdvancedFilters] Processando campos das fases...');\n    Object.entries(this.phaseFormConfigs || {}).forEach(([phaseId, config]: [string, any]) => {\n      console.log(`üîç [AdvancedFilters] Fase ${phaseId}:`, config);\n      if (config?.fields) {\n        config.fields.forEach((field: any, index: number) => {\n          console.log(`üîç [AdvancedFilters] Campo da fase ${phaseId} - ${index + 1}:`, field);\n          console.log(`üîç [AdvancedFilters] Campo da fase ${phaseId} - ${index + 1} - Detalhes:`, {\n            name: field.name,\n            type: field.type,\n            showInFilters: field.showInFilters,\n            hasShowInFilters: 'showInFilters' in field,\n            keys: Object.keys(field)\n          });\n          \n          if (field.name && field.type && field.showInFilters && !allFields.find(f => f.name === field.name)) {\n            const filterField = {\n              name: field.name,\n              label: field.label || field.name,\n              type: field.type,\n              source: 'phase',\n              phaseId: phaseId\n            };\n            allFields.push(filterField);\n            console.log('‚úÖ [AdvancedFilters] Campo da fase adicionado aos filtros:', filterField);\n          } else {\n            console.log('‚ùå [AdvancedFilters] Campo da fase N√ÉO adicionado (falta name, type, showInFilters = false, ou j√° existe)');\n          }\n        });\n      }\n    });\n    \n    console.log('üîç [AdvancedFilters] Todos os campos coletados:', allFields);\n    \n    // Filtrar apenas campos apropriados para filtro\n    this.availableFilterFields = allFields.filter(field => {\n      const supportedTypes = ['text', 'email', 'select', 'radio', 'checkbox', 'date', 'number', 'tel', 'cnpj', 'cpf', 'temperatura'];\n      const isSupported = supportedTypes.includes(field.type.toLowerCase());\n      console.log(`üîç [AdvancedFilters] Campo ${field.name} (${field.type}) - Suportado: ${isSupported}`);\n      return isSupported;\n    });\n    \n    console.log('üîç [AdvancedFilters] Campos filtrados finais (availableFilterFields):', this.availableFilterFields);\n    console.log('üîç [AdvancedFilters] availableFilterFields.length:', this.availableFilterFields.length);\n    console.log('üîç [AdvancedFilters] showAdvancedFilters:', this.showAdvancedFilters);\n  }\n\n  // Obter op√ß√µes dispon√≠veis para um campo\n  getFieldOptions(field: any): string[] {\n    // Para campos select, radio e temperatura, verificar se h√° op√ß√µes definidas\n    if (field.type === 'select' || field.type === 'radio') {\n      // Buscar o campo original para obter as op√ß√µes\n      const originalField = this.findOriginalField(field.name, field.source);\n      if (originalField && originalField.options && Array.isArray(originalField.options)) {\n        return originalField.options;\n      }\n    }\n    \n    // Para temperatura, sempre retornar as op√ß√µes padr√£o se n√£o encontrar definidas\n    if (field.type === 'temperatura') {\n      return ['Quente', 'Morno', 'Frio'];\n    }\n    \n    return [];\n  }\n\n  private findOriginalField(fieldName: string, source: string): any {\n    if (source === 'initial') {\n      return this.initialFormFields?.find(f => f.name === fieldName);\n    } else if (source === 'phase') {\n      // Buscar em todas as configura√ß√µes de fases\n      for (const config of Object.values(this.phaseFormConfigs)) {\n        const found = (config as any)?.fields?.find((f: any) => f.name === fieldName);\n        if (found) return found;\n      }\n    }\n    return null;\n  }\n\n  // Event handlers\n  onFilterQueryChange(value: string) {\n    this.filterQuery = value;\n    this.filterQueryChange.emit(value);\n    this.filtersApplied.emit();\n  }\n\n  toggleOnlyMine() {\n    this.filterOnlyMine = !this.filterOnlyMine;\n    this.filterOnlyMineChange.emit(this.filterOnlyMine);\n    this.filtersApplied.emit();\n  }\n\n  toggleAdvancedFilters() {\n    this.showAdvancedFilters = !this.showAdvancedFilters;\n    this.showAdvancedFiltersChange.emit(this.showAdvancedFilters);\n  }\n\n  setDynamicFilter(fieldName: string, value: any) {\n    if (value === '' || value === null || value === undefined) {\n      delete this.dynamicFilters[fieldName];\n    } else {\n      this.dynamicFilters[fieldName] = value;\n    }\n    this.dynamicFiltersChange.emit(this.dynamicFilters);\n    this.filtersApplied.emit();\n  }\n\n  clearFilters() {\n    this.filterQuery = '';\n    this.filterOnlyMine = false;\n    this.dynamicFilters = {};\n    \n    this.filterQueryChange.emit(this.filterQuery);\n    this.filterOnlyMineChange.emit(this.filterOnlyMine);\n    this.dynamicFiltersChange.emit(this.dynamicFilters);\n    this.filtersApplied.emit();\n  }\n\n  hasActiveFilters(): boolean {\n    return this.filterQuery.length > 0 || \n           this.filterOnlyMine || \n           Object.keys(this.dynamicFilters).length > 0;\n  }\n\n  getDynamicFilterCount(): number {\n    return Object.keys(this.dynamicFilters).length;\n  }\n}", "<!-- Search and Filter Controls -->\n<div class=\"mb-4\">\n  <!-- Search Bar with Integrated Filter Button -->\n  <div class=\"flex items-center space-x-2\">\n    <div class=\"relative flex-1\">\n      <input \n        type=\"text\" \n        [(ngModel)]=\"filterQuery\"\n        (ngModelChange)=\"onFilterQueryChange($event)\"\n        placeholder=\"Pesquisar...\"\n        class=\"w-full pl-10 pr-12 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\">\n      <i class=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"></i>\n      \n      <!-- Filter Button Inside Search -->\n      <button \n        (click)=\"toggleAdvancedFilters()\"\n        class=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1.5 hover:bg-gray-100 rounded transition-colors\"\n        [class.text-blue-600]=\"showAdvancedFilters\"\n        [class.bg-blue-50]=\"showAdvancedFilters\">\n        <i class=\"fas fa-filter text-sm\"></i>\n        <span *ngIf=\"hasActiveFilters()\" class=\"absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center\" style=\"font-size: 10px;\">\n          {{ getDynamicFilterCount() + (filterOnlyMine ? 1 : 0) }}\n        </span>\n      </button>\n    </div>\n    \n    <!-- Clear Filters Button -->\n    <button \n      *ngIf=\"hasActiveFilters()\"\n      (click)=\"clearFilters()\"\n      class=\"px-3 py-2 bg-red-100 hover:bg-red-200 text-red-700 border border-red-300 rounded-lg transition-colors\">\n      <i class=\"fas fa-times\"></i>\n    </button>\n  </div>\n</div>\n\n<!-- Advanced Filters Modal -->\n<div *ngIf=\"showAdvancedFilters\" \n     class=\"fixed top-20 left-4 w-full max-w-lg bg-white rounded-xl shadow-xl border border-gray-200 z-[9999]\">\n  <div class=\"p-6\">\n    <div class=\"flex items-center justify-between mb-4\">\n      <h3 class=\"text-lg font-semibold text-gray-900\">Filtros Avan√ßados</h3>\n      <button \n        (click)=\"toggleAdvancedFilters()\"\n        class=\"text-gray-400 hover:text-gray-600\">\n        <i class=\"fas fa-times\"></i>\n      </button>\n    </div>\n    \n    <!-- Quick Filter: Show Only Mine -->\n    <div class=\"mb-6 p-3 bg-gray-50 rounded-lg\">\n      <label class=\"flex items-center space-x-2 cursor-pointer\">\n        <input \n          type=\"checkbox\" \n          [(ngModel)]=\"filterOnlyMine\"\n          (ngModelChange)=\"toggleOnlyMine()\"\n          class=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\">\n        <span class=\"text-sm text-gray-700 font-medium\">Mostrar apenas meus registros</span>\n      </label>\n    </div>\n    \n    <!-- Dynamic Filter Fields -->\n    <div *ngIf=\"availableFilterFields.length > 0\" class=\"space-y-4\">\n      <h4 class=\"text-sm font-medium text-gray-700 mb-3\">Filtros Din√¢micos</h4>\n      \n      <div *ngFor=\"let field of availableFilterFields\" class=\"space-y-2\">\n        <label class=\"block text-sm font-medium text-gray-700\">\n          {{ field.label }}\n        </label>\n        \n        <!-- Text/Email/Tel/Number Fields -->\n        <input \n          *ngIf=\"field.type === 'text' || field.type === 'email' || field.type === 'tel' || field.type === 'number' || field.type === 'cnpj' || field.type === 'cpf'\"\n          [type]=\"field.type === 'number' ? 'number' : 'text'\"\n          [value]=\"dynamicFilters[field.name] || ''\"\n          (input)=\"setDynamicFilter(field.name, $any($event.target).value)\"\n          [placeholder]=\"'Filtrar por ' + field.label.toLowerCase()\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\">\n        \n        <!-- Date Fields -->\n        <input \n          *ngIf=\"field.type === 'date'\"\n          type=\"date\"\n          [value]=\"dynamicFilters[field.name] || ''\"\n          (input)=\"setDynamicFilter(field.name, $any($event.target).value)\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\">\n        \n        <!-- Select/Radio Fields -->\n        <select \n          *ngIf=\"field.type === 'select' || field.type === 'radio'\"\n          [value]=\"dynamicFilters[field.name] || ''\"\n          (change)=\"setDynamicFilter(field.name, $any($event.target).value)\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\">\n          <option value=\"\">Todos</option>\n          <option *ngFor=\"let option of getFieldOptions(field)\" [value]=\"option\">\n            {{ option }}\n          </option>\n        </select>\n        \n        <!-- Temperatura Field -->\n        <select \n          *ngIf=\"field.type === 'temperatura'\"\n          [value]=\"dynamicFilters[field.name] || ''\"\n          (change)=\"setDynamicFilter(field.name, $any($event.target).value)\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\">\n          <option value=\"\">Todas as temperaturas</option>\n          <option value=\"Quente\">üî• Quente</option>\n          <option value=\"Morno\">üå°Ô∏è Morno</option>\n          <option value=\"Frio\">‚ùÑÔ∏è Frio</option>\n        </select>\n        \n        <!-- Checkbox Fields -->\n        <div *ngIf=\"field.type === 'checkbox'\" class=\"flex items-center space-x-2\">\n          <input \n            type=\"checkbox\"\n            [checked]=\"dynamicFilters[field.name] === true\"\n            (change)=\"setDynamicFilter(field.name, $any($event.target).checked)\"\n            class=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\">\n          <span class=\"text-sm text-gray-700\">Apenas marcados</span>\n        </div>\n      </div>\n    </div>\n    \n    <!-- No Fields Available -->\n    <div *ngIf=\"availableFilterFields.length === 0\" class=\"text-center py-6\">\n      <i class=\"fas fa-filter text-gray-300 text-3xl mb-3\"></i>\n      <p class=\"text-gray-500 text-sm\">\n        Nenhum campo configurado para filtros.<br>\n        Configure campos com \"Mostrar em filtros\" ativado no formul√°rio.\n      </p>\n    </div>\n    \n    <!-- Action Buttons -->\n    <div class=\"flex justify-end space-x-3 mt-6 pt-4 border-t border-gray-200\">\n      <button \n        (click)=\"clearFilters()\"\n        class=\"px-4 py-2 text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\">\n        Limpar\n      </button>\n      <button \n        (click)=\"toggleAdvancedFilters()\"\n        class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\">\n        Aplicar\n      </button>\n    </div>\n  </div>\n</div>", "import { Component, inject, OnInit, OnDestroy, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { FirestoreService, Lead, Column, Board } from '../../services/firestore.service';\nimport { MainLayoutComponent } from '../main-layout/main-layout.component';\nimport { CompanyBreadcrumbComponent } from '../company-breadcrumb/company-breadcrumb.component';\nimport { AdvancedFiltersComponent } from '../advanced-filters/advanced-filters.component';\n\n\ninterface SLAIndicator {\n  phaseId: string;\n  phaseName: string;\n  phaseColor: string;\n  slaDays: number;\n  totalRecords: number;\n  onTime: number;\n  overdue: number;\n  compliance: number;\n}\n\ninterface PhaseMetric {\n  phaseId: string;\n  phaseName: string;\n  phaseColor: string;\n  recordsCount: number;\n  avgTimeInPhase: number;\n  conversionRate: number;\n}\n\n@Component({\n  selector: 'app-reports',\n  standalone: true,\n  imports: [CommonModule, FormsModule, MainLayoutComponent, CompanyBreadcrumbComponent, AdvancedFiltersComponent],\n  templateUrl: './reports.component.html',\n  styleUrls: ['./reports.component.scss']\n})\nexport class ReportsComponent implements OnInit, OnDestroy {\n  private authService = inject(AuthService);\n  private firestoreService = inject(FirestoreService);\n  private router = inject(Router);\n  private route = inject(ActivatedRoute);\n\n  @Input() boardId: string = '';\n  @Input() ownerId: string = '';\n  currentUser: any = null;\n  board: Board | null = null;\n  availableBoards: Board[] = [];\n  \n  // Data\n  records: Lead[] = [];\n  columns: Column[] = [];\n  users: any[] = [];\n  \n  // Kanban-style filters - now handled by AdvancedFiltersComponent\n  filterQuery: string = '';\n  filterOnlyMine: boolean = false;\n  dynamicFilters: { [key: string]: any } = {};\n  showAdvancedFilters: boolean = false;\n\n  // Loading states\n  isLoading = false;\n  isGeneratingReport = false;\n\n\n  // Report data\n  filteredRecords: Lead[] = [];\n  slaIndicators: SLAIndicator[] = [];\n  phaseMetrics: PhaseMetric[] = [];\n  summaryStats = {\n    totalRecords: 0,\n    newRecordsThisPeriod: 0,\n    concludedRecords: 0,\n    avgConversionTime: 0,\n    activeRecords: 0,\n    overdueRecords: 0\n  };\n\n  // Chart data\n  chartData = {\n    phaseDistribution: [] as any[],\n    registrosOverTime: [] as any[],\n    conversionFunnel: [] as any[]\n  };\n\n  // Display options\n  currentView: 'overview' | 'sla' | 'phases' | 'registros' = 'overview';\n  exportFormats = ['PDF', 'Excel', 'CSV'];\n  \n  // Column management for registros table\n  availableColumns: any[] = [];\n  selectedColumns: string[] = [];\n  showColumnSelector = false;\n  viewTabs = [\n    { key: 'overview', name: 'Vis√£o Geral', icon: 'fa-chart-pie' },\n    { key: 'sla', name: 'SLA', icon: 'fa-clock' },\n    { key: 'phases', name: 'Fases', icon: 'fa-columns' },\n    { key: 'registros', name: 'Registros', icon: 'fa-users' }\n  ];\n\n  async ngOnInit() {\n    this.currentUser = this.authService.getCurrentUser();\n    \n    // Use provided inputs first, fallback to URL params, then to current user\n    if (!this.ownerId) {\n      this.ownerId = this.currentUser?.uid || '';\n    }\n    \n    // Get route parameters only if boardId not provided via input\n    if (!this.boardId) {\n      this.route.queryParams.subscribe(params => {\n        if (params['boardId']) {\n          this.boardId = params['boardId'];\n        }\n      });\n    }\n\n\n    // Load available boards\n    await this.loadAvailableBoards();\n\n    // If boardId is set (from input or URL), load data directly\n    if (this.boardId && this.ownerId) {\n      await this.loadData();\n      this.initializeColumns();\n      this.generateReport();\n    }\n  }\n\n  ngOnDestroy() {\n    // Cleanup subscriptions if any\n  }\n\n\n\n  private async loadAvailableBoards() {\n    if (!this.ownerId) return;\n    \n    try {\n      this.availableBoards = await this.firestoreService.getBoards(this.ownerId);\n    } catch (error) {\n      console.error('Erro ao carregar boards dispon√≠veis:', error);\n    }\n  }\n\n  async selectBoard(boardId: string) {\n    this.boardId = boardId;\n    await this.loadData();\n    this.initializeColumns();\n    this.generateReport();\n  }\n\n\n  private async loadData() {\n    this.isLoading = true;\n    try {\n      // Load board info\n      const boards = await this.firestoreService.getBoards(this.ownerId);\n      this.board = boards.find(b => b.id === this.boardId) || null;\n\n      // Load registros, columns, and form config in parallel\n      const [registros, columns] = await Promise.all([\n        this.firestoreService.getLeads(this.ownerId, this.boardId),\n        this.firestoreService.getColumns(this.ownerId, this.boardId)\n      ]);\n\n      this.records = registros;\n      this.columns = columns;\n      this.users = []; // Ser√° implementado posteriormente\n\n      // Note: Form field configuration now handled by AdvancedFiltersComponent\n\n      console.log('Dados carregados:', {\n        boardId: this.boardId,\n        recordsCount: registros.length,\n        columnsCount: columns.length,\n        formFieldsCount: (this.board as any)?.initialFormFields?.length || 0,\n        registros: registros.slice(0, 3) // Log first 3 registros for debugging\n      });\n\n      // Debug form fields structure\n      if (registros.length > 0 && registros[0].fields) {\n        console.log('üìã Campos dispon√≠veis no primeiro registro:', Object.keys(registros[0].fields));\n      }\n\n    } catch (error) {\n      console.error('Erro ao carregar dados do relat√≥rio:', error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  generateReport() {\n    if (this.isGeneratingReport) return;\n    \n    this.isGeneratingReport = true;\n    try {\n      // Apply current filters\n      this.applyFilters();\n      this.calculateSummaryStats();\n      this.calculateSLAIndicators();\n      this.calculatePhaseMetrics();\n      this.generateChartData();\n    } finally {\n      this.isGeneratingReport = false;\n    }\n  }\n\n\n  private getLeadDate(lead: Lead): Date {\n    if (lead.createdAt?.toDate) {\n      return lead.createdAt.toDate();\n    } else if (lead.createdAt?.seconds) {\n      return new Date(lead.createdAt.seconds * 1000);\n    } else if (lead.createdAt) {\n      return new Date(lead.createdAt);\n    }\n    return new Date();\n  }\n\n  isLeadOverdue(lead: Lead): boolean {\n    const currentColumn = this.columns.find(c => c.id === lead.columnId);\n    if (!currentColumn?.slaDays) return false;\n\n    const movedDate = lead.movedToCurrentColumnAt?.toDate ? \n      lead.movedToCurrentColumnAt.toDate() : \n      (lead.movedToCurrentColumnAt?.seconds ? \n        new Date(lead.movedToCurrentColumnAt.seconds * 1000) : \n        new Date(lead.movedToCurrentColumnAt || lead.createdAt));\n\n    const daysPassed = (Date.now() - movedDate.getTime()) / (1000 * 60 * 60 * 24);\n    return daysPassed > currentColumn.slaDays;\n  }\n\n  isLeadConcluded(lead: Lead): boolean {\n    const currentColumn = this.columns.find(c => c.id === lead.columnId);\n    return !!(currentColumn?.endStageType && currentColumn.endStageType !== 'none');\n  }\n\n  private calculateSummaryStats() {\n    const startDate = this.dynamicFilters.startDate ? new Date(this.dynamicFilters.startDate) : null;\n    const endDate = this.dynamicFilters.endDate ? new Date(this.dynamicFilters.endDate) : null;\n\n    this.summaryStats = {\n      totalRecords: this.filteredRecords.length,\n      newRecordsThisPeriod: startDate && endDate ? this.filteredRecords.filter(record => {\n        const leadDate = this.getLeadDate(record);\n        return leadDate >= startDate && leadDate <= endDate;\n      }).length : this.filteredRecords.length,\n      concludedRecords: this.filteredRecords.filter(record => this.isLeadConcluded(record)).length,\n      avgConversionTime: this.calculateAverageConversionTime(),\n      activeRecords: this.filteredRecords.filter(record => !this.isLeadConcluded(record)).length,\n      overdueRecords: this.filteredRecords.filter(record => this.isLeadOverdue(record) && !this.isLeadConcluded(record)).length\n    };\n  }\n\n  private calculateAverageConversionTime(): number {\n    const concludedRecords = this.filteredRecords.filter(record => this.isLeadConcluded(record));\n    if (concludedRecords.length === 0) return 0;\n\n    const totalTime = concludedRecords.reduce((sum, lead) => {\n      const createdDate = this.getLeadDate(lead);\n      const movedDate = lead.movedToCurrentColumnAt?.toDate ? \n        lead.movedToCurrentColumnAt.toDate() : new Date();\n      return sum + (movedDate.getTime() - createdDate.getTime());\n    }, 0);\n\n    return Math.round(totalTime / concludedRecords.length / (1000 * 60 * 60 * 24)); // Days\n  }\n\n  private calculateSLAIndicators() {\n    this.slaIndicators = this.columns\n      .filter(col => col.slaDays && col.slaDays > 0)\n      .map(column => {\n        const registrosInPhase = this.filteredRecords.filter(record => record.columnId === column.id);\n        const overdueRecords = registrosInPhase.filter(record => this.isLeadOverdue(record));\n        const onTimeLeads = registrosInPhase.length - overdueRecords.length;\n        \n        return {\n          phaseId: column.id!,\n          phaseName: column.name,\n          phaseColor: column.color,\n          slaDays: column.slaDays,\n          totalRecords: registrosInPhase.length,\n          onTime: onTimeLeads,\n          overdue: overdueRecords.length,\n          compliance: registrosInPhase.length > 0 ? Math.round((onTimeLeads / registrosInPhase.length) * 100) : 100\n        };\n      });\n  }\n\n  private calculatePhaseMetrics() {\n    this.phaseMetrics = this.columns.map(column => {\n      const registrosInPhase = this.filteredRecords.filter(record => record.columnId === column.id);\n      const avgTime = this.calculateAverageTimeInPhase(registrosInPhase);\n      const conversionRate = this.calculatePhaseConversionRate(column);\n\n      return {\n        phaseId: column.id!,\n        phaseName: column.name,\n        phaseColor: column.color,\n        recordsCount: registrosInPhase.length,\n        avgTimeInPhase: avgTime,\n        conversionRate: conversionRate\n      };\n    });\n  }\n\n  private calculateAverageTimeInPhase(registros: Lead[]): number {\n    if (registros.length === 0) return 0;\n\n    const totalTime = registros.reduce((sum, lead) => {\n      const phaseHistory = (lead as any).phaseHistory || {};\n      const phaseEntry = Object.values(phaseHistory).find((p: any) => p.phaseId === lead.columnId) as any;\n      \n      if (phaseEntry?.duration) {\n        return sum + phaseEntry.duration;\n      } else if (phaseEntry?.enteredAt) {\n        const enteredDate = phaseEntry.enteredAt.toDate ? \n          phaseEntry.enteredAt.toDate() : new Date(phaseEntry.enteredAt);\n        return sum + (Date.now() - enteredDate.getTime());\n      }\n      \n      return sum;\n    }, 0);\n\n    return Math.round(totalTime / registros.length / (1000 * 60 * 60 * 24)); // Days\n  }\n\n  private calculatePhaseConversionRate(column: Column): number {\n    const currentIndex = this.columns.findIndex(c => c.id === column.id);\n    if (currentIndex === this.columns.length - 1) return 0; // Last phase\n\n    const registrosInCurrentPhase = this.filteredRecords.filter(record => record.columnId === column.id).length;\n    const nextPhases = this.columns.slice(currentIndex + 1);\n    const registrosInNextPhases = this.filteredRecords.filter(record => \n      nextPhases.some(p => p.id === record.columnId)\n    ).length;\n\n    const totalProgressed = registrosInCurrentPhase + registrosInNextPhases;\n    return totalProgressed > 0 ? Math.round((registrosInNextPhases / totalProgressed) * 100) : 0;\n  }\n\n  private generateChartData() {\n    // Phase distribution\n    this.chartData.phaseDistribution = this.phaseMetrics.map(metric => ({\n      name: metric.phaseName,\n      value: metric.recordsCount,\n      color: metric.phaseColor\n    }));\n\n    // Debug: Log chart data\n    console.log('üìä Chart Data Generated:', {\n      phaseMetrics: this.phaseMetrics,\n      phaseDistribution: this.chartData.phaseDistribution,\n      columnsCount: this.columns.length,\n      recordsCount: this.filteredRecords.length\n    });\n\n    // Leads over time (simplified)\n    this.chartData.registrosOverTime = this.generateLeadsOverTimeData();\n\n    // Conversion funnel\n    this.chartData.conversionFunnel = this.phaseMetrics.map((metric, index) => ({\n      phase: metric.phaseName,\n      registros: metric.recordsCount,\n      order: index\n    }));\n  }\n\n  private generateLeadsOverTimeData(): any[] {\n    // Simplified implementation - group by week\n    const startDate = this.dynamicFilters.startDate ? new Date(this.dynamicFilters.startDate) : new Date(new Date().setMonth(new Date().getMonth() - 6));\n    const endDate = this.dynamicFilters.endDate ? new Date(this.dynamicFilters.endDate) : new Date();\n    const data: any[] = [];\n\n    const current = new Date(startDate);\n    while (current <= endDate) {\n      const weekEnd = new Date(current);\n      weekEnd.setDate(weekEnd.getDate() + 6);\n      \n      const registrosInWeek = this.filteredRecords.filter(record => {\n        const leadDate = this.getLeadDate(record);\n        return leadDate >= current && leadDate <= weekEnd;\n      }).length;\n\n      data.push({\n        period: `${current.getDate()}/${current.getMonth() + 1}`,\n        registros: registrosInWeek\n      });\n\n      current.setDate(current.getDate() + 7);\n    }\n\n    return data;\n  }\n\n  // View methods\n  setView(view: 'overview' | 'sla' | 'phases' | 'registros') {\n    this.currentView = view;\n  }\n\n  isStandaloneView(): boolean {\n    // Check if accessed via direct URL (has query params) vs embedded in kanban\n    // If boardId was provided via @Input (embedded), it's not standalone\n    // If boardId comes from route query params, it's standalone\n    return !!this.route.snapshot.queryParams['boardId'] && !this.boardIdFromInput;\n  }\n\n  private get boardIdFromInput(): boolean {\n    // Check if boardId was set via @Input before route processing\n    return this.boardId !== '' && !this.route.snapshot.queryParams['boardId'];\n  }\n\n  // Export methods\n  async exportReport(format: string) {\n    try {\n      console.log(`Exportando relat√≥rio em formato ${format}`);\n      // TODO: Implement export functionality\n      alert(`Exporta√ß√£o em ${format} ser√° implementada em breve!`);\n    } catch (error) {\n      console.error('Erro ao exportar relat√≥rio:', error);\n      alert('Erro ao exportar relat√≥rio. Tente novamente.');\n    }\n  }\n\n  // Utility methods\n  formatDate(date: any): string {\n    if (!date) return '-';\n    const d = date.toDate ? date.toDate() : new Date(date);\n    return d.toLocaleDateString('pt-BR');\n  }\n\n  formatDuration(days: number): string {\n    if (days === 0) return '-';\n    if (days === 1) return '1 dia';\n    return `${days} dias`;\n  }\n\n  getResponsibleName(userId: string): string {\n    const user = this.users.find(u => u.uid === userId);\n    return user?.displayName || user?.email || 'N√£o atribu√≠do';\n  }\n\n  getColumnName(columnId: string): string {\n    const column = this.columns.find(c => c.id === columnId);\n    return column?.name || 'Fase desconhecida';\n  }\n\n  getColumnColor(columnId: string): string {\n    const column = this.columns.find(c => c.id === columnId);\n    return column?.color || '#6B7280';\n  }\n\n  goBack() {\n    // Check if we came from a specific board URL or from dashboard\n    if (this.route.snapshot.queryParams['boardId']) {\n      // Came from direct URL, go to kanban\n      this.router.navigate(['/kanban', this.boardId], {\n        queryParams: { ownerId: this.ownerId }\n      });\n    } else {\n      // Came from dashboard, go back to dashboard\n      this.router.navigate(['/dashboard']);\n    }\n  }\n\n  getChartBarHeight(value: number): number {\n    if (this.chartData.registrosOverTime.length === 0) return 0;\n    const maxValue = Math.max(...this.chartData.registrosOverTime.map(d => d.registros));\n    return maxValue > 0 ? (value / maxValue * 100) : 0;\n  }\n\n  getPhasePercentage(value: number): number {\n    if (!this.chartData.phaseDistribution.length) return 0;\n    const maxValue = Math.max(...this.chartData.phaseDistribution.map(item => item.value));\n    return maxValue > 0 ? (value / maxValue) * 100 : 0;\n  }\n\n  // Column management methods\n  private initializeColumns() {\n    this.initializeAvailableColumns();\n    this.loadSelectedColumns();\n  }\n\n\n\n  private initializeAvailableColumns() {\n    // Reset available columns\n    this.availableColumns = [];\n\n    // Always add essential system columns\n    const systemColumns = [\n      { key: 'currentPhase', label: 'Fase Atual', type: 'system', field: 'columnId' },\n      { key: 'createdAt', label: 'Criado em', type: 'system', field: 'createdAt' },\n      { key: 'status', label: 'Status', type: 'system', field: 'status' },\n      { key: 'responsibleUser', label: 'Respons√°vel', type: 'system', field: 'responsibleUserEmail' }\n    ];\n\n    this.availableColumns.push(...systemColumns);\n\n    // Add form fields from the board's initial form configuration\n    const formFields = (this.board as any)?.initialFormFields || [];\n    \n    console.log('üîç Campos do formul√°rio para colunas:', formFields);\n    \n    // First, add common form fields that we know exist\n    const commonFormFields = [\n      { name: 'contactName', label: 'Nome do Contato', type: 'text' },\n      { name: 'contactEmail', label: 'Email do Contato', type: 'email' },\n      { name: 'contactPhone', label: 'Telefone do Contato', type: 'tel' },\n      { name: 'companyName', label: 'Nome da Empresa', type: 'text' },\n      { name: 'cnpj', label: 'CNPJ', type: 'text' }\n    ];\n\n    // Add common fields first (they might be overridden if exist in form config)\n    commonFormFields.forEach(field => {\n      this.availableColumns.push({\n        key: field.name,\n        label: field.label,\n        type: 'form',\n        field: `fields.${field.name}`,\n        fieldType: field.type\n      });\n    });\n\n    // Then add configured form fields (will not duplicate if already added)\n    formFields.forEach((field: any) => {\n      if (field.name && field.label) {\n        // Check if this field already exists\n        const existingColumn = this.availableColumns.find(col => col.key === field.name);\n        if (!existingColumn) {\n          this.availableColumns.push({\n            key: field.name,\n            label: field.label || field.name,\n            type: 'form',\n            field: `fields.${field.name}`,\n            fieldType: field.type || 'text'\n          });\n        } else {\n          // Update existing column with form config\n          existingColumn.label = field.label || existingColumn.label;\n          existingColumn.fieldType = field.type || existingColumn.fieldType;\n        }\n      }\n    });\n\n    console.log('üìä Colunas dispon√≠veis inicializadas:', this.availableColumns);\n  }\n\n  private loadSelectedColumns() {\n    if (!this.boardId) return;\n    \n    try {\n      const saved = localStorage.getItem(`report-columns-${this.boardId}`);\n      if (saved) {\n        this.selectedColumns = JSON.parse(saved);\n      } else {\n        // Default columns - include the most important fields\n        this.selectedColumns = [\n          'contactName',\n          'contactEmail',\n          'companyName', \n          'currentPhase',\n          'createdAt',\n          'status'\n        ];\n      }\n    } catch (error) {\n      console.warn('Could not load selected columns from localStorage:', error);\n      this.selectedColumns = ['contactName', 'contactEmail', 'companyName', 'currentPhase', 'createdAt', 'status'];\n    }\n  }\n\n  private saveSelectedColumns() {\n    if (!this.boardId) return;\n    \n    try {\n      localStorage.setItem(`report-columns-${this.boardId}`, JSON.stringify(this.selectedColumns));\n    } catch (error) {\n      console.warn('Could not save selected columns to localStorage:', error);\n    }\n  }\n\n  toggleColumnSelector() {\n    this.showColumnSelector = !this.showColumnSelector;\n  }\n\n  isColumnSelected(columnKey: string): boolean {\n    return this.selectedColumns.includes(columnKey);\n  }\n\n  toggleColumn(columnKey: string) {\n    if (this.isColumnSelected(columnKey)) {\n      this.selectedColumns = this.selectedColumns.filter(key => key !== columnKey);\n    } else {\n      this.selectedColumns.push(columnKey);\n    }\n    this.saveSelectedColumns();\n  }\n\n  getSelectedColumns() {\n    return this.availableColumns.filter(col => this.selectedColumns.includes(col.key));\n  }\n\n  getColumnValue(lead: Lead, column: any): string {\n    switch (column.key) {\n      case 'currentPhase':\n        return this.getColumnName(lead.columnId);\n      case 'createdAt':\n        return this.formatDate(lead.createdAt);\n      case 'status':\n        if (this.isLeadConcluded(lead)) return 'Conclu√≠do';\n        if (this.isLeadOverdue(lead)) return 'Em Atraso';\n        return 'Ativo';\n      case 'responsibleUser':\n        return lead.responsibleUserName || lead.responsibleUserEmail || 'N√£o atribu√≠do';\n      \n      // Form fields - using same logic as Kanban component\n      case 'contactName':\n        return this.readFieldValue(lead, 'contactName');\n      case 'contactEmail':\n        return this.readFieldValue(lead, 'contactEmail');\n      case 'contactPhone':\n        return this.readFieldValue(lead, 'contactPhone');\n      case 'companyName':\n        return this.readFieldValue(lead, 'companyName');\n      case 'cnpj':\n        return this.readFieldValue(lead, 'cnpj');\n      \n      default:\n        // For dynamic form fields, try to get from fields object\n        const value = lead.fields?.[column.key];\n        if (value !== undefined && value !== null && value !== '') {\n          return String(value);\n        }\n        \n        // Fallback to nested property access\n        const nestedValue = this.getNestedProperty(lead, column.field);\n        return nestedValue ? String(nestedValue) : '-';\n    }\n  }\n\n  // Method inspired by the Kanban component's readFieldValue\n  private readFieldValue(lead: Lead, key: string): string {\n    if (!lead.fields) return '-';\n\n    // Synonyms mapping based on Kanban component\n    const synonymsGroup: Record<string, string[]> = {\n      companyName: ['companyName','empresa','nomeEmpresa','nameCompany','company','company_name','empresa_nome','nameComapny'],\n      contactName: ['contactName','name','nome','nomeLead','nameLead','leadName'],\n      contactEmail: ['contactEmail','email','emailLead','contatoEmail','leadEmail'],\n      contactPhone: ['contactPhone','phone','telefone','celular','phoneLead','telefoneContato'],\n      cnpj: ['cnpj','cnpjCompany','cnpjEmpresa','companyCnpj']\n    };\n\n    // Get all possible field names for this key\n    const candidates = synonymsGroup[key] || [key];\n    \n    // Try each candidate until we find a value\n    for (const candidate of candidates) {\n      const value = lead.fields[candidate];\n      if (value !== undefined && value !== null && String(value).trim() !== '') {\n        return String(value);\n      }\n    }\n    \n    return '-';\n  }\n\n  private getNestedProperty(obj: any, path: string): any {\n    return path.split('.').reduce((current, prop) => {\n      return current && current[prop] !== undefined ? current[prop] : null;\n    }, obj);\n  }\n\n  // Helper methods for template\n  getSystemColumns() {\n    return this.availableColumns.filter(col => col.type === 'system');\n  }\n\n  getFormColumns() {\n    return this.availableColumns.filter(col => col.type === 'form');\n  }\n\n  hasFormColumns(): boolean {\n    return this.availableColumns.filter(col => col.type === 'form').length > 0;\n  }\n\n  // M√©todo de debug tempor√°rio\n  debugLeadStructure() {\n    if (this.records.length === 0) {\n      alert('Nenhum registro dispon√≠vel para debug');\n      return;\n    }\n\n    const lead = this.records[0];\n    console.log('üêõ DEBUG COMPLETO DO LEAD:');\n    console.log('üêõ Lead completo:', lead);\n    console.log('üêõ Lead.fields:', lead.fields);\n    console.log('üêõ Chaves dos fields:', lead.fields ? Object.keys(lead.fields) : 'sem fields');\n    console.log('üêõ Valores dos fields:', lead.fields ? Object.entries(lead.fields) : 'sem entries');\n\n    // Testar especificamente os campos problem√°ticos\n    console.log('üêõ TESTANDO CAMPOS PROBLEM√ÅTICOS:');\n    console.log('üêõ contactName tentativas:', [\n      lead.fields?.['contactName'],\n      lead.fields?.['name'], \n      lead.fields?.['nome']\n    ]);\n    console.log('üêõ contactEmail tentativas:', [\n      lead.fields?.['contactEmail'],\n      lead.fields?.['email']\n    ]);\n\n    // Mostrar resultado do m√©todo readFieldValue\n    console.log('üêõ RESULTADO DOS M√âTODOS:');\n    console.log('üêõ readFieldValue(contactName):', this.readFieldValue(lead, 'contactName'));\n    console.log('üêõ readFieldValue(contactEmail):', this.readFieldValue(lead, 'contactEmail'));\n    console.log('üêõ readFieldValue(companyName):', this.readFieldValue(lead, 'companyName'));\n\n    // Mostrar no alerta tamb√©m\n    const debugInfo = {\n      leadId: lead.id,\n      fieldsKeys: lead.fields ? Object.keys(lead.fields) : 'no fields',\n      contactNameResult: this.readFieldValue(lead, 'contactName'),\n      contactEmailResult: this.readFieldValue(lead, 'contactEmail'),\n      companyNameResult: this.readFieldValue(lead, 'companyName'),\n      allFields: lead.fields\n    };\n\n    alert('DEBUG INFO (veja console para detalhes):\\n' + JSON.stringify(debugInfo, null, 2));\n  }\n\n\n  applyFilters() {\n    console.log('=== APLICANDO FILTROS KANBAN-STYLE ===');\n    console.log('filterQuery:', this.filterQuery);\n    console.log('filterOnlyMine:', this.filterOnlyMine);\n    console.log('dynamicFilters:', this.dynamicFilters);\n    console.log('Total de registros dispon√≠veis:', this.records.length);\n    \n    this.filteredRecords = this.records.filter(record => {\n      // Search query filter\n      if (this.filterQuery && this.filterQuery.trim()) {\n        const searchTerm = this.filterQuery.toLowerCase();\n        const searchableFields = [\n          this.readFieldValue(record, 'contactName'),\n          this.readFieldValue(record, 'contactEmail'),\n          this.readFieldValue(record, 'companyName'),\n          this.readFieldValue(record, 'contactPhone'),\n          this.getColumnName(record.columnId)\n        ];\n        \n        const matches = searchableFields.some(field => \n          field.toLowerCase().includes(searchTerm)\n        );\n        \n        if (!matches) return false;\n      }\n\n      // Only mine filter\n      if (this.filterOnlyMine && record.responsibleUserId !== this.currentUser?.uid) {\n        return false;\n      }\n\n      // Dynamic filters\n      for (const [fieldName, filterValue] of Object.entries(this.dynamicFilters)) {\n        if (filterValue && typeof filterValue === 'string' && filterValue.trim()) {\n          const recordValue = this.readFieldValue(record, fieldName).toLowerCase();\n          const searchValue = filterValue.toLowerCase();\n          if (!recordValue.includes(searchValue)) return false;\n        }\n      }\n\n      return true;\n    });\n    \n    console.log('=== RESULTADO DOS FILTROS ===');\n    console.log(`${this.records.length} registros total -> ${this.filteredRecords.length} registros filtrados`);\n    \n    // Recalcular m√©tricas dos relat√≥rios ap√≥s aplicar filtros\n    this.calculateSummaryStats();\n    this.calculateSLAIndicators();\n    this.calculatePhaseMetrics();\n    this.generateChartData();\n  }\n\n  exportToExcel() {\n    if (this.filteredRecords.length === 0) {\n      alert('N√£o h√° registros para exportar.');\n      return;\n    }\n\n    // Preparar dados para exporta√ß√£o\n    const exportData = this.filteredRecords.map(record => {\n      const data: any = {};\n      \n      // Campos b√°sicos\n      data['ID'] = record.id;\n      data['Fase'] = this.getColumnName(record.columnId);\n      data['Respons√°vel'] = record.responsibleUserId || 'N√£o atribu√≠do';\n      data['Data de Cria√ß√£o'] = record.createdAt ? new Date(record.createdAt.toDate()).toLocaleDateString('pt-BR') : '';\n      \n      // Campos din√¢micos\n      if (record.fields) {\n        Object.entries(record.fields).forEach(([key, value]) => {\n          data[key] = value || '';\n        });\n      }\n      \n      return data;\n    });\n\n    // Criar conte√∫do CSV\n    if (exportData.length === 0) {\n      alert('N√£o h√° dados para exportar.');\n      return;\n    }\n\n    const headers = Object.keys(exportData[0]);\n    const csvContent = [\n      headers.join(','),\n      ...exportData.map(row => \n        headers.map(header => {\n          const value = row[header] || '';\n          // Escapar aspas e envolver em aspas se contiver v√≠rgula\n          const escapedValue = String(value).replace(/\"/g, '\"\"');\n          return escapedValue.includes(',') ? `\"${escapedValue}\"` : escapedValue;\n        }).join(',')\n      )\n    ].join('\\n');\n\n    // Criar e baixar arquivo\n    const blob = new Blob(['\\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    \n    const boardName = this.board?.name || 'Board';\n    const currentDate = new Date().toLocaleDateString('pt-BR').replace(/\\//g, '-');\n    link.setAttribute('download', `${boardName}_Relat√≥rio_${currentDate}.csv`);\n    \n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    console.log(`Exported ${this.filteredRecords.length} records to Excel`);\n  }\n}", "<!-- Standalone Reports (accessed via URL) -->\n<app-main-layout *ngIf=\"boardId && isStandaloneView()\">\n  <!-- Breadcrumb -->\n  <app-company-breadcrumb [title]=\"'Relat√≥rios - ' + (board?.name || 'Quadro')\">\n  </app-company-breadcrumb>\n\n  <!-- Main Content -->\n  <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n    \n    <!-- Reusable Advanced Filters Component -->\n    <app-advanced-filters \n      *ngIf=\"!isLoading && boardId && ownerId && columns.length > 0\"\n      [boardId]=\"boardId\"\n      [ownerId]=\"ownerId\" \n      [columns]=\"columns\"\n      [currentUser]=\"currentUser\"\n      [(filterQuery)]=\"filterQuery\"\n      [(filterOnlyMine)]=\"filterOnlyMine\"\n      [(dynamicFilters)]=\"dynamicFilters\"\n      [(showAdvancedFilters)]=\"showAdvancedFilters\"\n      (filtersApplied)=\"applyFilters()\">\n    </app-advanced-filters>\n\n    <!-- Navigation Tabs -->\n    <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 mb-6\">\n      <div class=\"border-b border-gray-200\">\n        <nav class=\"-mb-px flex space-x-8 px-6\" aria-label=\"Tabs\">\n          <button\n            *ngFor=\"let tab of [\n              { key: 'overview', label: 'Vis√£o Geral', icon: 'fas fa-chart-pie' },\n              { key: 'sla', label: 'Indicadores SLA', icon: 'fas fa-clock' },\n              { key: 'phases', label: 'M√©tricas por Fase', icon: 'fas fa-columns' },\n              { key: 'registros', label: 'Lista de Registros', icon: 'fas fa-list' }\n            ]\"\n            (click)=\"setView($any(tab.key))\"\n            [class.border-blue-500]=\"currentView === tab.key\"\n            [class.text-blue-600]=\"currentView === tab.key\"\n            [class.border-transparent]=\"currentView !== tab.key\"\n            [class.text-gray-500]=\"currentView !== tab.key\"\n            class=\"whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm hover:text-gray-700 hover:border-gray-300 transition-colors\">\n            <i [class]=\"tab.icon + ' mr-2'\"></i>\n            {{ tab.label }}\n          </button>\n        </nav>\n      </div>\n    </div>\n\n    <!-- Loading State -->\n    <div *ngIf=\"isLoading || isGeneratingReport\" class=\"flex items-center justify-center py-12\">\n      <div class=\"text-center\">\n        <i class=\"fas fa-spinner fa-spin text-4xl text-blue-500 mb-4\"></i>\n        <p class=\"text-gray-600\">{{ isLoading ? 'Carregando dados...' : 'Gerando relat√≥rio...' }}</p>\n      </div>\n    </div>\n\n    <!-- Content based on current view -->\n    <div *ngIf=\"!isLoading && !isGeneratingReport\">\n\n      <!-- Overview Tab -->\n      <div *ngIf=\"currentView === 'overview'\">\n        <!-- Summary Cards -->\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6 mb-8\">\n          <div class=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n            <div class=\"flex items-center\">\n              <div class=\"flex-shrink-0\">\n                <i class=\"fas fa-users text-2xl text-blue-500\"></i>\n              </div>\n              <div class=\"ml-4\">\n                <p class=\"text-sm font-medium text-gray-500\">Total de Registros</p>\n                <p class=\"text-2xl font-bold text-gray-900\">{{ summaryStats.totalRecords }}</p>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n            <div class=\"flex items-center\">\n              <div class=\"flex-shrink-0\">\n                <i class=\"fas fa-plus-circle text-2xl text-green-500\"></i>\n              </div>\n              <div class=\"ml-4\">\n                <p class=\"text-sm font-medium text-gray-500\">Novos no Per√≠odo</p>\n                <p class=\"text-2xl font-bold text-gray-900\">{{ summaryStats.newRecordsThisPeriod }}</p>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n            <div class=\"flex items-center\">\n              <div class=\"flex-shrink-0\">\n                <i class=\"fas fa-check-circle text-2xl text-purple-500\"></i>\n              </div>\n              <div class=\"ml-4\">\n                <p class=\"text-sm font-medium text-gray-500\">Conclu√≠dos</p>\n                <p class=\"text-2xl font-bold text-gray-900\">{{ summaryStats.concludedRecords }}</p>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n            <div class=\"flex items-center\">\n              <div class=\"flex-shrink-0\">\n                <i class=\"fas fa-clock text-2xl text-orange-500\"></i>\n              </div>\n              <div class=\"ml-4\">\n                <p class=\"text-sm font-medium text-gray-500\">Tempo M√©dio</p>\n                <p class=\"text-2xl font-bold text-gray-900\">{{ formatDuration(summaryStats.avgConversionTime) }}</p>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n            <div class=\"flex items-center\">\n              <div class=\"flex-shrink-0\">\n                <i class=\"fas fa-play-circle text-2xl text-blue-500\"></i>\n              </div>\n              <div class=\"ml-4\">\n                <p class=\"text-sm font-medium text-gray-500\">Ativos</p>\n                <p class=\"text-2xl font-bold text-gray-900\">{{ summaryStats.activeRecords }}</p>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n            <div class=\"flex items-center\">\n              <div class=\"flex-shrink-0\">\n                <i class=\"fas fa-exclamation-triangle text-2xl text-red-500\"></i>\n              </div>\n              <div class=\"ml-4\">\n                <p class=\"text-sm font-medium text-gray-500\">Em Atraso</p>\n                <p class=\"text-2xl font-bold text-gray-900\">{{ summaryStats.overdueRecords }}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Quick Charts -->\n        <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <!-- Phase Distribution Chart -->\n          <div class=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">\n              <i class=\"fas fa-chart-bar mr-2 text-blue-500\"></i>\n              Registros por Fase\n            </h3>\n            <div class=\"space-y-4\">\n              <!-- Debug Info -->\n              <div *ngIf=\"chartData.phaseDistribution.length === 0\" class=\"text-center py-4\">\n                <p class=\"text-gray-500 text-sm\">\n                  üîç Debug: Nenhum dado de fase encontrado\n                  <br>Fases: {{ columns.length }} | Registros: {{ filteredRecords.length }}\n                </p>\n              </div>\n              \n              <div *ngFor=\"let item of chartData.phaseDistribution\" class=\"space-y-2\">\n                <div class=\"flex items-center justify-between\">\n                  <div class=\"flex items-center\">\n                    <div class=\"w-3 h-3 rounded-full mr-2\" [style.background-color]=\"item.color\"></div>\n                    <span class=\"text-sm font-medium text-gray-700\">{{ item.name }}</span>\n                  </div>\n                  <span class=\"text-sm font-bold text-gray-900\">{{ item.value }}</span>\n                </div>\n                <div class=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div class=\"h-2 rounded-full\" \n                       [style.background-color]=\"item.color\"\n                       [style.width.%]=\"getPhasePercentage(item.value)\">\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Conversion Funnel -->\n          <div class=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">Funil de Convers√£o</h3>\n            <div class=\"space-y-2\">\n              <div *ngFor=\"let item of chartData.conversionFunnel; let i = index\" \n                   class=\"relative\">\n                <div class=\"flex items-center justify-between p-3 rounded-lg bg-gray-50\">\n                  <span class=\"text-sm font-medium text-gray-700\">{{ item.phase }}</span>\n                  <span class=\"text-sm font-bold text-gray-900\">{{ item.registros }}</span>\n                </div>\n                <div *ngIf=\"i < chartData.conversionFunnel.length - 1\" \n                     class=\"flex justify-center py-1\">\n                  <i class=\"fas fa-chevron-down text-gray-400\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- SLA Indicators Tab -->\n      <div *ngIf=\"currentView === 'sla'\">\n        <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n          <div class=\"px-6 py-4 border-b border-gray-200\">\n            <h3 class=\"text-lg font-semibold text-gray-900\">Indicadores de SLA por Fase</h3>\n            <p class=\"text-sm text-gray-600 mt-1\">An√°lise de cumprimento de prazos definidos para cada fase</p>\n          </div>\n          \n          <div class=\"overflow-x-auto\">\n            <table class=\"min-w-full divide-y divide-gray-200\">\n              <thead class=\"bg-gray-50\">\n                <tr>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Fase</th>\n                  <th class=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">SLA (dias)</th>\n                  <th class=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">Total</th>\n                  <th class=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">No Prazo</th>\n                  <th class=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">Em Atraso</th>\n                  <th class=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">% Cumprimento</th>\n                </tr>\n              </thead>\n              <tbody class=\"bg-white divide-y divide-gray-200\">\n                <tr *ngFor=\"let indicator of slaIndicators\">\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"flex items-center\">\n                      <div class=\"w-3 h-3 rounded-full mr-3\" [style.background-color]=\"indicator.phaseColor\"></div>\n                      <span class=\"text-sm font-medium text-gray-900\">{{ indicator.phaseName }}</span>\n                    </div>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-center text-sm text-gray-900\">\n                    {{ indicator.slaDays }}\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-center text-sm text-gray-900\">\n                    {{ indicator.totalRecords }}\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-center\">\n                    <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                      {{ indicator.onTime }}\n                    </span>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-center\">\n                    <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                      {{ indicator.overdue }}\n                    </span>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-center\">\n                    <div class=\"flex items-center justify-center\">\n                      <div class=\"w-16 bg-gray-200 rounded-full h-2 mr-2\">\n                        <div \n                          class=\"h-2 rounded-full transition-all duration-300\"\n                          [class.bg-green-500]=\"indicator.compliance >= 80\"\n                          [class.bg-yellow-500]=\"indicator.compliance >= 60 && indicator.compliance < 80\"\n                          [class.bg-red-500]=\"indicator.compliance < 60\"\n                          [style.width.%]=\"indicator.compliance\">\n                        </div>\n                      </div>\n                      <span class=\"text-sm font-medium text-gray-900\">{{ indicator.compliance }}%</span>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          \n          <div *ngIf=\"slaIndicators.length === 0\" class=\"px-6 py-8 text-center\">\n            <i class=\"fas fa-clock text-4xl text-gray-300 mb-4\"></i>\n            <p class=\"text-gray-500\">Nenhuma fase possui SLA configurado</p>\n          </div>\n        </div>\n      </div>\n\n      <!-- Phase Metrics Tab -->\n      <div *ngIf=\"currentView === 'phases'\">\n        <div class=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          <div *ngFor=\"let metric of phaseMetrics\" class=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n            <div class=\"flex items-center justify-between mb-4\">\n              <h3 class=\"text-lg font-semibold text-gray-900\">{{ metric.phaseName }}</h3>\n              <div class=\"w-4 h-4 rounded-full\" [style.background-color]=\"metric.phaseColor\"></div>\n            </div>\n            \n            <div class=\"space-y-4\">\n              <div class=\"flex justify-between items-center\">\n                <span class=\"text-sm text-gray-600\">Registros</span>\n                <span class=\"text-lg font-bold text-gray-900\">{{ metric.recordsCount }}</span>\n              </div>\n              \n              <div class=\"flex justify-between items-center\">\n                <span class=\"text-sm text-gray-600\">Tempo M√©dio</span>\n                <span class=\"text-lg font-bold text-gray-900\">{{ formatDuration(metric.avgTimeInPhase) }}</span>\n              </div>\n              \n              <div class=\"flex justify-between items-center\">\n                <span class=\"text-sm text-gray-600\">Taxa de Convers√£o</span>\n                <span class=\"text-lg font-bold text-gray-900\">{{ metric.conversionRate }}%</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Registros List Tab -->\n      <div *ngIf=\"currentView === 'registros'\">\n        <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n          <div class=\"px-6 py-4 border-b border-gray-200 flex justify-between items-center\">\n            <div class=\"flex items-center gap-3\">\n              <div>\n                <h3 class=\"text-lg font-semibold text-gray-900\">Lista Detalhada de Registros</h3>\n                <p class=\"text-sm text-gray-600 mt-1\">{{ filteredRecords.length }} registros encontrados</p>\n              </div>\n            </div>\n            \n            <!-- Column selector button -->\n            <div class=\"relative\">\n              <button\n                (click)=\"toggleColumnSelector()\"\n                class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">\n                <i class=\"fas fa-columns mr-2\"></i>\n                Colunas ({{ selectedColumns.length }})\n                <i class=\"fas fa-chevron-down ml-2\"></i>\n              </button>\n\n              <!-- Column selector dropdown -->\n              <div *ngIf=\"showColumnSelector\" class=\"absolute right-0 mt-2 w-72 bg-white border border-gray-200 rounded-lg shadow-lg z-10\">\n                <div class=\"px-4 py-3 border-b border-gray-200\">\n                  <h4 class=\"text-sm font-semibold text-gray-900\">Selecionar Colunas</h4>\n                  <p class=\"text-xs text-gray-600 mt-1\">Escolha as colunas que deseja exibir na tabela</p>\n                </div>\n                \n                <div class=\"max-h-80 overflow-y-auto\">\n                  <!-- System columns -->\n                  <div class=\"px-4 py-2\">\n                    <h5 class=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-2\">Colunas do Sistema</h5>\n                    <div class=\"space-y-2\">\n                      <label *ngFor=\"let column of getSystemColumns()\" \n                             class=\"flex items-center cursor-pointer hover:bg-gray-50 px-2 py-1 rounded\">\n                        <input \n                          type=\"checkbox\" \n                          [checked]=\"isColumnSelected(column.key)\"\n                          (change)=\"toggleColumn(column.key)\"\n                          class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\">\n                        <span class=\"ml-3 text-sm text-gray-700\">{{ column.label }}</span>\n                      </label>\n                    </div>\n                  </div>\n                  \n                  <!-- Form fields -->\n                  <div *ngIf=\"hasFormColumns()\" class=\"px-4 py-2 border-t border-gray-100\">\n                    <h5 class=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-2\">Campos do Formul√°rio</h5>\n                    <div class=\"space-y-2\">\n                      <label *ngFor=\"let column of getFormColumns()\" \n                             class=\"flex items-center cursor-pointer hover:bg-gray-50 px-2 py-1 rounded\">\n                        <input \n                          type=\"checkbox\" \n                          [checked]=\"isColumnSelected(column.key)\"\n                          (change)=\"toggleColumn(column.key)\"\n                          class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\">\n                        <span class=\"ml-3 text-sm text-gray-700\">{{ column.label }}</span>\n                        <span class=\"ml-auto text-xs text-gray-400\">{{ column.fieldType }}</span>\n                      </label>\n                    </div>\n                  </div>\n                </div>\n                \n                <div class=\"px-4 py-3 border-t border-gray-200 bg-gray-50\">\n                  <button\n                    (click)=\"toggleColumnSelector()\"\n                    class=\"w-full px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                    Aplicar\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"overflow-x-auto\">\n            <table class=\"min-w-full divide-y divide-gray-200\">\n              <thead class=\"bg-gray-50\">\n                <tr>\n                  <th *ngFor=\"let column of getSelectedColumns()\" \n                      class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                    {{ column.label }}\n                  </th>\n                </tr>\n              </thead>\n              <tbody class=\"bg-white divide-y divide-gray-200\">\n                <tr *ngFor=\"let lead of filteredRecords; let i = index\" [class.bg-gray-50]=\"i % 2 === 1\">\n                  <td *ngFor=\"let column of getSelectedColumns()\" class=\"px-6 py-4 whitespace-nowrap\">\n                    <div *ngIf=\"column.key === 'currentPhase'\" class=\"flex items-center\">\n                      <div class=\"w-3 h-3 rounded-full mr-2\" [style.background-color]=\"getColumnColor(lead.columnId)\"></div>\n                      <span class=\"text-sm text-gray-900\">{{ getColumnValue(lead, column) }}</span>\n                    </div>\n                    <div *ngIf=\"column.key === 'status'\">\n                      <span \n                        class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\"\n                        [class.bg-green-100]=\"isLeadConcluded(lead)\"\n                        [class.text-green-800]=\"isLeadConcluded(lead)\"\n                        [class.bg-red-100]=\"isLeadOverdue(lead) && !isLeadConcluded(lead)\"\n                        [class.text-red-800]=\"isLeadOverdue(lead) && !isLeadConcluded(lead)\"\n                        [class.bg-blue-100]=\"!isLeadConcluded(lead) && !isLeadOverdue(lead)\"\n                        [class.text-blue-800]=\"!isLeadConcluded(lead) && !isLeadOverdue(lead)\">\n                        {{ getColumnValue(lead, column) }}\n                      </span>\n                    </div>\n                    <div *ngIf=\"column.key !== 'currentPhase' && column.key !== 'status'\" class=\"text-sm text-gray-900\">\n                      {{ getColumnValue(lead, column) }}\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          \n          <div *ngIf=\"filteredRecords.length === 0\" class=\"px-6 py-8 text-center\">\n            <i class=\"fas fa-search text-4xl text-gray-300 mb-4\"></i>\n            <p class=\"text-gray-500\">Nenhum registro encontrado com os filtros aplicados</p>\n          </div>\n        </div>\n      </div>\n\n\n    </div>\n  </div>\n</app-main-layout>\n\n<!-- Inline Reports (used within kanban) -->\n<div *ngIf=\"boardId && !isStandaloneView()\" class=\"p-4 md:p-8\">\n  <div class=\"max-w-7xl mx-auto\">\n    \n    <!-- Header -->\n    <div class=\"flex justify-between items-center mb-6\">\n      <h2 class=\"text-2xl font-bold text-gray-900\">\n        <i class=\"fas fa-chart-bar mr-2 text-blue-500\"></i>\n        Relat√≥rios - {{ board?.name }}\n      </h2>\n    </div>\n    \n    <!-- Reusable Advanced Filters Component -->\n    <app-advanced-filters \n      *ngIf=\"!isLoading && boardId && ownerId && columns.length > 0\"\n      [boardId]=\"boardId\"\n      [ownerId]=\"ownerId\" \n      [columns]=\"columns\"\n      [currentUser]=\"currentUser\"\n      [(filterQuery)]=\"filterQuery\"\n      [(filterOnlyMine)]=\"filterOnlyMine\"\n      [(dynamicFilters)]=\"dynamicFilters\"\n      [(showAdvancedFilters)]=\"showAdvancedFilters\"\n      (filtersApplied)=\"applyFilters()\">\n    </app-advanced-filters>\n\n    <!-- Tab Navigation for Views -->\n    <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 mb-6\">\n      <div class=\"border-b border-gray-200\">\n        <nav class=\"flex space-x-8 px-6\">\n          <button\n            *ngFor=\"let tab of viewTabs\"\n            (click)=\"setView($any(tab.key))\"\n            class=\"py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-200\"\n            [class.border-blue-500]=\"currentView === tab.key\"\n            [class.text-blue-600]=\"currentView === tab.key\"\n            [class.border-transparent]=\"currentView !== tab.key\"\n            [class.text-gray-500]=\"currentView !== tab.key\"\n            [class.hover:text-gray-700]=\"currentView !== tab.key\">\n            <i class=\"fas {{ tab.icon }} mr-2\"></i>\n            {{ tab.name }}\n          </button>\n        </nav>\n      </div>\n\n      <!-- Report Content -->\n      <div class=\"p-6\">\n        \n        <!-- Overview Tab -->\n        <div *ngIf=\"currentView === 'overview'\">\n          <!-- Summary Stats -->\n          <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n            <div class=\"bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg shadow p-6 text-white\">\n              <div class=\"flex items-center justify-between\">\n                <div>\n                  <p class=\"text-blue-100\">Total de Registros</p>\n                  <p class=\"text-3xl font-bold\">{{ summaryStats.totalRecords }}</p>\n                </div>\n                <div class=\"bg-blue-400 bg-opacity-30 p-3 rounded-full\">\n                  <i class=\"fas fa-users text-2xl\"></i>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"bg-gradient-to-r from-green-500 to-green-600 rounded-lg shadow p-6 text-white\">\n              <div class=\"flex items-center justify-between\">\n                <div>\n                  <p class=\"text-green-100\">Registros Conclu√≠dos</p>\n                  <p class=\"text-3xl font-bold\">{{ summaryStats.concludedRecords }}</p>\n                </div>\n                <div class=\"bg-green-400 bg-opacity-30 p-3 rounded-full\">\n                  <i class=\"fas fa-check-circle text-2xl\"></i>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-lg shadow p-6 text-white\">\n              <div class=\"flex items-center justify-between\">\n                <div>\n                  <p class=\"text-yellow-100\">Registros Atrasados</p>\n                  <p class=\"text-3xl font-bold\">{{ summaryStats.overdueRecords }}</p>\n                </div>\n                <div class=\"bg-yellow-400 bg-opacity-30 p-3 rounded-full\">\n                  <i class=\"fas fa-clock text-2xl\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- SLA Indicators Tab -->\n        <div *ngIf=\"currentView === 'sla'\">\n          <div class=\"bg-white\">\n            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">Indicadores de SLA por Fase</h3>\n            <div class=\"overflow-x-auto\">\n              <table class=\"min-w-full divide-y divide-gray-200\">\n                <thead class=\"bg-gray-50\">\n                  <tr>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Fase</th>\n                    <th class=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">SLA (dias)</th>\n                    <th class=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">% Cumprimento</th>\n                    <th class=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">No Prazo</th>\n                    <th class=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">Atrasados</th>\n                  </tr>\n                </thead>\n                <tbody class=\"bg-white divide-y divide-gray-200\">\n                  <tr *ngFor=\"let indicator of slaIndicators\">\n                    <td class=\"px-6 py-4 whitespace-nowrap\">\n                      <div class=\"flex items-center\">\n                        <div class=\"w-3 h-3 rounded-full mr-3\" [style.background-color]=\"indicator.phaseColor\"></div>\n                        <span class=\"text-sm font-medium text-gray-900\">{{ indicator.phaseName }}</span>\n                      </div>\n                    </td>\n                    <td class=\"px-6 py-4 whitespace-nowrap text-center text-sm text-gray-900\">\n                      {{ indicator.slaDays }}\n                    </td>\n                    <td class=\"px-6 py-4 whitespace-nowrap text-center\">\n                      <span class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\"\n                            [class.bg-green-100]=\"indicator.compliance >= 80\"\n                            [class.text-green-800]=\"indicator.compliance >= 80\"\n                            [class.bg-yellow-100]=\"indicator.compliance >= 60 && indicator.compliance < 80\"\n                            [class.text-yellow-800]=\"indicator.compliance >= 60 && indicator.compliance < 80\"\n                            [class.bg-red-100]=\"indicator.compliance < 60\"\n                            [class.text-red-800]=\"indicator.compliance < 60\">\n                        {{ indicator.compliance }}%\n                      </span>\n                    </td>\n                    <td class=\"px-6 py-4 whitespace-nowrap text-center text-sm text-green-600 font-medium\">\n                      {{ indicator.onTime }}\n                    </td>\n                    <td class=\"px-6 py-4 whitespace-nowrap text-center text-sm text-red-600 font-medium\">\n                      {{ indicator.overdue }}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n        <!-- Phase Metrics Tab -->\n        <div *ngIf=\"currentView === 'phases'\">\n          <div class=\"space-y-6\">\n            <div *ngFor=\"let metric of phaseMetrics\" class=\"bg-white rounded-lg border border-gray-200 p-6\">\n              <div class=\"flex items-center justify-between mb-4\">\n                <div class=\"flex items-center\">\n                  <div class=\"w-4 h-4 rounded-full mr-3\" [style.background-color]=\"metric.phaseColor\"></div>\n                  <h3 class=\"text-lg font-semibold text-gray-900\">{{ metric.phaseName }}</h3>\n                </div>\n                <span class=\"text-2xl font-bold text-gray-900\">{{ metric.recordsCount }} registros</span>\n              </div>\n              \n              <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div class=\"bg-gray-50 rounded-lg p-4\">\n                  <p class=\"text-sm text-gray-600\">Tempo M√©dio na Fase</p>\n                  <p class=\"text-xl font-semibold text-gray-900\">{{ formatDuration(metric.avgTimeInPhase) }}</p>\n                </div>\n                <div class=\"bg-gray-50 rounded-lg p-4\">\n                  <p class=\"text-sm text-gray-600\">Taxa de Convers√£o</p>\n                  <p class=\"text-xl font-semibold text-gray-900\">{{ metric.conversionRate }}%</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Registros List Tab -->\n        <div *ngIf=\"currentView === 'registros'\">\n          <div class=\"bg-white\">\n            <div class=\"flex justify-between items-center mb-4\">\n              <div class=\"flex items-center gap-3\">\n                <h3 class=\"text-lg font-semibold text-gray-900\">Lista de Registros ({{ filteredRecords.length }})</h3>\n              </div>\n              \n              <!-- Action buttons -->\n              <div class=\"flex items-center gap-2\">\n                <!-- Export to Excel button -->\n                <button\n                  (click)=\"exportToExcel()\"\n                  class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500\">\n                  <i class=\"fas fa-file-excel mr-2 text-green-600\"></i>\n                  Exportar Excel\n                </button>\n                \n                <!-- Column selector button -->\n                <div class=\"relative\">\n                  <button\n                    (click)=\"toggleColumnSelector()\"\n                    class=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">\n                    <i class=\"fas fa-columns mr-2\"></i>\n                  Colunas ({{ selectedColumns.length }})\n                  <i class=\"fas fa-chevron-down ml-2\"></i>\n                </button>\n\n                <!-- Column selector dropdown (shared with standalone version) -->\n                <div *ngIf=\"showColumnSelector\" class=\"absolute right-0 mt-2 w-72 bg-white border border-gray-200 rounded-lg shadow-lg z-10\">\n                  <div class=\"px-4 py-3 border-b border-gray-200\">\n                    <h4 class=\"text-sm font-semibold text-gray-900\">Selecionar Colunas</h4>\n                    <p class=\"text-xs text-gray-600 mt-1\">Escolha as colunas que deseja exibir na tabela</p>\n                  </div>\n                  \n                  <div class=\"max-h-80 overflow-y-auto\">\n                    <!-- System columns -->\n                    <div class=\"px-4 py-2\">\n                      <h5 class=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-2\">Colunas do Sistema</h5>\n                      <div class=\"space-y-2\">\n                        <label *ngFor=\"let column of getSystemColumns()\" \n                               class=\"flex items-center cursor-pointer hover:bg-gray-50 px-2 py-1 rounded\">\n                          <input \n                            type=\"checkbox\" \n                            [checked]=\"isColumnSelected(column.key)\"\n                            (change)=\"toggleColumn(column.key)\"\n                            class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\">\n                          <span class=\"ml-3 text-sm text-gray-700\">{{ column.label }}</span>\n                        </label>\n                      </div>\n                    </div>\n                    \n                    <!-- Form fields -->\n                    <div *ngIf=\"hasFormColumns()\" class=\"px-4 py-2 border-t border-gray-100\">\n                      <h5 class=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-2\">Campos do Formul√°rio</h5>\n                      <div class=\"space-y-2\">\n                        <label *ngFor=\"let column of getFormColumns()\" \n                               class=\"flex items-center cursor-pointer hover:bg-gray-50 px-2 py-1 rounded\">\n                          <input \n                            type=\"checkbox\" \n                            [checked]=\"isColumnSelected(column.key)\"\n                            (change)=\"toggleColumn(column.key)\"\n                            class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\">\n                          <span class=\"ml-3 text-sm text-gray-700\">{{ column.label }}</span>\n                          <span class=\"ml-auto text-xs text-gray-400\">{{ column.fieldType }}</span>\n                        </label>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div class=\"px-4 py-3 border-t border-gray-200 bg-gray-50\">\n                    <button\n                      (click)=\"toggleColumnSelector()\"\n                      class=\"w-full px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                      Aplicar\n                    </button>\n                  </div>\n                </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"overflow-x-auto\">\n              <table class=\"min-w-full divide-y divide-gray-200\">\n                <thead class=\"bg-gray-50\">\n                  <tr>\n                    <th *ngFor=\"let column of getSelectedColumns()\" \n                        class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap\">\n                      {{ column.label }}\n                    </th>\n                  </tr>\n                </thead>\n                <tbody class=\"bg-white divide-y divide-gray-200\">\n                  <tr *ngFor=\"let lead of filteredRecords | slice:0:50\">\n                    <td *ngFor=\"let column of getSelectedColumns()\" class=\"px-6 py-4 whitespace-nowrap\">\n                      <div *ngIf=\"column.key === 'currentPhase'\" class=\"flex items-center\">\n                        <div class=\"w-3 h-3 rounded-full mr-2\" [style.background-color]=\"getColumnColor(lead.columnId)\"></div>\n                        <span class=\"text-sm text-gray-900\">{{ getColumnValue(lead, column) }}</span>\n                      </div>\n                      <div *ngIf=\"column.key === 'status'\">\n                        <span \n                          class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\"\n                          [class.bg-green-100]=\"isLeadConcluded(lead)\"\n                          [class.text-green-800]=\"isLeadConcluded(lead)\"\n                          [class.bg-red-100]=\"isLeadOverdue(lead) && !isLeadConcluded(lead)\"\n                          [class.text-red-800]=\"isLeadOverdue(lead) && !isLeadConcluded(lead)\"\n                          [class.bg-blue-100]=\"!isLeadConcluded(lead) && !isLeadOverdue(lead)\"\n                          [class.text-blue-800]=\"!isLeadConcluded(lead) && !isLeadOverdue(lead)\">\n                          {{ getColumnValue(lead, column) }}\n                        </span>\n                      </div>\n                      <div *ngIf=\"column.key !== 'currentPhase' && column.key !== 'status'\" class=\"text-sm text-gray-900\">\n                        {{ getColumnValue(lead, column) }}\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n\n      </div>\n    </div>\n    \n  </div>\n</div>\n\n<!-- Board Selection Interface -->\n<div *ngIf=\"!boardId\" class=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n  <div class=\"max-w-md w-full mx-auto\">\n    <div class=\"bg-white rounded-lg shadow-lg p-8\">\n      <div class=\"text-center mb-6\">\n        <div class=\"w-16 h-16 mx-auto bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n          <i class=\"fas fa-chart-bar text-2xl text-blue-500\"></i>\n        </div>\n        <h2 class=\"text-2xl font-bold text-gray-900 mb-2\">Relat√≥rios</h2>\n        <p class=\"text-gray-600\">Selecione um quadro para visualizar seus relat√≥rios</p>\n      </div>\n\n      <div class=\"space-y-3\">\n        <div *ngFor=\"let availableBoard of availableBoards\" \n             (click)=\"selectBoard(availableBoard.id!)\" \n             class=\"p-4 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 cursor-pointer transition-colors\">\n          <div class=\"flex items-center justify-between\">\n            <div>\n              <h3 class=\"font-medium text-gray-900\">{{ availableBoard.name }}</h3>\n              <p class=\"text-sm text-gray-600\" *ngIf=\"availableBoard.description\">{{ availableBoard.description }}</p>\n            </div>\n            <i class=\"fas fa-chevron-right text-gray-400\"></i>\n          </div>\n        </div>\n        \n        <div *ngIf=\"availableBoards.length === 0\" class=\"text-center py-8\">\n          <p class=\"text-gray-500\">Nenhum quadro encontrado</p>\n          <button \n            (click)=\"goBack()\"\n            class=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors\">\n            Voltar ao Dashboard\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"],
  "mappings": "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",
  "names": []
}
