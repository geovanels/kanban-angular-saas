{
  "version": 3,
  "sources": ["src/app/components/smtp-config/smtp-config.component.ts"],
  "sourcesContent": ["import { Component, inject, signal, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators, FormsModule } from '@angular/forms';\nimport { CompanyService } from '../../services/company.service';\nimport { SubdomainService } from '../../services/subdomain.service';\nimport { SmtpService } from '../../services/smtp.service';\nimport { Company } from '../../models/company.model';\nimport { AuthService } from '../../services/auth.service';\nimport { ConfigHeaderComponent } from '../config-header/config-header.component';\nimport { MainLayoutComponent } from '../main-layout/main-layout.component';\n\n@Component({\n  selector: 'app-smtp-config',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule, ConfigHeaderComponent, MainLayoutComponent],\n  template: `\n    <app-main-layout>\n      <app-config-header title=\"Configuração SMTP\">\n        <div class=\"flex items-center space-x-3\">\n          <button \n            class=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            (click)=\"saveConfiguration()\"\n            [disabled]=\"isSaving()\">\n            @if (isSaving()) {\n              <i class=\"fas fa-spinner fa-spin mr-1\"></i>\n              Salvando...\n            } @else {\n              <i class=\"fas fa-save mr-1\"></i>\n              Salvar Configurações\n            }\n          </button>\n        </div>\n      </app-config-header>\n\n      <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <!-- Success/Error Messages -->\n        @if (successMessage()) {\n          <div class=\"mb-6 p-4 bg-green-50 border border-green-200 rounded-lg text-green-800\">\n            <i class=\"fas fa-check-circle mr-2\"></i>\n            {{ successMessage() }}\n          </div>\n        }\n        \n        @if (errorMessage()) {\n          <div class=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg text-red-800\">\n            <i class=\"fas fa-exclamation-circle mr-2\"></i>\n            {{ errorMessage() }}\n          </div>\n        }\n\n        <!-- SMTP Configuration Form -->\n        <div class=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <div class=\"p-6 border-b border-gray-200\">\n            <h3 class=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <i class=\"fas fa-envelope text-blue-500 mr-2\"></i>\n              Configuração do Servidor SMTP\n            </h3>\n            <p class=\"text-sm text-gray-600 mt-1\">Configure o servidor de email para sua empresa enviar notificações</p>\n          </div>\n          \n          <div class=\"p-6\">\n            <form [formGroup]=\"smtpForm\" (ngSubmit)=\"saveConfiguration()\" class=\"space-y-6\">\n              <!-- Server Configuration -->\n              <div class=\"grid grid-cols-1 lg:grid-cols-4 gap-4\">\n                <div class=\"lg:col-span-3\">\n                  <label class=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Servidor SMTP *\n                  </label>\n                  <input\n                    type=\"text\"\n                    formControlName=\"host\"\n                    [class]=\"'w-full px-3 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500 ' + \n                            (smtpForm.get('host')?.invalid && smtpForm.get('host')?.touched ? \n                             'border-red-300 bg-red-50' : 'border-gray-300')\"\n                    placeholder=\"smtp.sendgrid.net\">\n                  <p class=\"text-xs text-gray-500 mt-1\">Endereço do servidor SMTP</p>\n                </div>\n                \n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Porta *\n                  </label>\n                  <input\n                    type=\"number\"\n                    formControlName=\"port\"\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"587\">\n                  <p class=\"text-xs text-gray-500 mt-1\">Porta SMTP</p>\n                </div>\n              </div>\n\n              <!-- Authentication -->\n              <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Usuário *\n                  </label>\n                  <input\n                    type=\"text\"\n                    formControlName=\"user\"\n                    [class]=\"'w-full px-3 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500 ' + \n                            (smtpForm.get('user')?.invalid && smtpForm.get('user')?.touched ? \n                             'border-red-300 bg-red-50' : 'border-gray-300')\"\n                    placeholder=\"apikey\">\n                  <p class=\"text-xs text-gray-500 mt-1\">Para SendGrid, use sempre \"apikey\"</p>\n                </div>\n                \n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Senha *\n                  </label>\n                  <input\n                    type=\"password\"\n                    formControlName=\"password\"\n                    [class]=\"'w-full px-3 py-2 border rounded-md focus:ring-blue-500 focus:border-blue-500 ' + \n                            (smtpForm.get('password')?.invalid && smtpForm.get('password')?.touched ? \n                             'border-red-300 bg-red-50' : 'border-gray-300')\"\n                    placeholder=\"SG.xxxxxxxxxx...\">\n                  <p class=\"text-xs text-gray-500 mt-1\">API Key do SendGrid (começa com SG.)</p>\n                </div>\n              </div>\n\n              <!-- Sender Information -->\n              <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Nome do Remetente *\n                  </label>\n                  <input\n                    type=\"text\"\n                    formControlName=\"fromName\"\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                    [placeholder]=\"currentCompany()?.name || 'Nome da Empresa'\">\n                  <p class=\"text-xs text-gray-500 mt-1\">Nome que aparecerá nos emails enviados</p>\n                </div>\n                \n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Email do Remetente *\n                  </label>\n                  <input\n                    type=\"email\"\n                    formControlName=\"fromEmail\"\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"noreply@suaempresa.com\">\n                  <p class=\"text-xs text-gray-500 mt-1\">Email que aparecerá como remetente</p>\n                </div>\n              </div>\n\n              <!-- Security Options -->\n              <div class=\"space-y-3\">\n                <h4 class=\"text-md font-medium text-gray-900\">Opções de Segurança</h4>\n                <div class=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    formControlName=\"secure\"\n                    id=\"secureConnection\"\n                    class=\"h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\">\n                  <label for=\"secureConnection\" class=\"ml-2 text-sm text-gray-700\">\n                    Usar conexão segura (SSL/TLS)\n                  </label>\n                </div>\n                <p class=\"text-xs text-gray-500\">Recomendado para a maioria dos provedores de email</p>\n              </div>\n\n              <!-- Test Email Section -->\n              <div class=\"pt-6 border-t border-gray-200\">\n                <h4 class=\"text-md font-medium text-gray-900 mb-4\">Testar Configuração</h4>\n                <div class=\"flex space-x-3\">\n                  <input\n                    type=\"email\"\n                    [(ngModel)]=\"testEmail\"\n                    [ngModelOptions]=\"{standalone: true}\"\n                    class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"seu-email@exemplo.com\">\n                  <button\n                    type=\"button\"\n                    class=\"text-white px-4 py-2 rounded-md text-sm font-medium transition-colors\"\n                    [style.background-color]=\"getPrimaryColor()\"\n                    (click)=\"sendTestEmail()\"\n                    [disabled]=\"isTesting() || !testEmail || smtpForm.invalid\">\n                    @if (isTesting()) {\n                      <i class=\"fas fa-spinner fa-spin mr-1\"></i>\n                      Enviando...\n                    } @else {\n                      <i class=\"fas fa-paper-plane mr-1\"></i>\n                      Testar\n                    }\n                  </button>\n                </div>\n                <p class=\"text-xs text-gray-500 mt-2\">Envie um email de teste para verificar se a configuração está funcionando</p>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <!-- Quick Setup Guides -->\n        <div class=\"mt-8 bg-white rounded-lg shadow-sm border border-gray-200\">\n          <div class=\"p-6 border-b border-gray-200\">\n            <h3 class=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <i class=\"fas fa-question-circle text-blue-500 mr-2\"></i>\n              Guias de Configuração Rápida\n            </h3>\n          </div>\n          \n          <div class=\"p-6\">\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <!-- SendGrid (Recomendado) -->\n              <div class=\"border border-green-200 rounded-lg p-4 bg-green-50\">\n                <div class=\"flex items-center mb-3\">\n                  <div class=\"w-8 h-8 bg-green-500 rounded flex items-center justify-center\">\n                    <i class=\"fas fa-paper-plane text-white text-sm\"></i>\n                  </div>\n                  <h4 class=\"ml-3 text-sm font-semibold text-gray-900\">SendGrid (Recomendado)</h4>\n                  <span class=\"ml-2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded\">Configurado</span>\n                </div>\n                <div class=\"text-xs text-gray-600 space-y-1\">\n                  <p><strong>Servidor:</strong> smtp.sendgrid.net</p>\n                  <p><strong>Porta:</strong> 587</p>\n                  <p><strong>Usuário:</strong> apikey</p>\n                  <p><strong>Senha:</strong> Sua API Key do SendGrid</p>\n                  <p class=\"text-green-700\"><strong>✓</strong> Maior taxa de entrega</p>\n                </div>\n              </div>\n\n              <!-- Gmail -->\n              <div class=\"border border-gray-200 rounded-lg p-4\">\n                <div class=\"flex items-center mb-3\">\n                  <div class=\"w-8 h-8 bg-red-500 rounded flex items-center justify-center\">\n                    <i class=\"fab fa-google text-white text-sm\"></i>\n                  </div>\n                  <h4 class=\"ml-3 text-sm font-semibold text-gray-900\">Gmail</h4>\n                </div>\n                <div class=\"text-xs text-gray-600 space-y-1\">\n                  <p><strong>Servidor:</strong> smtp.gmail.com</p>\n                  <p><strong>Porta:</strong> 587</p>\n                  <p><strong>Seguro:</strong> Sim</p>\n                  <p><strong>Senha:</strong> App Password necessária</p>\n                </div>\n              </div>\n\n              <!-- Outlook -->\n              <div class=\"border border-gray-200 rounded-lg p-4\">\n                <div class=\"flex items-center mb-3\">\n                  <div class=\"w-8 h-8 bg-blue-500 rounded flex items-center justify-center\">\n                    <i class=\"fab fa-microsoft text-white text-sm\"></i>\n                  </div>\n                  <h4 class=\"ml-3 text-sm font-semibold text-gray-900\">Outlook</h4>\n                </div>\n                <div class=\"text-xs text-gray-600 space-y-1\">\n                  <p><strong>Servidor:</strong> smtp-mail.outlook.com</p>\n                  <p><strong>Porta:</strong> 587</p>\n                  <p><strong>Seguro:</strong> Sim</p>\n                  <p><strong>Auth:</strong> STARTTLS</p>\n                </div>\n              </div>\n\n              <!-- Generic -->\n              <div class=\"border border-gray-200 rounded-lg p-4\">\n                <div class=\"flex items-center mb-3\">\n                  <div class=\"w-8 h-8 bg-gray-500 rounded flex items-center justify-center\">\n                    <i class=\"fas fa-server text-white text-sm\"></i>\n                  </div>\n                  <h4 class=\"ml-3 text-sm font-semibold text-gray-900\">Outros</h4>\n                </div>\n                <div class=\"text-xs text-gray-600 space-y-1\">\n                  <p><strong>Porta 25:</strong> Não segura</p>\n                  <p><strong>Porta 465:</strong> SSL</p>\n                  <p><strong>Porta 587:</strong> TLS</p>\n                  <p><strong>Porta 2525:</strong> Alternativa</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </app-main-layout>\n  `,\n  styles: [`\n    :host {\n      display: block;\n    }\n  `]\n})\nexport class SmtpConfigComponent implements OnInit {\n  private fb = inject(FormBuilder);\n  private companyService = inject(CompanyService);\n  private subdomainService = inject(SubdomainService);\n  private smtpService = inject(SmtpService);\n  private authService = inject(AuthService);\n\n  smtpForm: FormGroup;\n  currentCompany = signal<Company | null>(null);\n  isSaving = signal(false);\n  isTesting = signal(false);\n  testEmail = '';\n  successMessage = signal<string | null>(null);\n  errorMessage = signal<string | null>(null);\n\n  constructor() {\n    this.smtpForm = this.fb.group({\n      host: ['smtp.sendgrid.net', Validators.required],\n      port: [587, [Validators.required, Validators.min(1), Validators.max(65535)]],\n      secure: [true],\n      user: ['apikey', [Validators.required]],\n      password: ['', Validators.required],\n      fromName: ['', Validators.required],\n      fromEmail: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  ngOnInit() {\n    this.loadCurrentConfiguration();\n  }\n\n  loadCurrentConfiguration() {\n    const company = this.subdomainService.getCurrentCompany();\n    if (company) {\n      this.currentCompany.set(company);\n      \n      if (company.smtpConfig) {\n        this.smtpForm.patchValue({\n          host: company.smtpConfig.host,\n          port: company.smtpConfig.port,\n          secure: company.smtpConfig.secure,\n          user: company.smtpConfig.user,\n          password: company.smtpConfig.password,\n          fromName: company.smtpConfig.fromName,\n          fromEmail: company.smtpConfig.fromEmail\n        });\n      } else {\n        // Configurar valores padrão para empresas sem configuração SMTP (SendGrid)\n        this.smtpForm.patchValue({\n          host: 'smtp.sendgrid.net',\n          port: 587,\n          secure: true,\n          user: 'apikey',\n          fromName: company.name || 'Sistema Kanban'\n        });\n      }\n    }\n  }\n\n  async saveConfiguration() {\n    // Sempre marcar campos como touched para mostrar erros\n    this.markAllFieldsAsTouched();\n    \n    if (this.smtpForm.invalid) {\n      this.showError('Por favor, preencha todos os campos obrigatórios corretamente.');\n      return;\n    }\n\n    let company = this.currentCompany();\n    if (!company?.id) {\n      try {\n        const sub = this.companyService.getCompanySubdomain();\n        if (sub) {\n          const fetched = await this.companyService.getCompanyBySubdomain(sub);\n          if (fetched?.id) {\n            this.subdomainService.setCurrentCompany(fetched);\n            this.currentCompany.set(fetched);\n            company = fetched;\n          }\n        }\n      } catch {}\n    }\n    if (!company?.id) {\n      try {\n        const currentUser = this.authService.getCurrentUser();\n        if (currentUser?.email) {\n          const byEmail = await this.companyService.getCompanyByUserEmail(currentUser.email);\n          if (byEmail?.id) {\n            this.subdomainService.setCurrentCompany(byEmail);\n            this.currentCompany.set(byEmail);\n            company = byEmail;\n          }\n        }\n      } catch {}\n    }\n    if (!company?.id) {\n      this.showError('Empresa não encontrada');\n      return;\n    }\n\n    this.isSaving.set(true);\n    this.clearMessages();\n\n    try {\n      const formValue = this.smtpForm.value;\n      \n      // Garantir que os valores sejam do tipo correto\n      const smtpConfig = {\n        host: String(formValue.host || ''),\n        port: Number(formValue.port || 587),\n        secure: Boolean(formValue.secure),\n        user: String(formValue.user || ''),\n        password: String(formValue.password || ''),\n        fromName: String(formValue.fromName || ''),\n        fromEmail: String(formValue.fromEmail || '')\n      };\n      \n      const updatedCompany: Partial<Company> = {\n        smtpConfig: smtpConfig\n      };\n      \n      await this.companyService.updateCompany(company.id, updatedCompany);\n      \n      // Update current company\n      const refreshedCompany = { ...company, smtpConfig: smtpConfig };\n      this.subdomainService.setCurrentCompany(refreshedCompany);\n      this.currentCompany.set(refreshedCompany);\n      \n      this.showSuccess('Configurações SMTP salvas com sucesso!');\n    } catch (error) {\n      console.error('Erro ao salvar configurações SMTP:', error);\n      this.showError('Erro ao salvar configurações: ' + ((error as any)?.message || 'Tente novamente.'));\n    } finally {\n      this.isSaving.set(false);\n    }\n  }\n\n  async sendTestEmail() {\n    if (!this.testEmail || this.smtpForm.invalid) {\n      this.showError('Por favor, preencha um email válido e complete todas as configurações.');\n      return;\n    }\n\n    // Salvar configurações primeiro se necessário\n    if (this.smtpForm.dirty) {\n      await this.saveConfiguration();\n      // Aguardar um tempo para garantir que as configurações foram salvas\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n\n    this.isTesting.set(true);\n    this.clearMessages();\n\n    try {\n      const testEmailData = {\n        to: this.testEmail,\n        subject: `Teste SMTP - ${this.currentCompany()?.name || 'Sistema'}`,\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <h2 style=\"color: ${this.getPrimaryColor()};\">✅ Teste de Configuração SMTP</h2>\n            <p>Parabéns! Sua configuração SMTP está funcionando corretamente.</p>\n            <p><strong>Empresa:</strong> ${this.currentCompany()?.name}</p>\n            <p><strong>Email enviado para:</strong> ${this.testEmail}</p>\n            <p><strong>Data/Hora:</strong> ${new Date().toLocaleString('pt-BR')}</p>\n            <div style=\"background-color: #f8f9fa; padding: 15px; border-left: 4px solid ${this.getPrimaryColor()}; margin: 20px 0;\">\n              <strong>Configurações utilizadas:</strong><br>\n              Host: ${this.smtpForm.get('host')?.value}<br>\n              Porta: ${this.smtpForm.get('port')?.value}<br>\n              Seguro: ${this.smtpForm.get('secure')?.value ? 'Sim' : 'Não'}<br>\n              Remetente: ${this.smtpForm.get('fromName')?.value} &lt;${this.smtpForm.get('fromEmail')?.value}&gt;\n            </div>\n            <p style=\"color: #28a745; font-weight: bold;\">🎉 Sistema de emails configurado com sucesso!</p>\n          </div>\n        `\n      };\n\n      console.log('🧪 Enviando email de teste via SmtpService...');\n      \n      // Usar o SmtpService para enviar o email de teste\n      const result = await this.smtpService.sendEmail(testEmailData).toPromise();\n      \n      if (result?.success) {\n        this.showSuccess(`✅ Email de teste enviado com sucesso para ${this.testEmail}! Verifique sua caixa de entrada.`);\n      } else {\n        throw new Error(result?.error || 'Falha no envio do email');\n      }\n      \n    } catch (error: any) {\n      console.error('❌ Erro ao enviar email de teste:', error);\n      \n      let errorMsg = 'Erro ao enviar email de teste.';\n      \n      if (error?.error) {\n        errorMsg = error.error;\n      } else if (error?.message) {\n        if (error.message.includes('API Key') || error.message.includes('401')) {\n          errorMsg = 'API Key do SendGrid inválida. Verifique se a chave está correta.';\n        } else if (error.message.includes('configuração') || error.message.includes('incompleta')) {\n          errorMsg = 'Configuração SMTP incompleta. Preencha todos os campos.';\n        } else {\n          errorMsg = `Erro: ${error.message}`;\n        }\n      }\n      \n      this.showError(errorMsg);\n    } finally {\n      this.isTesting.set(false);\n    }\n  }\n\n  private showSuccess(message: string) {\n    this.successMessage.set(message);\n    this.errorMessage.set(null);\n    setTimeout(() => this.successMessage.set(null), 5000);\n  }\n\n  private showError(message: string) {\n    this.errorMessage.set(message);\n    this.successMessage.set(null);\n    setTimeout(() => this.errorMessage.set(null), 5000);\n  }\n\n  private clearMessages() {\n    this.successMessage.set(null);\n    this.errorMessage.set(null);\n  }\n\n  private getFormErrors(): any {\n    const errors: any = {};\n    Object.keys(this.smtpForm.controls).forEach(key => {\n      const control = this.smtpForm.get(key);\n      if (control && !control.valid && control.touched) {\n        errors[key] = control.errors;\n      }\n    });\n    return errors;\n  }\n\n  private markAllFieldsAsTouched() {\n    Object.keys(this.smtpForm.controls).forEach(key => {\n      this.smtpForm.get(key)?.markAsTouched();\n    });\n  }\n\n  getPrimaryColor(): string {\n    const company = this.subdomainService.getCurrentCompany();\n    return company?.primaryColor || company?.brandingConfig?.primaryColor || '#3B82F6';\n  }\n}"],
  "mappings": "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",
  "names": []
}
