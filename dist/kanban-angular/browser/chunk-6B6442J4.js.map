{
  "version": 3,
  "sources": ["src/app/services/smtp.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError, from } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SubdomainService } from './subdomain.service';\nimport { Company } from '../models/company.model';\nimport { Functions, httpsCallable } from '@angular/fire/functions';\n\nexport interface EmailData {\n  to: string;\n  subject: string;\n  html?: string;\n  text?: string;\n  cc?: string[];\n  bcc?: string[];\n  attachments?: Array<{\n    filename: string;\n    content: string; // base64 encoded\n    contentType: string;\n  }>;\n  templateId?: string;\n  templateData?: { [key: string]: any };\n}\n\nexport interface EmailResponse {\n  success: boolean;\n  messageId?: string;\n  error?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SmtpService {\n  private http = inject(HttpClient);\n  private subdomainService = inject(SubdomainService);\n  private functions = inject(Functions);\n\n  // Enviar email usando HTTP Firebase Function (melhor controle de CORS)\n  sendEmail(emailData: EmailData): Observable<EmailResponse> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      console.error('‚ùå Contexto da empresa n√£o inicializado');\n      return throwError(() => new Error('Contexto da empresa n√£o inicializado'));\n    }\n\n    if (!this.validateSmtpConfig(company)) {\n      const missingFields = this.getSmtpValidationErrors(company);\n      console.error('‚ùå Configura√ß√£o SMTP da empresa est√° incompleta:', company.smtpConfig, 'Campos faltantes:', missingFields);\n      return throwError(() => new Error(`Configura√ß√£o SMTP incompleta. Campos faltantes: ${missingFields.join(', ')}`));\n    }\n\n    console.log('üìß Preparando envio de email via HTTP Firebase Functions:', {\n      to: emailData.to,\n      subject: emailData.subject,\n      fromEmail: company.smtpConfig.fromEmail,\n      fromName: company.smtpConfig.fromName\n    });\n\n    // Usar HTTP Function para melhor controle de CORS\n    const httpFunctionUrl = 'https://us-central1-kanban-gobuyer.cloudfunctions.net/sendEmailHttp';\n    \n    const payload = {\n      emailData: {\n        to: emailData.to,\n        subject: emailData.subject,\n        html: emailData.html,\n        text: emailData.text,\n        cc: emailData.cc,\n        bcc: emailData.bcc\n      },\n      companyId: company.id // Usar companyId ao inv√©s de passar SMTP config diretamente\n    };\n\n    console.log('üì§ Enviando para HTTP Firebase Function:', {\n      url: httpFunctionUrl,\n      payload: { ...payload }\n    });\n\n    return this.http.post<EmailResponse>(httpFunctionUrl, payload).pipe(\n      map((result: any) => {\n        console.log('‚úÖ Email enviado com sucesso via HTTP Function:', result);\n        return {\n          success: result.success || true,\n          messageId: result.messageId || 'sent',\n          message: result.message\n        };\n      }),\n      catchError(error => {\n        console.error('‚ùå Erro detalhado ao enviar email via HTTP Function:', error);\n        \n        let errorMessage = 'Erro desconhecido ao enviar email';\n        \n        if (error.status === 400) {\n          errorMessage = error.error?.error || 'Dados inv√°lidos para envio de email';\n        } else if (error.status === 404) {\n          errorMessage = 'Empresa n√£o encontrada';\n        } else if (error.status === 500) {\n          errorMessage = error.error?.error || 'Erro interno do servidor';\n        } else if (error.error?.error) {\n          errorMessage = error.error.error;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n        \n        return throwError(() => ({\n          success: false,\n          error: errorMessage,\n          details: error\n        }));\n      })\n    );\n  }\n\n  // Enviar email de template\n  sendTemplateEmail(templateId: string, to: string, templateData: { [key: string]: any }, subject?: string): Observable<EmailResponse> {\n    return this.sendEmail({\n      to,\n      subject: subject || 'Email autom√°tico',\n      templateId,\n      templateData\n    });\n  }\n\n  // Enviar email de notifica√ß√£o simples\n  sendNotificationEmail(to: string, subject: string, message: string, isHtml: boolean = false): Observable<EmailResponse> {\n    const emailData: EmailData = {\n      to,\n      subject,\n      [isHtml ? 'html' : 'text']: message\n    };\n\n    return this.sendEmail(emailData);\n  }\n\n  // Enviar email de novo lead\n  sendNewLeadNotification(lead: any, boardName: string, columnName: string): Observable<EmailResponse> {\n    const company = this.subdomainService.getCurrentCompany();\n    if (!company) {\n      return throwError(() => new Error('Empresa n√£o encontrada'));\n    }\n\n    const subject = `Novo Registro: ${lead.fields.contactName || lead.fields.companyName || 'Registro sem nome'}`;\n    \n    const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <div style=\"background-color: ${company.primaryColor || '#007bff'}; color: white; padding: 20px; text-align: center;\">\n          <h1>${company.name}</h1>\n          <h2>Novo Registro Recebido</h2>\n        </div>\n        \n        <div style=\"padding: 20px; background-color: #f8f9fa;\">\n          <h3>Detalhes do Registro:</h3>\n          <table style=\"width: 100%; border-collapse: collapse;\">\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Quadro:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${boardName}</td>\n            </tr>\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Fase:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${columnName}</td>\n            </tr>\n            ${lead.fields.companyName ? `\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Empresa:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${lead.fields.companyName}</td>\n            </tr>\n            ` : ''}\n            ${lead.fields.contactName ? `\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Contato:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${lead.fields.contactName}</td>\n            </tr>\n            ` : ''}\n            ${lead.fields.contactEmail ? `\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Email:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${lead.fields.contactEmail}</td>\n            </tr>\n            ` : ''}\n            ${lead.fields.contactPhone ? `\n            <tr>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd; font-weight: bold;\">Telefone:</td>\n              <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${lead.fields.contactPhone}</td>\n            </tr>\n            ` : ''}\n          </table>\n        </div>\n        \n        <div style=\"padding: 20px; text-align: center; color: #666;\">\n          <p>\n            <a href=\"${this.subdomainService.getCompanyUrl(company.subdomain)}\" \n               style=\"background-color: ${company.primaryColor || '#007bff'}; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;\">\n              Ver no Sistema\n            </a>\n          </p>\n        </div>\n      </div>\n    `;\n\n    return this.sendEmail({\n      to: company.ownerEmail,\n      subject,\n      html\n    });\n  }\n\n  // Testar configura√ß√£o SMTP via Firebase Functions\n  testSmtpConfiguration(): Observable<EmailResponse> {\n    const company = this.subdomainService.getCurrentCompany();\n    \n    if (!company) {\n      return throwError(() => new Error('Empresa n√£o encontrada'));\n    }\n\n    if (!this.validateSmtpConfig(company)) {\n      const missingFields = this.getSmtpValidationErrors(company);\n      return throwError(() => new Error(`Configura√ß√£o SMTP incompleta. Campos faltantes: ${missingFields.join(', ')}`));\n    }\n\n    console.log('üß™ Testando configura√ß√£o SMTP via Firebase Functions');\n\n    // Usar Firebase Callable Function para teste de configura√ß√£o\n    const testSmtpCallable = httpsCallable(this.functions, 'testSmtpConfig');\n    \n    const payload = {\n      smtpConfig: {\n        host: company.smtpConfig.host,\n        port: company.smtpConfig.port,\n        secure: company.smtpConfig.secure,\n        user: company.smtpConfig.user,\n        password: company.smtpConfig.password,\n        fromName: company.smtpConfig.fromName,\n        fromEmail: company.smtpConfig.fromEmail\n      },\n      testEmail: company.ownerEmail\n    };\n\n    return from(testSmtpCallable(payload)).pipe(\n      map((result: any) => {\n        console.log('‚úÖ Teste SMTP realizado com sucesso:', result.data);\n        return {\n          success: result.data.success || true,\n          messageId: result.data.messageId || 'test-sent',\n          message: result.data.message || 'Teste realizado com sucesso'\n        };\n      }),\n      catchError(error => {\n        console.error('‚ùå Erro ao testar configura√ß√£o SMTP:', error);\n        \n        let errorMessage = 'Erro ao testar configura√ß√£o SMTP';\n        \n        if (error.message) {\n          errorMessage = error.message;\n        }\n        \n        return throwError(() => ({\n          success: false,\n          error: errorMessage,\n          details: error\n        }));\n      })\n    );\n  }\n\n  // Validar configura√ß√£o SMTP da empresa\n  private validateSmtpConfig(company: Company): boolean {\n    const config = company.smtpConfig;\n    \n    return !!(\n      config &&\n      config.host &&\n      config.port &&\n      config.user &&\n      config.password &&\n      config.fromName &&\n      config.fromEmail\n    );\n  }\n\n  // Validar configura√ß√£o SMTP e retornar campos faltantes\n  private getSmtpValidationErrors(company: Company): string[] {\n    const config = company.smtpConfig;\n    const errors: string[] = [];\n    \n    if (!config) {\n      errors.push('Configura√ß√£o SMTP n√£o encontrada');\n      return errors;\n    }\n    \n    if (!config.host) errors.push('Servidor SMTP (host)');\n    if (!config.port) errors.push('Porta SMTP');\n    if (!config.user) errors.push('Usu√°rio SMTP');\n    if (!config.password) errors.push('Senha SMTP');\n    if (!config.fromName) errors.push('Nome do remetente');\n    if (!config.fromEmail) errors.push('Email do remetente');\n    \n    return errors;\n  }\n\n  // M√©todo removido - agora usa Firebase Functions diretamente\n\n  // Obter configura√ß√µes de email da empresa atual\n  getCurrentEmailConfig(): any {\n    const company = this.subdomainService.getCurrentCompany();\n    if (!company) {\n      return null;\n    }\n\n    return {\n      fromName: company.smtpConfig.fromName,\n      fromEmail: company.smtpConfig.fromEmail,\n      isConfigured: this.validateSmtpConfig(company),\n      host: company.smtpConfig.host,\n      port: company.smtpConfig.port,\n      secure: company.smtpConfig.secure\n    };\n  }\n\n  // Atualizar configura√ß√£o SMTP da empresa\n  updateSmtpConfig(smtpConfig: Company['smtpConfig']): Observable<any> {\n    const company = this.subdomainService.getCurrentCompany();\n    if (!company) {\n      return throwError(() => new Error('Empresa n√£o encontrada'));\n    }\n\n    const apiUrl = `${this.subdomainService.getApiUrl()}/smtp-config`;\n    \n    return this.http.put(apiUrl, smtpConfig).pipe(\n      map(response => {\n        // Atualizar a configura√ß√£o localmente\n        if (company) {\n          company.smtpConfig = { ...smtpConfig };\n          this.subdomainService.setCurrentCompany(company);\n        }\n        return response;\n      }),\n      catchError(error => {\n        console.error('Erro ao atualizar configura√ß√£o SMTP:', error);\n        return throwError(() => error);\n      })\n    );\n  }\n}"],
  "mappings": "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",
  "names": []
}
