import { ComponentRef } from '@angular/core';
import { getFieldId, assignFieldValue, isUndefined, getFieldValue, reverseDeepMerge, defineHiddenProp, clone, getField, markFieldForCheck, hasKey, observe, isHiddenField, isSignalRequired, } from '../../utils';
import { Subject } from 'rxjs';
export class CoreExtension {
    constructor(config) {
        this.config = config;
        this.formId = 0;
    }
    prePopulate(field) {
        const root = field.parent;
        this.initRootOptions(field);
        this.initFieldProps(field);
        if (root) {
            Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });
            Object.defineProperty(field, 'model', {
                get: () => (hasKey(field) && field.fieldGroup ? getFieldValue(field) : root.model),
                configurable: true,
            });
        }
        Object.defineProperty(field, 'get', {
            value: (key) => getField(field, key),
            configurable: true,
        });
        this.getFieldComponentInstance(field).prePopulate?.(field);
    }
    onPopulate(field) {
        this.initFieldOptions(field);
        this.getFieldComponentInstance(field).onPopulate?.(field);
        if (field.fieldGroup) {
            field.fieldGroup.forEach((f, index) => {
                if (f) {
                    Object.defineProperty(f, 'parent', { get: () => field, configurable: true });
                    Object.defineProperty(f, 'index', { get: () => index, configurable: true });
                }
                this.formId++;
            });
        }
    }
    postPopulate(field) {
        this.getFieldComponentInstance(field).postPopulate?.(field);
    }
    initFieldProps(field) {
        field.props ??= field.templateOptions;
        Object.defineProperty(field, 'templateOptions', {
            get: () => field.props,
            set: (props) => (field.props = props),
            configurable: true,
        });
    }
    initRootOptions(field) {
        if (field.parent) {
            return;
        }
        const options = field.options;
        field.options.formState = field.options.formState || {};
        if (!options.showError) {
            options.showError = this.config.extras.showError;
        }
        if (!options.fieldChanges) {
            defineHiddenProp(options, 'fieldChanges', new Subject());
        }
        if (!options._hiddenFieldsForCheck) {
            options._hiddenFieldsForCheck = [];
        }
        options._detectChanges = (f) => {
            if (f._componentRefs) {
                markFieldForCheck(f);
            }
            f.fieldGroup?.forEach((f) => f && options._detectChanges(f));
        };
        options.detectChanges = (f) => {
            f.options.checkExpressions?.(f);
            options._detectChanges(f);
        };
        options.resetModel = (model) => {
            model = clone(model ?? options._initialModel);
            if (field.model) {
                Object.keys(field.model).forEach((k) => delete field.model[k]);
                Object.assign(field.model, model || {});
            }
            if (!isSignalRequired()) {
                observe(options, ['parentForm', 'submitted']).setValue(false, false);
            }
            options.build(field);
            field.form.reset(field.model);
        };
        options.updateInitialValue = (model) => (options._initialModel = clone(model ?? field.model));
        field.options.updateInitialValue();
    }
    initFieldOptions(field) {
        reverseDeepMerge(field, {
            id: getFieldId(`formly_${this.formId}`, field, field.index),
            hooks: {},
            modelOptions: {},
            validation: { messages: {} },
            props: !field.type || !hasKey(field)
                ? {}
                : {
                    label: '',
                    placeholder: '',
                    disabled: false,
                },
        });
        if (this.config.extras.resetFieldOnHide && field.resetOnHide !== false) {
            field.resetOnHide = true;
        }
        if (field.type !== 'formly-template' &&
            (field.template || field.expressions?.template || field.expressionProperties?.template)) {
            field.type = 'formly-template';
        }
        if (!field.type && field.fieldGroup) {
            field.type = 'formly-group';
        }
        if (field.type) {
            this.config.getMergedField(field);
        }
        if (hasKey(field) &&
            !isUndefined(field.defaultValue) &&
            isUndefined(getFieldValue(field)) &&
            !isHiddenField(field)) {
            assignFieldValue(field, field.defaultValue);
        }
        field.wrappers = field.wrappers || [];
    }
    getFieldComponentInstance(field) {
        const componentRefInstance = () => {
            let componentRef = this.config.resolveFieldTypeRef(field);
            const fieldComponentRef = field._componentRefs?.slice(-1)[0];
            if (fieldComponentRef instanceof ComponentRef &&
                fieldComponentRef?.componentType === componentRef?.componentType) {
                componentRef = fieldComponentRef;
            }
            return componentRef?.instance;
        };
        if (!field._proxyInstance) {
            defineHiddenProp(field, '_proxyInstance', new Proxy({}, {
                get: (_, prop) => componentRefInstance()?.[prop],
                set: (_, prop, value) => (componentRefInstance()[prop] = value),
            }));
        }
        return field._proxyInstance;
    }
}
//# sourceMappingURL=data:application/json;base64,