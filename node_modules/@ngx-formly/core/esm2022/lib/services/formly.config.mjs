import { Injectable, Type } from '@angular/core';
import { reverseDeepMerge } from './../utils';
import * as i0 from "@angular/core";
/**
 * Maintains list of formly config options. This can be used to register new field type.
 */
export class FormlyConfig {
    constructor() {
        this.types = {};
        this.validators = {};
        this.wrappers = {};
        this.messages = {};
        this.extras = {
            checkExpressionOn: 'modelChange',
            lazyRender: true,
            resetFieldOnHide: true,
            renderFormlyFieldElement: true,
            showError(field) {
                return (field.formControl?.invalid &&
                    (field.formControl?.touched || field.options.parentForm?.submitted || !!field.field.validation?.show));
            },
        };
        this.extensions = {};
        this.presets = {};
        this.extensionsByPriority = {};
        this.componentRefs = {};
    }
    addConfig(config) {
        if (Array.isArray(config)) {
            config.forEach((c) => this.addConfig(c));
            return;
        }
        if (config.types) {
            config.types.forEach((type) => this.setType(type));
        }
        if (config.validators) {
            config.validators.forEach((validator) => this.setValidator(validator));
        }
        if (config.wrappers) {
            config.wrappers.forEach((wrapper) => this.setWrapper(wrapper));
        }
        if (config.validationMessages) {
            config.validationMessages.forEach((validation) => this.addValidatorMessage(validation.name, validation.message));
        }
        if (config.extensions) {
            this.setSortedExtensions(config.extensions);
        }
        if (config.extras) {
            this.extras = { ...this.extras, ...config.extras };
        }
        if (config.presets) {
            this.presets = {
                ...this.presets,
                ...config.presets.reduce((acc, curr) => ({ ...acc, [curr.name]: curr.config }), {}),
            };
        }
    }
    /**
     * Allows you to specify a custom type which you can use in your field configuration.
     * You can pass an object of options, or an array of objects of options.
     */
    setType(options) {
        if (Array.isArray(options)) {
            options.forEach((option) => this.setType(option));
        }
        else {
            if (!this.types[options.name]) {
                this.types[options.name] = { name: options.name };
            }
            ['component', 'extends', 'defaultOptions', 'wrappers'].forEach((prop) => {
                if (options.hasOwnProperty(prop)) {
                    this.types[options.name][prop] = options[prop];
                }
            });
        }
    }
    getType(name, throwIfNotFound = false) {
        if (name instanceof Type) {
            return { component: name, name: name.prototype.constructor.name };
        }
        if (!this.types[name]) {
            if (throwIfNotFound) {
                throw new Error(`[Formly Error] The type "${name}" could not be found. Please make sure that is registered through the FormlyModule declaration.`);
            }
            return null;
        }
        this.mergeExtendedType(name);
        return this.types[name];
    }
    /** @ignore */
    getMergedField(field = {}) {
        const type = this.getType(field.type);
        if (!type) {
            return;
        }
        if (type.defaultOptions) {
            reverseDeepMerge(field, type.defaultOptions);
        }
        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;
        if (extendDefaults) {
            reverseDeepMerge(field, extendDefaults);
        }
        if (field?.optionsTypes) {
            field.optionsTypes.forEach((option) => {
                const defaultOptions = this.getType(option).defaultOptions;
                if (defaultOptions) {
                    reverseDeepMerge(field, defaultOptions);
                }
            });
        }
        const componentRef = this.resolveFieldTypeRef(field);
        if (componentRef?.instance?.defaultOptions) {
            reverseDeepMerge(field, componentRef.instance.defaultOptions);
        }
        if (!field.wrappers && type.wrappers) {
            field.wrappers = [...type.wrappers];
        }
    }
    /** @ignore @internal */
    resolveFieldTypeRef(field = {}) {
        const type = this.getType(field.type);
        if (!type) {
            return null;
        }
        if (!type.component) {
            return null;
        }
        if (!this.componentRefs[type.name]) {
            const { _viewContainerRef, _injector } = field.options;
            if (!_viewContainerRef || !_injector) {
                return null;
            }
            const componentRef = _viewContainerRef.createComponent(type.component, { injector: _injector });
            this.componentRefs[type.name] = componentRef;
            try {
                componentRef.destroy();
            }
            catch (e) {
                console.error(`An error occurred while destroying the Formly component type "${field.type}"`, e);
            }
        }
        return this.componentRefs[type.name];
    }
    /** @ignore @internal */
    clearRefs() {
        this.componentRefs = {};
    }
    setWrapper(options) {
        this.wrappers[options.name] = options;
        if (options.types) {
            options.types.forEach((type) => {
                this.setTypeWrapper(type, options.name);
            });
        }
    }
    getWrapper(name) {
        if (name instanceof Type) {
            return { component: name, name: name.prototype.constructor.name };
        }
        if (!this.wrappers[name]) {
            throw new Error(`[Formly Error] The wrapper "${name}" could not be found. Please make sure that is registered through the FormlyModule declaration.`);
        }
        return this.wrappers[name];
    }
    /** @ignore */
    setTypeWrapper(type, name) {
        if (!this.types[type]) {
            this.types[type] = {};
        }
        if (!this.types[type].wrappers) {
            this.types[type].wrappers = [];
        }
        if (this.types[type].wrappers.indexOf(name) === -1) {
            this.types[type].wrappers.push(name);
        }
    }
    setValidator(options) {
        this.validators[options.name] = options;
    }
    getValidator(name) {
        if (!this.validators[name]) {
            throw new Error(`[Formly Error] The validator "${name}" could not be found. Please make sure that is registered through the FormlyModule declaration.`);
        }
        return this.validators[name];
    }
    addValidatorMessage(name, message) {
        this.messages[name] = message;
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
            const deprecated = { minlength: 'minLength', maxlength: 'maxLength' };
            if (deprecated[name]) {
                console.warn(`Formly deprecation: passing validation messages key '${name}' is deprecated since v6.0, use '${deprecated[name]}' instead.`);
                this.messages[deprecated[name]] = message;
            }
        }
    }
    getValidatorMessage(name) {
        return this.messages[name];
    }
    setSortedExtensions(extensionOptions) {
        // insert new extensions, grouped by priority
        extensionOptions.forEach((extensionOption) => {
            const priority = extensionOption.priority ?? 1;
            this.extensionsByPriority[priority] = {
                ...this.extensionsByPriority[priority],
                [extensionOption.name]: extensionOption.extension,
            };
        });
        // flatten extensions object with sorted keys
        this.extensions = Object.keys(this.extensionsByPriority)
            .map(Number)
            .sort((a, b) => a - b)
            .reduce((acc, prio) => ({
            ...acc,
            ...this.extensionsByPriority[prio],
        }), {});
    }
    mergeExtendedType(name) {
        if (!this.types[name].extends) {
            return;
        }
        const extendedType = this.getType(this.types[name].extends);
        if (!this.types[name].component) {
            this.types[name].component = extendedType.component;
        }
        if (!this.types[name].wrappers) {
            this.types[name].wrappers = extendedType.wrappers;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FormlyConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FormlyConfig, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FormlyConfig, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,